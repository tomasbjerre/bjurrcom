{"meta":{"exported_on":1503734292343,"version":"1.7.1"},"data":{"app_fields":[],"app_settings":[],"apps":[],"brute":[{"key":"arR85lLkjyy9YS8+1fDrM70TB2Px18bdlZo9P6gRr/w=","firstRequest":1501250446512,"lastRequest":1501250446512,"lifetime":1513951246517,"count":1},{"key":"cRPpHvdy8sfL5UFWTquKywpwNrBuEQ6gQngGed2hJr4=","firstRequest":1503731466063,"lastRequest":1503731466063,"lifetime":1503735066080,"count":1}],"invites":[],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.0"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.0"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.3"}],"permissions":[{"id":"597b43301ffc934f6c0277c0","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c1","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c2","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c3","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c4","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c5","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c6","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c7","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c8","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277c9","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ca","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277cb","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277cc","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277cd","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ce","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277cf","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d0","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d1","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d2","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d3","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d4","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d5","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d6","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d7","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d8","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277d9","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277da","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277db","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277dc","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277dd","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277de","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277df","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e0","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e1","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e2","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e3","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e4","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e5","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e6","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e7","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e8","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277e9","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ea","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277eb","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ec","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ed","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ee","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277ef","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277f0","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"}],"permissions_apps":[],"permissions_roles":[{"id":"597b43311ffc934f6c0277f2","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c0"},{"id":"597b43311ffc934f6c0277f3","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c1"},{"id":"597b43311ffc934f6c0277f4","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c2"},{"id":"597b43311ffc934f6c0277f5","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c3"},{"id":"597b43311ffc934f6c0277f6","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c4"},{"id":"597b43311ffc934f6c0277f7","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c5"},{"id":"597b43311ffc934f6c0277f8","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c6"},{"id":"597b43311ffc934f6c0277f9","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c7"},{"id":"597b43311ffc934f6c0277fa","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c8"},{"id":"597b43311ffc934f6c0277fb","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277c9"},{"id":"597b43311ffc934f6c0277fc","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ca"},{"id":"597b43311ffc934f6c0277fd","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277cb"},{"id":"597b43311ffc934f6c0277fe","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277cc"},{"id":"597b43311ffc934f6c0277ff","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277cd"},{"id":"597b43311ffc934f6c027800","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ce"},{"id":"597b43311ffc934f6c027801","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277cf"},{"id":"597b43311ffc934f6c027802","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d0"},{"id":"597b43311ffc934f6c027803","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d1"},{"id":"597b43311ffc934f6c027804","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d2"},{"id":"597b43311ffc934f6c027805","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d3"},{"id":"597b43311ffc934f6c027806","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d4"},{"id":"597b43311ffc934f6c027807","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d5"},{"id":"597b43311ffc934f6c027808","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d6"},{"id":"597b43311ffc934f6c027809","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d7"},{"id":"597b43311ffc934f6c02780a","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d8"},{"id":"597b43311ffc934f6c02780b","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277d9"},{"id":"597b43311ffc934f6c02780c","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277da"},{"id":"597b43311ffc934f6c02780d","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277db"},{"id":"597b43311ffc934f6c02780e","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277dc"},{"id":"597b43311ffc934f6c02780f","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277dd"},{"id":"597b43311ffc934f6c027810","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277de"},{"id":"597b43311ffc934f6c027811","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277df"},{"id":"597b43311ffc934f6c027812","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e0"},{"id":"597b43311ffc934f6c027813","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e1"},{"id":"597b43311ffc934f6c027814","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e2"},{"id":"597b43311ffc934f6c027815","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e3"},{"id":"597b43311ffc934f6c027816","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e4"},{"id":"597b43311ffc934f6c027817","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e5"},{"id":"597b43311ffc934f6c027818","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e6"},{"id":"597b43311ffc934f6c027819","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e7"},{"id":"597b43311ffc934f6c02781a","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e8"},{"id":"597b43311ffc934f6c02781b","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277e9"},{"id":"597b43311ffc934f6c02781c","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ea"},{"id":"597b43311ffc934f6c02781d","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277eb"},{"id":"597b43311ffc934f6c02781e","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ec"},{"id":"597b43311ffc934f6c02781f","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ed"},{"id":"597b43311ffc934f6c027820","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ee"},{"id":"597b43311ffc934f6c027821","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277ef"},{"id":"597b43311ffc934f6c027822","role_id":"597b43301ffc934f6c0277bc","permission_id":"597b43301ffc934f6c0277f0"},{"id":"597b43311ffc934f6c027823","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277c7"},{"id":"597b43311ffc934f6c027824","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277c8"},{"id":"597b43311ffc934f6c027825","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277c9"},{"id":"597b43311ffc934f6c027826","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ca"},{"id":"597b43311ffc934f6c027827","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277cb"},{"id":"597b43311ffc934f6c027828","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277cc"},{"id":"597b43311ffc934f6c027829","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277cd"},{"id":"597b43311ffc934f6c02782a","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277cf"},{"id":"597b43311ffc934f6c02782b","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277d0"},{"id":"597b43311ffc934f6c02782c","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277d1"},{"id":"597b43311ffc934f6c02782d","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277d2"},{"id":"597b43311ffc934f6c02782e","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277d3"},{"id":"597b43311ffc934f6c02782f","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277d4"},{"id":"597b43311ffc934f6c027830","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277db"},{"id":"597b43311ffc934f6c027831","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277dc"},{"id":"597b43311ffc934f6c027832","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277dd"},{"id":"597b43311ffc934f6c027833","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277de"},{"id":"597b43311ffc934f6c027834","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277df"},{"id":"597b43311ffc934f6c027835","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e0"},{"id":"597b43311ffc934f6c027836","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e1"},{"id":"597b43311ffc934f6c027837","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e2"},{"id":"597b43311ffc934f6c027838","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e3"},{"id":"597b43311ffc934f6c027839","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e4"},{"id":"597b43311ffc934f6c02783a","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e5"},{"id":"597b43311ffc934f6c02783b","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277e6"},{"id":"597b43311ffc934f6c02783c","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ea"},{"id":"597b43311ffc934f6c02783d","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ec"},{"id":"597b43311ffc934f6c02783e","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ed"},{"id":"597b43311ffc934f6c02783f","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ee"},{"id":"597b43311ffc934f6c027840","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277ef"},{"id":"597b43311ffc934f6c027841","role_id":"597b43301ffc934f6c0277bd","permission_id":"597b43301ffc934f6c0277f0"},{"id":"597b43311ffc934f6c027842","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277c7"},{"id":"597b43311ffc934f6c027843","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277c8"},{"id":"597b43311ffc934f6c027844","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277ca"},{"id":"597b43311ffc934f6c027845","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277cc"},{"id":"597b43311ffc934f6c027846","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277cd"},{"id":"597b43311ffc934f6c027847","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277cf"},{"id":"597b43311ffc934f6c027848","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277d0"},{"id":"597b43311ffc934f6c027849","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277d1"},{"id":"597b43311ffc934f6c02784a","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277d3"},{"id":"597b43311ffc934f6c02784b","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277db"},{"id":"597b43311ffc934f6c02784c","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277dc"},{"id":"597b43311ffc934f6c02784d","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e1"},{"id":"597b43311ffc934f6c02784e","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e2"},{"id":"597b43311ffc934f6c02784f","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e3"},{"id":"597b43311ffc934f6c027850","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e4"},{"id":"597b43311ffc934f6c027851","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e5"},{"id":"597b43311ffc934f6c027852","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277e6"},{"id":"597b43311ffc934f6c027853","role_id":"597b43301ffc934f6c0277be","permission_id":"597b43301ffc934f6c0277ea"}],"permissions_users":[],"posts":[{"id":"597b4433e521cb4fbd91868f","uuid":"3fdc77df-af74-493a-85e4-9e81bc7548ed","title":"Ghost blog online","slug":"ghost-blog-online","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I just installed [Ghost blog](http://ghost.org/) and what would be a good title of the first blog post? That's right! A post about Ghost =)\\n\\n##Installation\\nMy server is running Ubuntu. Aside from this blog there are a number of websites hosted on it. Its all configured with Apache so I'll write a few notes on installing Ghost blog on Ubuntu and Apache using vhosts (Virtual Hosts).\\n\\n### Apache\\nI use mod_proxy to pass incoming requests to the Ghost application. I deny any request to /ghost/signup, this is to ensure that none can access the signup page. Right now, but that can change!, there can only be one user.\\n\\n```\\n#/etc/apache2/sites-enabled/000-default\\n\\n<VirtualHost *:80>\\n    ServerName ghost.bjurr.se\\n    ProxyPreserveHost on\\n    ProxyPass / http://localhost:2368/\\n\\n# Enable mod_proxy and uncomment to disable signup\\n#    <LocationMatch ^/ghost/signup>\\n#        Order Deny,Allow\\n#        Deny from All\\n#    </LocationMatch>\\n</VirtualHost>\\n```\\n```\\nsudo apachectl restart\\n```\\n\\n### NPM and NodeJS\\nI initially tried APT to install these packages but since those packages are to old I found another way. I used a script called [node-and-npm-in30s.sh](https://gist.github.com/dwayne/2983873).\\n\\n### Installing Ghost\\nRead about it [here](http://docs.ghost.org/installation/linux/).\\n\\n### Making it run, always\\nThere is a number of alternatives here, I went for `supervisor`.\\n```\\nsudo nano -w /etc/supervisor/conf.d/ghost.conf\\n```\\n```\\n[program:ghost]\\ncommand = /home/bjerre/local/bin/node/node /home/bjerre/sites/ghost.bjurr.se/index.js\\ndirectory = /home/bjerre/sites/ghost.bjurr.se\\nuser = bjerre\\nautostart = true\\nautorestart = true\\nstdout_logfile = /var/log/supervisor/ghost.log\\nstderr_logfile = /var/log/supervisor/ghost_err.log\\nenvironment = NODE_ENV=\\\"production\\\"\\n```\\n```\\nsudo supervisorctl restart all\\n```\\n\\n### Issues\\nDuring setup I had some issues, perhaps my solution can help someone. I installed version 0.3.2.\\n\\n* Images folder owned by root. `sudo chown ghost:ghost content/images`\\n* SQLite DB owned by root. `sudo chown ghost:ghost content/data/ghost.db`\\n* Node not found. Fixed by using absolute path to node in supervisor config.\\n* `config.js` not being found. I solved it by downloading current version of `config-loader.js` from the GitHub repository.\\n`wget https://raw.github.com/sebgie/Ghost/6ff17c78a2cb78cf9f445c7c5c41e1350c0840d8/core/config-loader.js`\\n\\nIf you have another issue, I would suggest tailing these logs:\\n\\n* `/var/log/supervisor/*.log`\\n* `/var/log/apache2/error.log`\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I just installed <a href=\"http://ghost.org/\">Ghost blog</a> and what would be a good title of the first blog post? That's right! A post about Ghost =)</p>\n<h2 id=\"installation\">Installation</h2>\n<p>My server is running Ubuntu. Aside from this blog there are a number of websites hosted on it. Its all configured with Apache so I'll write a few notes on installing Ghost blog on Ubuntu and Apache using vhosts (Virtual Hosts).</p>\n<h3 id=\"apache\">Apache</h3>\n<p>I use mod_proxy to pass incoming requests to the Ghost application. I deny any request to /ghost/signup, this is to ensure that none can access the signup page. Right now, but that can change!, there can only be one user.</p>\n<pre><code>#/etc/apache2/sites-enabled/000-default\n\n&lt;VirtualHost *:80&gt;\n    ServerName ghost.bjurr.se\n    ProxyPreserveHost on\n    ProxyPass / http://localhost:2368/\n\n# Enable mod_proxy and uncomment to disable signup\n#    &lt;LocationMatch ^/ghost/signup&gt;\n#        Order Deny,Allow\n#        Deny from All\n#    &lt;/LocationMatch&gt;\n&lt;/VirtualHost&gt;\n</code></pre>\n<pre><code>sudo apachectl restart\n</code></pre>\n<h3 id=\"npmandnodejs\">NPM and NodeJS</h3>\n<p>I initially tried APT to install these packages but since those packages are to old I found another way. I used a script called <a href=\"https://gist.github.com/dwayne/2983873\">node-and-npm-in30s.sh</a>.</p>\n<h3 id=\"installingghost\">Installing Ghost</h3>\n<p>Read about it <a href=\"http://docs.ghost.org/installation/linux/\">here</a>.</p>\n<h3 id=\"makingitrunalways\">Making it run, always</h3>\n<p>There is a number of alternatives here, I went for <code>supervisor</code>.</p>\n<pre><code>sudo nano -w /etc/supervisor/conf.d/ghost.conf\n</code></pre>\n<pre><code>[program:ghost]\ncommand = /home/bjerre/local/bin/node/node /home/bjerre/sites/ghost.bjurr.se/index.js\ndirectory = /home/bjerre/sites/ghost.bjurr.se\nuser = bjerre\nautostart = true\nautorestart = true\nstdout_logfile = /var/log/supervisor/ghost.log\nstderr_logfile = /var/log/supervisor/ghost_err.log\nenvironment = NODE_ENV=&quot;production&quot;\n</code></pre>\n<pre><code>sudo supervisorctl restart all\n</code></pre>\n<h3 id=\"issues\">Issues</h3>\n<p>During setup I had some issues, perhaps my solution can help someone. I installed version 0.3.2.</p>\n<ul>\n<li>Images folder owned by root. <code>sudo chown ghost:ghost content/images</code></li>\n<li>SQLite DB owned by root. <code>sudo chown ghost:ghost content/data/ghost.db</code></li>\n<li>Node not found. Fixed by using absolute path to node in supervisor config.</li>\n<li><code>config.js</code> not being found. I solved it by downloading current version of <code>config-loader.js</code> from the GitHub repository.<br>\n<code>wget https://raw.github.com/sebgie/Ghost/6ff17c78a2cb78cf9f445c7c5c41e1350c0840d8/core/config-loader.js</code></li>\n</ul>\n<p>If you have another issue, I would suggest tailing these logs:</p>\n<ul>\n<li><code>/var/log/supervisor/*.log</code></li>\n<li><code>/var/log/apache2/error.log</code></li>\n</ul>\n</div>","amp":"2","plaintext":"I just installed Ghost blog [http://ghost.org/]  and what would be a good title\nof the first blog post? That's right! A post about Ghost =)\n\nInstallation\nMy server is running Ubuntu. Aside from this blog there are a number of websites\nhosted on it. Its all configured with Apache so I'll write a few notes on\ninstalling Ghost blog on Ubuntu and Apache using vhosts (Virtual Hosts).\n\nApache\nI use mod_proxy to pass incoming requests to the Ghost application. I deny any\nrequest to /ghost/signup, this is to ensure that none can access the signup\npage. Right now, but that can change!, there can only be one user.\n\n#/etc/apache2/sites-enabled/000-default\n\n<VirtualHost *:80>\n    ServerName ghost.bjurr.se\n    ProxyPreserveHost on\n    ProxyPass / http://localhost:2368/\n\n# Enable mod_proxy and uncomment to disable signup\n#    <LocationMatch ^/ghost/signup>\n#        Order Deny,Allow\n#        Deny from All\n#    </LocationMatch>\n</VirtualHost>\n\n\nsudo apachectl restart\n\n\nNPM and NodeJS\nI initially tried APT to install these packages but since those packages are to\nold I found another way. I used a script called node-and-npm-in30s.sh\n[https://gist.github.com/dwayne/2983873].\n\nInstalling Ghost\nRead about it here [http://docs.ghost.org/installation/linux/].\n\nMaking it run, always\nThere is a number of alternatives here, I went for supervisor.\n\nsudo nano -w /etc/supervisor/conf.d/ghost.conf\n\n\n[program:ghost]\ncommand = /home/bjerre/local/bin/node/node /home/bjerre/sites/ghost.bjurr.se/index.js\ndirectory = /home/bjerre/sites/ghost.bjurr.se\nuser = bjerre\nautostart = true\nautorestart = true\nstdout_logfile = /var/log/supervisor/ghost.log\nstderr_logfile = /var/log/supervisor/ghost_err.log\nenvironment = NODE_ENV=\"production\"\n\n\nsudo supervisorctl restart all\n\n\nIssues\nDuring setup I had some issues, perhaps my solution can help someone. I\ninstalled version 0.3.2.\n\n * Images folder owned by root. sudo chown ghost:ghost content/images\n * SQLite DB owned by root. sudo chown ghost:ghost content/data/ghost.db\n * Node not found. Fixed by using absolute path to node in supervisor config.\n * config.js  not being found. I solved it by downloading current version of \n   config-loader.js  from the GitHub repository.\n   wget\n   https://raw.github.com/sebgie/Ghost/6ff17c78a2cb78cf9f445c7c5c41e1350c0840d8/core/config-loader.js\n\nIf you have another issue, I would suggest tailing these logs:\n\n * /var/log/supervisor/*.log\n * /var/log/apache2/error.log","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-18T17:06:59.000Z","created_by":"2","updated_at":"2014-10-04T14:03:14.000Z","updated_by":"1","published_at":"2013-10-20T10:00:00.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918690","uuid":"5eb5f14b-c8bc-4a48-a5bf-f7ed3faecb4a","title":"Sveriges postorter, postnummer, kommuner och län i SQL, CSV och XLS","slug":"sveriges-postorter-postnummer-kommuner-och-lan-i-sql-csv-och-xls","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Jag behövde nyligen använda någon lämplig geografisk indelning av Sverige. Detta är inget ovanligt problem, speciellt får webbutvecklare, och eftersom jag inte kunde hitta någon snabb läsning skriver jag vad jag kom fram till.\\n\\nGivet en postkod kan du få postort, och tvärtom, men inte kommun eller län. Givet kommun kan du få län. Jag beskriver här hur jag tagit fram denna data och tillhandahåller den också för nerladdning.\\nPostnummer och postorter\\n\\nJag har hittat en funktion på Posten.se där jag har kunnat brute forca fram postnummer och postorter. \\n\\n**Edit:** Hade tidigare ett script här. Men eftersom den här blog-posten är några år gammal tar jag bort det. Det som fortfarande är intressan är egentligen databasen, som finns nedan.\\n\\n##Resultat\\n\\nResultatet finns att ladda ner <a href=\\\"http://files.bjurr.se/swe_geography.zip\\\">här</a>. Zip-filen innehåller:\\n\\n* lan-kommun.csv\\n* lan-kommun.xls\\n* lan-kommun.sql\\n* postkod-postort.xls\\n* postkod-postort.csv\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Jag behövde nyligen använda någon lämplig geografisk indelning av Sverige. Detta är inget ovanligt problem, speciellt får webbutvecklare, och eftersom jag inte kunde hitta någon snabb läsning skriver jag vad jag kom fram till.</p>\n<p>Givet en postkod kan du få postort, och tvärtom, men inte kommun eller län. Givet kommun kan du få län. Jag beskriver här hur jag tagit fram denna data och tillhandahåller den också för nerladdning.<br>\nPostnummer och postorter</p>\n<p>Jag har hittat en funktion på <a href=\"http://Posten.se\">Posten.se</a> där jag har kunnat brute forca fram postnummer och postorter.</p>\n<p><strong>Edit:</strong> Hade tidigare ett script här. Men eftersom den här blog-posten är några år gammal tar jag bort det. Det som fortfarande är intressan är egentligen databasen, som finns nedan.</p>\n<h2 id=\"resultat\">Resultat</h2>\n<p>Resultatet finns att ladda ner <a href=\"http://files.bjurr.se/swe_geography.zip\">här</a>. Zip-filen innehåller:</p>\n<ul>\n<li>lan-kommun.csv</li>\n<li>lan-kommun.xls</li>\n<li>lan-kommun.sql</li>\n<li>postkod-postort.xls</li>\n<li>postkod-postort.csv</li>\n</ul>\n</div>","amp":"3","plaintext":"Jag behövde nyligen använda någon lämplig geografisk indelning av Sverige. Detta\när inget ovanligt problem, speciellt får webbutvecklare, och eftersom jag inte\nkunde hitta någon snabb läsning skriver jag vad jag kom fram till.\n\nGivet en postkod kan du få postort, och tvärtom, men inte kommun eller län.\nGivet kommun kan du få län. Jag beskriver här hur jag tagit fram denna data och\ntillhandahåller den också för nerladdning.\nPostnummer och postorter\n\nJag har hittat en funktion på Posten.se [http://Posten.se]  där jag har kunnat\nbrute forca fram postnummer och postorter.\n\nEdit:  Hade tidigare ett script här. Men eftersom den här blog-posten är några\når gammal tar jag bort det. Det som fortfarande är intressan är egentligen\ndatabasen, som finns nedan.\n\nResultat\nResultatet finns att ladda ner här [http://files.bjurr.se/swe_geography.zip].\nZip-filen innehåller:\n\n * lan-kommun.csv\n * lan-kommun.xls\n * lan-kommun.sql\n * postkod-postort.xls\n * postkod-postort.csv","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T08:29:26.000Z","created_by":"2","updated_at":"2014-10-04T14:07:12.000Z","updated_by":"1","published_at":"2013-10-19T08:29:26.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918691","uuid":"4bb3322c-a0bc-49e6-8de8-be7fd5381a6f","title":"Grails, Tomcat6, Apache2 Caching","slug":"grails-tomcat6-apache2-caching","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've been struggling a while with getting caching to work. I'm using Tomcat6 and Apache2 and running an application built with Grails.\\n\\n##Apache2 Modules\\n\\nI am using 2 modules. I initially tried mem_cache but is now using disk_cache because it is said to be of higher quality.\\n```\\nsudo a2enmod expires\\nsudo a2enmod disk_cache\\n```\\n##Configuring mods\\n\\ndisk_cache config (disk_cache.conf).\\n```\\n<IfModule mod_disk_cache.c>\\nCacheRoot /var/cache/apache2/mod_disk_cache\\nCacheEnable disk /\\nCacheDirLevels 5\\nCacheDirLength 3\\n</IfModule>\\n```\\nThe virtual host looks like this.\\n```\\n<VirtualHost *:80>\\nServerName htmlunitgenerator.bjurr.se\\nServerAlias www.htmlunitgenerator.bjurr.se\\nProxyPass / http://htmlunitgenerator.bjurr.se:8080/\\nProxyPassReverse / http://htmlunitgenerator.bjurr.se:8080/\\nCustomLog /var/log/apache2/htmlunitgenerator.bjurr.se.access.log combined\\n\\n#Cache config\\n\\nCacheStorePrivate On #Cache even if browser indicates it is a private site\\nCacheIgnoreCacheControl On\\nExpiresActive On\\nExpiresByType text/html \\\"access plus 6 hours\\\"\\nExpiresByType text/txt \\\"access plus 6 hours\\\"\\n</VirtualHost>\\n```\\n##What to cache\\n\\nOnly GET-requests are cached! So in Grails you need to do method=\\\"GET\\\" like this:\\n```\\n<g:remoteLink action=\\\"show\\\" id=\\\"1\\\" method=\\\"get\\\">Test 1</g:remoteLink>\\n```\\nIf you want to cache other content types, here are some you may want to use:\\n```\\nExpiresByType text/css \\\"access plus 6 hours\\\"\\nExpiresByType application/x-javascript \\\"access plus 6 hours\\\"\\nExpiresByType application/javascript \\\"access plus 6 hours\\\"\\nExpiresByType text/javascript \\\"access plus 6 hours\\\"\\nExpiresByType text/html \\\"access plus 6 hours\\\"\\nExpiresByType text/plain \\\"access plus 6 hours\\\"\\nExpiresByType text/xsd \\\"access plus 6 hours\\\"\\nExpiresByType text/xsl \\\"access plus 6 hours\\\"\\nExpiresByType text/xml \\\"access plus 6 hours\\\"\\nExpiresByType application/java \\\"access plus 6 hours\\\"\\nExpiresByType image/gif \\\"access plus 6 hours\\\"\\nExpiresByType application/x-gzip \\\"access plus 6 hours\\\"\\nExpiresByType image/x-icon \\\"access plus 6 hours\\\"\\nExpiresByType image/jpeg \\\"access plus 6 hours\\\"\\nExpiresByType application/pdf \\\"access plus 6 hours\\\"\\nExpiresByType image/png \\\"access plus 6 hours\\\"\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I've been struggling a while with getting caching to work. I'm using Tomcat6 and Apache2 and running an application built with Grails.</p>\n<h2 id=\"apache2modules\">Apache2 Modules</h2>\n<p>I am using 2 modules. I initially tried mem_cache but is now using disk_cache because it is said to be of higher quality.</p>\n<pre><code>sudo a2enmod expires\nsudo a2enmod disk_cache\n</code></pre>\n<h2 id=\"configuringmods\">Configuring mods</h2>\n<p>disk_cache config (disk_cache.conf).</p>\n<pre><code>&lt;IfModule mod_disk_cache.c&gt;\nCacheRoot /var/cache/apache2/mod_disk_cache\nCacheEnable disk /\nCacheDirLevels 5\nCacheDirLength 3\n&lt;/IfModule&gt;\n</code></pre>\n<p>The virtual host looks like this.</p>\n<pre><code>&lt;VirtualHost *:80&gt;\nServerName htmlunitgenerator.bjurr.se\nServerAlias www.htmlunitgenerator.bjurr.se\nProxyPass / http://htmlunitgenerator.bjurr.se:8080/\nProxyPassReverse / http://htmlunitgenerator.bjurr.se:8080/\nCustomLog /var/log/apache2/htmlunitgenerator.bjurr.se.access.log combined\n\n#Cache config\n\nCacheStorePrivate On #Cache even if browser indicates it is a private site\nCacheIgnoreCacheControl On\nExpiresActive On\nExpiresByType text/html &quot;access plus 6 hours&quot;\nExpiresByType text/txt &quot;access plus 6 hours&quot;\n&lt;/VirtualHost&gt;\n</code></pre>\n<h2 id=\"whattocache\">What to cache</h2>\n<p>Only GET-requests are cached! So in Grails you need to do method=&quot;GET&quot; like this:</p>\n<pre><code>&lt;g:remoteLink action=&quot;show&quot; id=&quot;1&quot; method=&quot;get&quot;&gt;Test 1&lt;/g:remoteLink&gt;\n</code></pre>\n<p>If you want to cache other content types, here are some you may want to use:</p>\n<pre><code>ExpiresByType text/css &quot;access plus 6 hours&quot;\nExpiresByType application/x-javascript &quot;access plus 6 hours&quot;\nExpiresByType application/javascript &quot;access plus 6 hours&quot;\nExpiresByType text/javascript &quot;access plus 6 hours&quot;\nExpiresByType text/html &quot;access plus 6 hours&quot;\nExpiresByType text/plain &quot;access plus 6 hours&quot;\nExpiresByType text/xsd &quot;access plus 6 hours&quot;\nExpiresByType text/xsl &quot;access plus 6 hours&quot;\nExpiresByType text/xml &quot;access plus 6 hours&quot;\nExpiresByType application/java &quot;access plus 6 hours&quot;\nExpiresByType image/gif &quot;access plus 6 hours&quot;\nExpiresByType application/x-gzip &quot;access plus 6 hours&quot;\nExpiresByType image/x-icon &quot;access plus 6 hours&quot;\nExpiresByType image/jpeg &quot;access plus 6 hours&quot;\nExpiresByType application/pdf &quot;access plus 6 hours&quot;\nExpiresByType image/png &quot;access plus 6 hours&quot;\n</code></pre>\n</div>","amp":"4","plaintext":"I've been struggling a while with getting caching to work. I'm using Tomcat6 and\nApache2 and running an application built with Grails.\n\nApache2 Modules\nI am using 2 modules. I initially tried mem_cache but is now using disk_cache\nbecause it is said to be of higher quality.\n\nsudo a2enmod expires\nsudo a2enmod disk_cache\n\n\nConfiguring mods\ndisk_cache config (disk_cache.conf).\n\n<IfModule mod_disk_cache.c>\nCacheRoot /var/cache/apache2/mod_disk_cache\nCacheEnable disk /\nCacheDirLevels 5\nCacheDirLength 3\n</IfModule>\n\n\nThe virtual host looks like this.\n\n<VirtualHost *:80>\nServerName htmlunitgenerator.bjurr.se\nServerAlias www.htmlunitgenerator.bjurr.se\nProxyPass / http://htmlunitgenerator.bjurr.se:8080/\nProxyPassReverse / http://htmlunitgenerator.bjurr.se:8080/\nCustomLog /var/log/apache2/htmlunitgenerator.bjurr.se.access.log combined\n\n#Cache config\n\nCacheStorePrivate On #Cache even if browser indicates it is a private site\nCacheIgnoreCacheControl On\nExpiresActive On\nExpiresByType text/html \"access plus 6 hours\"\nExpiresByType text/txt \"access plus 6 hours\"\n</VirtualHost>\n\n\nWhat to cache\nOnly GET-requests are cached! So in Grails you need to do method=\"GET\" like\nthis:\n\n<g:remoteLink action=\"show\" id=\"1\" method=\"get\">Test 1</g:remoteLink>\n\n\nIf you want to cache other content types, here are some you may want to use:\n\nExpiresByType text/css \"access plus 6 hours\"\nExpiresByType application/x-javascript \"access plus 6 hours\"\nExpiresByType application/javascript \"access plus 6 hours\"\nExpiresByType text/javascript \"access plus 6 hours\"\nExpiresByType text/html \"access plus 6 hours\"\nExpiresByType text/plain \"access plus 6 hours\"\nExpiresByType text/xsd \"access plus 6 hours\"\nExpiresByType text/xsl \"access plus 6 hours\"\nExpiresByType text/xml \"access plus 6 hours\"\nExpiresByType application/java \"access plus 6 hours\"\nExpiresByType image/gif \"access plus 6 hours\"\nExpiresByType application/x-gzip \"access plus 6 hours\"\nExpiresByType image/x-icon \"access plus 6 hours\"\nExpiresByType image/jpeg \"access plus 6 hours\"\nExpiresByType application/pdf \"access plus 6 hours\"\nExpiresByType image/png \"access plus 6 hours\"","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T08:59:38.000Z","created_by":"2","updated_at":"2014-10-04T14:06:55.000Z","updated_by":"1","published_at":"2013-10-19T08:59:38.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918692","uuid":"cf6d402a-0dbb-4872-a1f2-6f7d2d1571dc","title":"JDBC problem: ResultSet.getString returns nothing","slug":"jdbc-problem-resultset-getstring-returns-nothing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently did some database development in Java using Eclipse with JDBC and MySQL. I came across something very weird that I would like to share.\\n\\nAt first I thought the getString method of my ResultSet instance returned empty Strings but as I started analyzing the returned content I found out that it was actually null bytes. Exactly as many as the length of the expected string.\\n\\nAs always I Googled the phenomena and found people with similar problem, but no solution. I found that this is actually an Eclipse thing and when I tried to run my code outside Eclipse it worked perfectly.\\n\\nI finally came up with a solution, a replacement for getString that uses getAsciiStream insted.\\n```\\npublic String getString(ResultSet result, String column) {\\nString str = new String();\\ntry {\\nInputStreamReader in = new InputStreamReader(result\\n.getAsciiStream(column));\\nwhile (in.ready())\\nstr = str + (char) in.read();\\n} catch (SQLException e) {\\ne.printStackTrace();\\n} catch (IOException e) {\\ne.printStackTrace();\\n} finally {\\nreturn str;\\n}\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently did some database development in Java using Eclipse with JDBC and MySQL. I came across something very weird that I would like to share.</p>\n<p>At first I thought the getString method of my ResultSet instance returned empty Strings but as I started analyzing the returned content I found out that it was actually null bytes. Exactly as many as the length of the expected string.</p>\n<p>As always I Googled the phenomena and found people with similar problem, but no solution. I found that this is actually an Eclipse thing and when I tried to run my code outside Eclipse it worked perfectly.</p>\n<p>I finally came up with a solution, a replacement for getString that uses getAsciiStream insted.</p>\n<pre><code>public String getString(ResultSet result, String column) {\nString str = new String();\ntry {\nInputStreamReader in = new InputStreamReader(result\n.getAsciiStream(column));\nwhile (in.ready())\nstr = str + (char) in.read();\n} catch (SQLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nreturn str;\n}\n}\n</code></pre>\n</div>","amp":"5","plaintext":"I recently did some database development in Java using Eclipse with JDBC and\nMySQL. I came across something very weird that I would like to share.\n\nAt first I thought the getString method of my ResultSet instance returned empty\nStrings but as I started analyzing the returned content I found out that it was\nactually null bytes. Exactly as many as the length of the expected string.\n\nAs always I Googled the phenomena and found people with similar problem, but no\nsolution. I found that this is actually an Eclipse thing and when I tried to run\nmy code outside Eclipse it worked perfectly.\n\nI finally came up with a solution, a replacement for getString that uses\ngetAsciiStream insted.\n\npublic String getString(ResultSet result, String column) {\nString str = new String();\ntry {\nInputStreamReader in = new InputStreamReader(result\n.getAsciiStream(column));\nwhile (in.ready())\nstr = str + (char) in.read();\n} catch (SQLException e) {\ne.printStackTrace();\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\nreturn str;\n}\n}","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:00:52.000Z","created_by":"2","updated_at":"2014-10-04T14:06:25.000Z","updated_by":"1","published_at":"2013-10-19T09:00:52.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918693","uuid":"d98a892f-fb6e-4276-b733-b48b467f2ba9","title":"Runtime.exec hangs, a complete solution","slug":"runtime-exec-hangs-a-complete-solution","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"If you Google \\\"Runtime.exec hangs\\\" you will get alot of results. Executing external commands from Java seems very easy but it is actually very complicated. I was stuck at this problem for a long time before I finally got it. I never found a complete solution so I tought a post like this may boost my user count =)\\n\\nIf you execute a command using Runtime.exec on Windows and wait for it to complete, like follows, your program may hang on waitFor.\\n```\\nProcess p = Runtime.getRuntime().exec(\\\"myCommand\\\");\\np.waitFor();\\n```\\n\\nThe reason for the hanging is the communication between Java and the external operating system process. And more specifically the communication buffers. The buffers for STDERR and STDOUT has to be flushed for the program not to hang.\\n\\nFlushing these buffers are very easy, but! You can not flush them one by one, you have to do it simultaniously for the program not to hang while flushing! So you have to start at least one new thread to succeed.\\n\\nI have made a complete class that executes a command and serves the content of STDOUT and STDERR. It also provides functionality for sending data to STDIN.\\n```\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.concurrent.Semaphore;\\n\\npublic class ExecCommand {\\nprivate Semaphore outputSem;\\nprivate String output;\\nprivate Semaphore errorSem;\\nprivate String error;\\nprivate Process p;\\n\\nprivate class InputWriter extends Thread {\\nprivate String input;\\n\\npublic InputWriter(String input) {\\nthis.input = input;\\n}\\n\\npublic void run() {\\nPrintWriter pw = new PrintWriter(p.getOutputStream());\\npw.println(input);\\npw.flush();\\n}\\n}\\n\\nprivate class OutputReader extends Thread {\\npublic OutputReader() {\\ntry {\\noutputSem = new Semaphore(1);\\noutputSem.acquire();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\n}\\n\\npublic void run() {\\ntry {\\nStringBuffer readBuffer = new StringBuffer();\\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\\n.getInputStream()));\\nString buff = new String();\\nwhile ((buff = isr.readLine()) != null) {\\nreadBuffer.append(buff);\\nSystem.out.println(buff);\\n}\\noutput = readBuffer.toString();\\noutputSem.release();\\n} catch (IOException e) {\\ne.printStackTrace();\\n}\\n}\\n}\\n\\nprivate class ErrorReader extends Thread {\\npublic ErrorReader() {\\ntry {\\nerrorSem = new Semaphore(1);\\nerrorSem.acquire();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\n}\\n\\npublic void run() {\\ntry {\\nStringBuffer readBuffer = new StringBuffer();\\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\\n.getErrorStream()));\\nString buff = new String();\\nwhile ((buff = isr.readLine()) != null) {\\nreadBuffer.append(buff);\\n}\\nerror = readBuffer.toString();\\nerrorSem.release();\\n} catch (IOException e) {\\ne.printStackTrace();\\n}\\nif (error.length() > 0)\\nSystem.out.println(error);\\n}\\n}\\n\\npublic ExecCommand(String command, String input) {\\ntry {\\np = Runtime.getRuntime().exec(makeArray(command));\\nnew InputWriter(input).start();\\nnew OutputReader().start();\\nnew ErrorReader().start();\\np.waitFor();\\n} catch (IOException e) {\\ne.printStackTrace();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\n}\\n\\npublic ExecCommand(String command) {\\ntry {\\np = Runtime.getRuntime().exec(makeArray(command));\\nnew OutputReader().start();\\nnew ErrorReader().start();\\np.waitFor();\\n} catch (IOException e) {\\ne.printStackTrace();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\n}\\n\\npublic String getOutput() {\\ntry {\\noutputSem.acquire();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\nString value = output;\\noutputSem.release();\\nreturn value;\\n}\\n\\npublic String getError() {\\ntry {\\nerrorSem.acquire();\\n} catch (InterruptedException e) {\\ne.printStackTrace();\\n}\\nString value = error;\\nerrorSem.release();\\nreturn value;\\n}\\n\\nprivate String[] makeArray(String command) {\\nArrayList<String> commandArray = new ArrayList<String>();\\nString buff = \\\"\\\";\\nboolean lookForEnd = false;\\nfor (int i = 0; i < command.length(); i++) {\\nif (lookForEnd) {\\nif (command.charAt(i) == '\\\\\\\"') {\\nif (buff.length() > 0)\\ncommandArray.add(buff);\\nbuff = \\\"\\\";\\nlookForEnd = false;\\n} else {\\nbuff += command.charAt(i);\\n}\\n} else {\\nif (command.charAt(i) == '\\\\\\\"') {\\nlookForEnd = true;\\n} else if (command.charAt(i) == ' ') {\\nif (buff.length() > 0)\\ncommandArray.add(buff);\\nbuff = \\\"\\\";\\n} else {\\nbuff += command.charAt(i);\\n}\\n}\\n}\\nif (buff.length() > 0)\\ncommandArray.add(buff);\\n\\nString[] array = new String[commandArray.size()];\\nfor (int i = 0; i < commandArray.size(); i++) {\\narray[i] = commandArray.get(i);\\n}\\n\\nreturn array;\\n}\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>If you Google &quot;Runtime.exec hangs&quot; you will get alot of results. Executing external commands from Java seems very easy but it is actually very complicated. I was stuck at this problem for a long time before I finally got it. I never found a complete solution so I tought a post like this may boost my user count =)</p>\n<p>If you execute a command using Runtime.exec on Windows and wait for it to complete, like follows, your program may hang on waitFor.</p>\n<pre><code>Process p = Runtime.getRuntime().exec(&quot;myCommand&quot;);\np.waitFor();\n</code></pre>\n<p>The reason for the hanging is the communication between Java and the external operating system process. And more specifically the communication buffers. The buffers for STDERR and STDOUT has to be flushed for the program not to hang.</p>\n<p>Flushing these buffers are very easy, but! You can not flush them one by one, you have to do it simultaniously for the program not to hang while flushing! So you have to start at least one new thread to succeed.</p>\n<p>I have made a complete class that executes a command and serves the content of STDOUT and STDERR. It also provides functionality for sending data to STDIN.</p>\n<pre><code>import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.concurrent.Semaphore;\n\npublic class ExecCommand {\nprivate Semaphore outputSem;\nprivate String output;\nprivate Semaphore errorSem;\nprivate String error;\nprivate Process p;\n\nprivate class InputWriter extends Thread {\nprivate String input;\n\npublic InputWriter(String input) {\nthis.input = input;\n}\n\npublic void run() {\nPrintWriter pw = new PrintWriter(p.getOutputStream());\npw.println(input);\npw.flush();\n}\n}\n\nprivate class OutputReader extends Thread {\npublic OutputReader() {\ntry {\noutputSem = new Semaphore(1);\noutputSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic void run() {\ntry {\nStringBuffer readBuffer = new StringBuffer();\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\n.getInputStream()));\nString buff = new String();\nwhile ((buff = isr.readLine()) != null) {\nreadBuffer.append(buff);\nSystem.out.println(buff);\n}\noutput = readBuffer.toString();\noutputSem.release();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n\nprivate class ErrorReader extends Thread {\npublic ErrorReader() {\ntry {\nerrorSem = new Semaphore(1);\nerrorSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic void run() {\ntry {\nStringBuffer readBuffer = new StringBuffer();\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\n.getErrorStream()));\nString buff = new String();\nwhile ((buff = isr.readLine()) != null) {\nreadBuffer.append(buff);\n}\nerror = readBuffer.toString();\nerrorSem.release();\n} catch (IOException e) {\ne.printStackTrace();\n}\nif (error.length() &gt; 0)\nSystem.out.println(error);\n}\n}\n\npublic ExecCommand(String command, String input) {\ntry {\np = Runtime.getRuntime().exec(makeArray(command));\nnew InputWriter(input).start();\nnew OutputReader().start();\nnew ErrorReader().start();\np.waitFor();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic ExecCommand(String command) {\ntry {\np = Runtime.getRuntime().exec(makeArray(command));\nnew OutputReader().start();\nnew ErrorReader().start();\np.waitFor();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic String getOutput() {\ntry {\noutputSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nString value = output;\noutputSem.release();\nreturn value;\n}\n\npublic String getError() {\ntry {\nerrorSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nString value = error;\nerrorSem.release();\nreturn value;\n}\n\nprivate String[] makeArray(String command) {\nArrayList&lt;String&gt; commandArray = new ArrayList&lt;String&gt;();\nString buff = &quot;&quot;;\nboolean lookForEnd = false;\nfor (int i = 0; i &lt; command.length(); i++) {\nif (lookForEnd) {\nif (command.charAt(i) == '\\&quot;') {\nif (buff.length() &gt; 0)\ncommandArray.add(buff);\nbuff = &quot;&quot;;\nlookForEnd = false;\n} else {\nbuff += command.charAt(i);\n}\n} else {\nif (command.charAt(i) == '\\&quot;') {\nlookForEnd = true;\n} else if (command.charAt(i) == ' ') {\nif (buff.length() &gt; 0)\ncommandArray.add(buff);\nbuff = &quot;&quot;;\n} else {\nbuff += command.charAt(i);\n}\n}\n}\nif (buff.length() &gt; 0)\ncommandArray.add(buff);\n\nString[] array = new String[commandArray.size()];\nfor (int i = 0; i &lt; commandArray.size(); i++) {\narray[i] = commandArray.get(i);\n}\n\nreturn array;\n}\n}\n</code></pre>\n</div>","amp":"6","plaintext":"If you Google \"Runtime.exec hangs\" you will get alot of results. Executing\nexternal commands from Java seems very easy but it is actually very complicated.\nI was stuck at this problem for a long time before I finally got it. I never\nfound a complete solution so I tought a post like this may boost my user count\n=)\n\nIf you execute a command using Runtime.exec on Windows and wait for it to\ncomplete, like follows, your program may hang on waitFor.\n\nProcess p = Runtime.getRuntime().exec(\"myCommand\");\np.waitFor();\n\n\nThe reason for the hanging is the communication between Java and the external\noperating system process. And more specifically the communication buffers. The\nbuffers for STDERR and STDOUT has to be flushed for the program not to hang.\n\nFlushing these buffers are very easy, but! You can not flush them one by one,\nyou have to do it simultaniously for the program not to hang while flushing! So\nyou have to start at least one new thread to succeed.\n\nI have made a complete class that executes a command and serves the content of\nSTDOUT and STDERR. It also provides functionality for sending data to STDIN.\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.concurrent.Semaphore;\n\npublic class ExecCommand {\nprivate Semaphore outputSem;\nprivate String output;\nprivate Semaphore errorSem;\nprivate String error;\nprivate Process p;\n\nprivate class InputWriter extends Thread {\nprivate String input;\n\npublic InputWriter(String input) {\nthis.input = input;\n}\n\npublic void run() {\nPrintWriter pw = new PrintWriter(p.getOutputStream());\npw.println(input);\npw.flush();\n}\n}\n\nprivate class OutputReader extends Thread {\npublic OutputReader() {\ntry {\noutputSem = new Semaphore(1);\noutputSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic void run() {\ntry {\nStringBuffer readBuffer = new StringBuffer();\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\n.getInputStream()));\nString buff = new String();\nwhile ((buff = isr.readLine()) != null) {\nreadBuffer.append(buff);\nSystem.out.println(buff);\n}\noutput = readBuffer.toString();\noutputSem.release();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n}\n\nprivate class ErrorReader extends Thread {\npublic ErrorReader() {\ntry {\nerrorSem = new Semaphore(1);\nerrorSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic void run() {\ntry {\nStringBuffer readBuffer = new StringBuffer();\nBufferedReader isr = new BufferedReader(new InputStreamReader(p\n.getErrorStream()));\nString buff = new String();\nwhile ((buff = isr.readLine()) != null) {\nreadBuffer.append(buff);\n}\nerror = readBuffer.toString();\nerrorSem.release();\n} catch (IOException e) {\ne.printStackTrace();\n}\nif (error.length() > 0)\nSystem.out.println(error);\n}\n}\n\npublic ExecCommand(String command, String input) {\ntry {\np = Runtime.getRuntime().exec(makeArray(command));\nnew InputWriter(input).start();\nnew OutputReader().start();\nnew ErrorReader().start();\np.waitFor();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic ExecCommand(String command) {\ntry {\np = Runtime.getRuntime().exec(makeArray(command));\nnew OutputReader().start();\nnew ErrorReader().start();\np.waitFor();\n} catch (IOException e) {\ne.printStackTrace();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\npublic String getOutput() {\ntry {\noutputSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nString value = output;\noutputSem.release();\nreturn value;\n}\n\npublic String getError() {\ntry {\nerrorSem.acquire();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nString value = error;\nerrorSem.release();\nreturn value;\n}\n\nprivate String[] makeArray(String command) {\nArrayList<String> commandArray = new ArrayList<String>();\nString buff = \"\";\nboolean lookForEnd = false;\nfor (int i = 0; i < command.length(); i++) {\nif (lookForEnd) {\nif (command.charAt(i) == '\\\"') {\nif (buff.length() > 0)\ncommandArray.add(buff);\nbuff = \"\";\nlookForEnd = false;\n} else {\nbuff += command.charAt(i);\n}\n} else {\nif (command.charAt(i) == '\\\"') {\nlookForEnd = true;\n} else if (command.charAt(i) == ' ') {\nif (buff.length() > 0)\ncommandArray.add(buff);\nbuff = \"\";\n} else {\nbuff += command.charAt(i);\n}\n}\n}\nif (buff.length() > 0)\ncommandArray.add(buff);\n\nString[] array = new String[commandArray.size()];\nfor (int i = 0; i < commandArray.size(); i++) {\narray[i] = commandArray.get(i);\n}\n\nreturn array;\n}\n}","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:02:28.000Z","created_by":"2","updated_at":"2014-10-04T14:06:09.000Z","updated_by":"1","published_at":"2013-10-19T09:02:28.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918694","uuid":"46517bb8-933d-4c44-a99d-0dfe8081301a","title":"Introducing HTMLUnitGenerator","slug":"introducing-htmlunitgenerator","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I strongly support software testing. If you don't produce test cases that cover the requirements you implement, then you are not developing anything. It is impossible to reach sustainability, produce new functionality fast and with high quality or even cooperate with other developers, unless you work with automated test cases!\\n\\nBeing a web developer I've been faced with problem of testing front end of web applications. When it comes to GUI and making sure its look and feel is as it should, the testing is done by a human resource. But when it comes to making sure flows can be executed without JavaScripts, CSS or backend crashes, or just making sure a text actually appears on a webpage, I want automated testing.\\nHTMLUnit\\n\\nHTMLUnit is a really nice tool. It is a head less web browser. This is perfect for creating test cases that clicks on different elements and does asserts on, for example, different attributes and values.\\n\\nThe problem is, we don't want to write those test cases in Java. Java is a general purpose programming language. The test cases will get messy and hard to read. They don't have to but the chances are they will.\\n\\nAnother problem is documentation of test cases. If we write test cases in Java we need to document them to make sure what flows are covered. This is extra important with front end testing, since these test can be very time consuming when testing a large web site.\\nHTMLUnitGenrerator\\n\\nI created an open source project to deal with these problems. I have created a domain specific language, DSL. You may say the test cases are automatically generated from the documentation, since the DSL is so easy to read and understand, it could just as well be documentation to a test case written in Java.\\n\\nHere is a sneak peak, check out GitHub for more examples.\\n```\\nSee testcases/BBBSeePaths.flow\\nSee testcases/BBBSeeUrls.flow\\nGo to baspaket and wait 2 seconds\\nFind a with attribute href set to /servlet/orderflow/search/search-flow?Id=tcm:142-23371 in campaignmodule\\nClick on campaignModuleChoose and wait 10 seconds\\nFind input with attribute id set to _eventId_search in searchpopup\\nFill in locationForm with _eventId as search and phoneNumber.fullNumber as 0768966787\\nClick on _eventId_search and wait 10 seconds\\nFind input with attribute id set to _eventId_search in searchpopup\\nFill in locationForm with address.floor as 3\\nClick on _eventId_search and wait 10 seconds\\nFind a with attribute href set to /orderflow/index.html?Id=tcm:142-23381&fromSearch&page=new in searchpopup\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I strongly support software testing. If you don't produce test cases that cover the requirements you implement, then you are not developing anything. It is impossible to reach sustainability, produce new functionality fast and with high quality or even cooperate with other developers, unless you work with automated test cases!</p>\n<p>Being a web developer I've been faced with problem of testing front end of web applications. When it comes to GUI and making sure its look and feel is as it should, the testing is done by a human resource. But when it comes to making sure flows can be executed without JavaScripts, CSS or backend crashes, or just making sure a text actually appears on a webpage, I want automated testing.<br>\nHTMLUnit</p>\n<p>HTMLUnit is a really nice tool. It is a head less web browser. This is perfect for creating test cases that clicks on different elements and does asserts on, for example, different attributes and values.</p>\n<p>The problem is, we don't want to write those test cases in Java. Java is a general purpose programming language. The test cases will get messy and hard to read. They don't have to but the chances are they will.</p>\n<p>Another problem is documentation of test cases. If we write test cases in Java we need to document them to make sure what flows are covered. This is extra important with front end testing, since these test can be very time consuming when testing a large web site.<br>\nHTMLUnitGenrerator</p>\n<p>I created an open source project to deal with these problems. I have created a domain specific language, DSL. You may say the test cases are automatically generated from the documentation, since the DSL is so easy to read and understand, it could just as well be documentation to a test case written in Java.</p>\n<p>Here is a sneak peak, check out GitHub for more examples.</p>\n<pre><code>See testcases/BBBSeePaths.flow\nSee testcases/BBBSeeUrls.flow\nGo to baspaket and wait 2 seconds\nFind a with attribute href set to /servlet/orderflow/search/search-flow?Id=tcm:142-23371 in campaignmodule\nClick on campaignModuleChoose and wait 10 seconds\nFind input with attribute id set to _eventId_search in searchpopup\nFill in locationForm with _eventId as search and phoneNumber.fullNumber as 0768966787\nClick on _eventId_search and wait 10 seconds\nFind input with attribute id set to _eventId_search in searchpopup\nFill in locationForm with address.floor as 3\nClick on _eventId_search and wait 10 seconds\nFind a with attribute href set to /orderflow/index.html?Id=tcm:142-23381&amp;fromSearch&amp;page=new in searchpopup\n</code></pre>\n</div>","amp":"7","plaintext":"I strongly support software testing. If you don't produce test cases that cover\nthe requirements you implement, then you are not developing anything. It is\nimpossible to reach sustainability, produce new functionality fast and with high\nquality or even cooperate with other developers, unless you work with automated\ntest cases!\n\nBeing a web developer I've been faced with problem of testing front end of web\napplications. When it comes to GUI and making sure its look and feel is as it\nshould, the testing is done by a human resource. But when it comes to making\nsure flows can be executed without JavaScripts, CSS or backend crashes, or just\nmaking sure a text actually appears on a webpage, I want automated testing.\nHTMLUnit\n\nHTMLUnit is a really nice tool. It is a head less web browser. This is perfect\nfor creating test cases that clicks on different elements and does asserts on,\nfor example, different attributes and values.\n\nThe problem is, we don't want to write those test cases in Java. Java is a\ngeneral purpose programming language. The test cases will get messy and hard to\nread. They don't have to but the chances are they will.\n\nAnother problem is documentation of test cases. If we write test cases in Java\nwe need to document them to make sure what flows are covered. This is extra\nimportant with front end testing, since these test can be very time consuming\nwhen testing a large web site.\nHTMLUnitGenrerator\n\nI created an open source project to deal with these problems. I have created a\ndomain specific language, DSL. You may say the test cases are automatically\ngenerated from the documentation, since the DSL is so easy to read and\nunderstand, it could just as well be documentation to a test case written in\nJava.\n\nHere is a sneak peak, check out GitHub for more examples.\n\nSee testcases/BBBSeePaths.flow\nSee testcases/BBBSeeUrls.flow\nGo to baspaket and wait 2 seconds\nFind a with attribute href set to /servlet/orderflow/search/search-flow?Id=tcm:142-23371 in campaignmodule\nClick on campaignModuleChoose and wait 10 seconds\nFind input with attribute id set to _eventId_search in searchpopup\nFill in locationForm with _eventId as search and phoneNumber.fullNumber as 0768966787\nClick on _eventId_search and wait 10 seconds\nFind input with attribute id set to _eventId_search in searchpopup\nFill in locationForm with address.floor as 3\nClick on _eventId_search and wait 10 seconds\nFind a with attribute href set to /orderflow/index.html?Id=tcm:142-23381&fromSearch&page=new in searchpopup","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:03:22.000Z","created_by":"2","updated_at":"2014-10-04T14:05:47.000Z","updated_by":"1","published_at":"2013-10-19T09:03:22.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918695","uuid":"f4ee9750-6564-4303-8a77-8e2f4488de85","title":"Introducing ByggarMonster","slug":"introducing-byggarmonster","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"It is often considered good coding practice to create and use pure immutable data objects. That means all members has to be set in the constructor. This often results in code like this.\\n```\\nData data = new Data(\\\"s1\\\",\\\"s2\\\");\\n```\\n\\nIt is not easy to read such code since you don't immediately see which string corresponds to which attribute. If you create the class via a builder it can look like this.\\n```\\nData data = new DataBuilder()\\n .withFile(\\\"s1\\\")\\n .withCharset(\\\"s2\\\")\\n .build();\\n```\\nSometimes you need an object that is a copy of another object, but with a small adjustment. Like this.\\n```\\nData data = new Data(\\\"s3\\\",otherData.getS2());\\n```\\nThe more parameters, the harder it gets to read. Also if the object is not immutable you may have code like this.\\n```\\nString oldS2 = data.getS2();\\ndata.setS2(\\\"newValue\\\");\\nsomeFunction(data);\\ndata.setS2(oldS2);\\n```\\nThis code is hard to read and is likely to contain mistakes. A builder can solve this by providing a \\\"from\\\" method, like this.\\n```\\nsomeFunction(\\n new DataBuilder()\\n  .from(data)\\n  .withS2(\\\"newValue\\\")\\n  .build()\\n);\\n```\\n##ByggarMonster\\n\\nByggarMonster translates to BuilderPattern and it will create builders from your existing data classes without any modification of them. As long as your data classes are pure data holders ByggarMonster will give you a nice builder for it.\\n\\nHere is a sneak peak, check out GitHub for more examples. Or try the online builder at http://byggarmonster.bjurr.se.\\n```\\npackage se.byggarmonster.sandbox;\\npublic class Example {\\n private final String member1;\\n\\n public TwoFinalAttributesSrc(final String member1) {\\n  this.member1= member1;\\n }\\n\\n public String getMember1() {\\n  return member1;\\n }\\n}\\n```\\n\\n```\\npackage se.byggarmonster.sandbox;\\n\\npublic class ExampleBuilder {\\n private String member1;\\n\\n public Example build() {\\n  Example instance = new Example(member1);\\n  return instance;\\n }\\n\\n public ExampleBuilder from(final Example from) {\\n  ExampleBuilder instance = new ExampleBuilder();\\n  instance.member1 = from.getMember1();\\n  return instance;\\n }\\n\\n public ExampleBuilder withMember1(final String member1) {\\n  this.member1 = member1;\\n  return this;\\n }\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>It is often considered good coding practice to create and use pure immutable data objects. That means all members has to be set in the constructor. This often results in code like this.</p>\n<pre><code>Data data = new Data(&quot;s1&quot;,&quot;s2&quot;);\n</code></pre>\n<p>It is not easy to read such code since you don't immediately see which string corresponds to which attribute. If you create the class via a builder it can look like this.</p>\n<pre><code>Data data = new DataBuilder()\n .withFile(&quot;s1&quot;)\n .withCharset(&quot;s2&quot;)\n .build();\n</code></pre>\n<p>Sometimes you need an object that is a copy of another object, but with a small adjustment. Like this.</p>\n<pre><code>Data data = new Data(&quot;s3&quot;,otherData.getS2());\n</code></pre>\n<p>The more parameters, the harder it gets to read. Also if the object is not immutable you may have code like this.</p>\n<pre><code>String oldS2 = data.getS2();\ndata.setS2(&quot;newValue&quot;);\nsomeFunction(data);\ndata.setS2(oldS2);\n</code></pre>\n<p>This code is hard to read and is likely to contain mistakes. A builder can solve this by providing a &quot;from&quot; method, like this.</p>\n<pre><code>someFunction(\n new DataBuilder()\n  .from(data)\n  .withS2(&quot;newValue&quot;)\n  .build()\n);\n</code></pre>\n<h2 id=\"byggarmonster\">ByggarMonster</h2>\n<p>ByggarMonster translates to BuilderPattern and it will create builders from your existing data classes without any modification of them. As long as your data classes are pure data holders ByggarMonster will give you a nice builder for it.</p>\n<p>Here is a sneak peak, check out GitHub for more examples. Or try the online builder at <a href=\"http://byggarmonster.bjurr.se\">http://byggarmonster.bjurr.se</a>.</p>\n<pre><code>package se.byggarmonster.sandbox;\npublic class Example {\n private final String member1;\n\n public TwoFinalAttributesSrc(final String member1) {\n  this.member1= member1;\n }\n\n public String getMember1() {\n  return member1;\n }\n}\n</code></pre>\n<pre><code>package se.byggarmonster.sandbox;\n\npublic class ExampleBuilder {\n private String member1;\n\n public Example build() {\n  Example instance = new Example(member1);\n  return instance;\n }\n\n public ExampleBuilder from(final Example from) {\n  ExampleBuilder instance = new ExampleBuilder();\n  instance.member1 = from.getMember1();\n  return instance;\n }\n\n public ExampleBuilder withMember1(final String member1) {\n  this.member1 = member1;\n  return this;\n }\n}\n</code></pre>\n</div>","amp":"8","plaintext":"It is often considered good coding practice to create and use pure immutable\ndata objects. That means all members has to be set in the constructor. This\noften results in code like this.\n\nData data = new Data(\"s1\",\"s2\");\n\n\nIt is not easy to read such code since you don't immediately see which string\ncorresponds to which attribute. If you create the class via a builder it can\nlook like this.\n\nData data = new DataBuilder()\n .withFile(\"s1\")\n .withCharset(\"s2\")\n .build();\n\n\nSometimes you need an object that is a copy of another object, but with a small\nadjustment. Like this.\n\nData data = new Data(\"s3\",otherData.getS2());\n\n\nThe more parameters, the harder it gets to read. Also if the object is not\nimmutable you may have code like this.\n\nString oldS2 = data.getS2();\ndata.setS2(\"newValue\");\nsomeFunction(data);\ndata.setS2(oldS2);\n\n\nThis code is hard to read and is likely to contain mistakes. A builder can solve\nthis by providing a \"from\" method, like this.\n\nsomeFunction(\n new DataBuilder()\n  .from(data)\n  .withS2(\"newValue\")\n  .build()\n);\n\n\nByggarMonster\nByggarMonster translates to BuilderPattern and it will create builders from your\nexisting data classes without any modification of them. As long as your data\nclasses are pure data holders ByggarMonster will give you a nice builder for it.\n\nHere is a sneak peak, check out GitHub for more examples. Or try the online\nbuilder at http://byggarmonster.bjurr.se.\n\npackage se.byggarmonster.sandbox;\npublic class Example {\n private final String member1;\n\n public TwoFinalAttributesSrc(final String member1) {\n  this.member1= member1;\n }\n\n public String getMember1() {\n  return member1;\n }\n}\n\n\npackage se.byggarmonster.sandbox;\n\npublic class ExampleBuilder {\n private String member1;\n\n public Example build() {\n  Example instance = new Example(member1);\n  return instance;\n }\n\n public ExampleBuilder from(final Example from) {\n  ExampleBuilder instance = new ExampleBuilder();\n  instance.member1 = from.getMember1();\n  return instance;\n }\n\n public ExampleBuilder withMember1(final String member1) {\n  this.member1 = member1;\n  return this;\n }\n}","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:05:45.000Z","created_by":"2","updated_at":"2014-10-04T14:05:10.000Z","updated_by":"1","published_at":"2013-10-19T09:05:48.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918696","uuid":"88f69eb1-256c-40a9-8eab-8133b22f0fa9","title":"Owncloud 5 Server with Lighttpd, Sqlite on ArchLinux","slug":"owncloud-5-server-with-lighttpd-sqlite-on-archlinux","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I just installed Owncloud Server on my Raspberry PI. It was a bit harder then I had expected so I'll summarize how I did it and the issues I had. I'm using Raspberry PI (512Mb model), ArchLinux, Lighttpd 1.4.32, SQLite 3.7.17.\\n##Lighttpd\\n\\nFirst, install it.\\n```\\npacman -S lighttpd\\n```\\n\\nThe Lighttpd config file exists in `/etc/lighttpd/lighttpd.conf`. I made alot of changes here it's probably easiest just to show the whole file.\\n```\\nserver.port = 80\\nserver.username = \\\"http\\\"\\nserver.groupname = \\\"http\\\"\\nserver.document-root = \\\"/srv/http\\\"\\nserver.errorlog = \\\"/var/log/lighttpd/error.log\\\"\\ndir-listing.activate = \\\"enable\\\"\\nindex-file.names = ( \\\"index.html\\\", \\\"index.php\\\" )\\nstatic-file.exclude-extensions = (\\\".php\\\", \\\".pl\\\", \\\".fcgi\\\")\\nmimetype.assign = ( \\\".html\\\" => \\\"text/html\\\", \\\".txt\\\" => \\\"text/plain\\\", \\\".jpg\\\" => \\\"image/jpeg\\\", \\\".png\\\" => \\\"image/png\\\", \\\"\\\" => \\\"application/octet-stream\\\" )\\n#ssl.engine = \\\"enable\\\"\\n\\nssl.pemfile = \\\"/etc/ssl/owncloud/server.pem\\\"\\n\\nserver.modules = (\\n\\\"mod_access\\\",\\n\\\"mod_fastcgi\\\",\\n\\\"mod_cgi\\\"\\n)\\n\\n$HTTP[\\\"url\\\"] =~ \\\"^/owncloud/data/\\\" {\\nurl.access-deny = (\\\"\\\")\\n}\\n$HTTP[\\\"url\\\"] =~ \\\"^/owncloud($|/)\\\" {\\ndir-listing.activate = \\\"disable\\\"\\n}\\n\\nfastcgi.server = (\\n\\\".php\\\" => ((\\n\\\"bin-path\\\" => \\\"/usr/bin/php-cgi\\\",\\n\\\"socket\\\" => \\\"/tmp/php.socket\\\",\\n\\\"max-procs\\\" => 4\\n))\\n)\\n```\\n\\nYou can test the Lighttpd configuration like this.\\n```\\nlighttpd -t -f /etc/lighttpd/lighttpd.conf\\n```\\n##PHP\\n\\nInstall like this.\\n```\\npacman -S php-cgi\\n```\\n\\nThe configuration exists in `/etc/php/php.ini`. There are a number of settings to change here. Here are the extensions I found was neccessary for Owncloud.\\n```\\nextension=curl.so\\nextension=gd.so\\nextension=iconv.so\\nextension=openssl.so\\nextension=pdo_sqlite.so\\nextension=sqlite3.so\\nextension=zip.so\\n```\\n\\nThe document root has to be set.\\n```\\ndoc_root = /srv/http\\n```\\n\\nI don't know exactly what this is, but it is needed =)\\n```\\ncgi.fix_pathinfo=1\\n```\\n##OpenSSL\\n```\\npacman -S openssl\\nmkdir /etc/ssl/owncloud\\ncd /etc/ssl/owncloud\\nopenssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes\\nchmod 0600 /etc/ssl/owncloud\\n```\\n##Install Owncloud\\n\\nInstall and link the application to make it available in webserver. I like this solution better then copying the files. Now it's easier to keep it updated with Pacman.\\n```\\npacman -S owncloud\\nln -s /usr/share/webapps/owncloud /srv/http/owncloud\\n```\\n\\nTime to start the webserver!\\n```\\nlighttpd -t -f /etc/lighttpd/lighttpd.conf #This test can save you some time!\\nsystemctl restart lighttpd.service\\n```\\n\\nNow you can surf into /owncloud and the application should be running. You will most likely get a response similar to this.\\nNo database drivers (sqlite, mysql, or postgresql) installed.\\nPHP module zip not installed.\\n\\n```\\nPlease ask your server administrator to install the module.\\nPHP module GD is not installed.\\n\\nPlease ask your server administrator to install the module.\\nPHP module iconv is not installed.\\n\\nPlease ask your server administrator to install the module.\\n```\\n\\nI installed them one by one, and then restarted Lighttpd to see that they got installed correctly. Like php-sqlite for example.\\n```\\npacman -Ss sqlite #search for sqlite\\npacman -S extra/php-sqlite #install php-sqlite\\n```\\n\\nIt may be that they are just not enabled in `php.ini` extensions section, and/or that they are not even intalled. Like I had PHP-GD installed but had missed `;extension=gd.so` in `php.ini`.\\n\\nWhen all extensions are in place, you will see two input fields where you input admin user and password. Once entered it will take a very long time to submit the form! I actually gave up and did a restart of Lighttpd. After that it loaded faster.\\nIssues\\n\\nIf you have issues, there are helpful logs.\\n```\\ntail -f /srv/http/owncloud/data/owncloud.log\\ntail -f /var/log/lighttpd/error.log\\n```\\n\\nFirst issue I had was that the first page got stuck hanging on \\\"Upgrading filesystem cache\\\". Looking at the log I found.\\n```\\n2013-07-22 18:28:35: (mod_fastcgi.c.2676) FastCGI-stderr: PHP Fatal error: Call to a member function raiseError() on a non-object in /usr/share/webapps/owncloud/lib/MDB2/Driver/sqlite3.php on line 898\\n```\\n\\nThis is very easy to solve, just uncomment \\n```\\n\\\"extension=pdo_sqlite.so\\\" in php.ini.\\nextension=pdo_sqlite.so\\n```\\n\\nSecond problem was admin got stuck. I got a tip that it could be PHP not being able to lookup `apps.owncloud.com` so I tried this.\\n```\\necho \\\"<?php echo gethostbyname('apps.owncloud.com'); ?&rt;\\\" > /srv/http/dns.php\\n```\\n\\nAnd the dns.php page also got stuck. I added the entry in `/etc/hosts` like this, not nice but it works for now.\\n```\\n188.138.118.86 apps.owncloud.com apps.owncloud.com\\n```\\n\\nHowever, the admin page was not accessble, it also hang. In the `owncloud.log` I saw.\\n```\\n{\\\"app\\\":\\\"PHP\\\",\\\"message\\\":\\\"curl_setopt_array(): CURLOPT_FOLLOWLOCATION cannot be activated when an open_basedir is set at \\\\/usr\\\\/share\\\\/webapps\\\\/owncloud\\\\/3rdparty\\\\/Sabre\\\\/DAV\\\\/Client.php#462\\\",\\\"level\\\":2,\\\"time\\\":814}\\n```\\n\\nI fixed that by commenting out open_basedir in php.ini.\\n```\\n;open_basedir = ...\\n```\\n\\nThe third thing, that definitly finally did the trick, was `max-procs` parameter in Lighttpd config. I had it set to `1` and I changed it to `4`.\\n\\nLast I recommend looking at https://forum.owncloud.org/viewtopic.php?f=8&t=10692 for performance tips.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I just installed Owncloud Server on my Raspberry PI. It was a bit harder then I had expected so I'll summarize how I did it and the issues I had. I'm using Raspberry PI (512Mb model), ArchLinux, Lighttpd 1.4.32, SQLite 3.7.17.</p>\n<h2 id=\"lighttpd\">Lighttpd</h2>\n<p>First, install it.</p>\n<pre><code>pacman -S lighttpd\n</code></pre>\n<p>The Lighttpd config file exists in <code>/etc/lighttpd/lighttpd.conf</code>. I made alot of changes here it's probably easiest just to show the whole file.</p>\n<pre><code>server.port = 80\nserver.username = &quot;http&quot;\nserver.groupname = &quot;http&quot;\nserver.document-root = &quot;/srv/http&quot;\nserver.errorlog = &quot;/var/log/lighttpd/error.log&quot;\ndir-listing.activate = &quot;enable&quot;\nindex-file.names = ( &quot;index.html&quot;, &quot;index.php&quot; )\nstatic-file.exclude-extensions = (&quot;.php&quot;, &quot;.pl&quot;, &quot;.fcgi&quot;)\nmimetype.assign = ( &quot;.html&quot; =&gt; &quot;text/html&quot;, &quot;.txt&quot; =&gt; &quot;text/plain&quot;, &quot;.jpg&quot; =&gt; &quot;image/jpeg&quot;, &quot;.png&quot; =&gt; &quot;image/png&quot;, &quot;&quot; =&gt; &quot;application/octet-stream&quot; )\n#ssl.engine = &quot;enable&quot;\n\nssl.pemfile = &quot;/etc/ssl/owncloud/server.pem&quot;\n\nserver.modules = (\n&quot;mod_access&quot;,\n&quot;mod_fastcgi&quot;,\n&quot;mod_cgi&quot;\n)\n\n$HTTP[&quot;url&quot;] =~ &quot;^/owncloud/data/&quot; {\nurl.access-deny = (&quot;&quot;)\n}\n$HTTP[&quot;url&quot;] =~ &quot;^/owncloud($|/)&quot; {\ndir-listing.activate = &quot;disable&quot;\n}\n\nfastcgi.server = (\n&quot;.php&quot; =&gt; ((\n&quot;bin-path&quot; =&gt; &quot;/usr/bin/php-cgi&quot;,\n&quot;socket&quot; =&gt; &quot;/tmp/php.socket&quot;,\n&quot;max-procs&quot; =&gt; 4\n))\n)\n</code></pre>\n<p>You can test the Lighttpd configuration like this.</p>\n<pre><code>lighttpd -t -f /etc/lighttpd/lighttpd.conf\n</code></pre>\n<h2 id=\"php\">PHP</h2>\n<p>Install like this.</p>\n<pre><code>pacman -S php-cgi\n</code></pre>\n<p>The configuration exists in <code>/etc/php/php.ini</code>. There are a number of settings to change here. Here are the extensions I found was neccessary for Owncloud.</p>\n<pre><code>extension=curl.so\nextension=gd.so\nextension=iconv.so\nextension=openssl.so\nextension=pdo_sqlite.so\nextension=sqlite3.so\nextension=zip.so\n</code></pre>\n<p>The document root has to be set.</p>\n<pre><code>doc_root = /srv/http\n</code></pre>\n<p>I don't know exactly what this is, but it is needed =)</p>\n<pre><code>cgi.fix_pathinfo=1\n</code></pre>\n<h2 id=\"openssl\">OpenSSL</h2>\n<pre><code>pacman -S openssl\nmkdir /etc/ssl/owncloud\ncd /etc/ssl/owncloud\nopenssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes\nchmod 0600 /etc/ssl/owncloud\n</code></pre>\n<h2 id=\"installowncloud\">Install Owncloud</h2>\n<p>Install and link the application to make it available in webserver. I like this solution better then copying the files. Now it's easier to keep it updated with Pacman.</p>\n<pre><code>pacman -S owncloud\nln -s /usr/share/webapps/owncloud /srv/http/owncloud\n</code></pre>\n<p>Time to start the webserver!</p>\n<pre><code>lighttpd -t -f /etc/lighttpd/lighttpd.conf #This test can save you some time!\nsystemctl restart lighttpd.service\n</code></pre>\n<p>Now you can surf into /owncloud and the application should be running. You will most likely get a response similar to this.<br>\nNo database drivers (sqlite, mysql, or postgresql) installed.<br>\nPHP module zip not installed.</p>\n<pre><code>Please ask your server administrator to install the module.\nPHP module GD is not installed.\n\nPlease ask your server administrator to install the module.\nPHP module iconv is not installed.\n\nPlease ask your server administrator to install the module.\n</code></pre>\n<p>I installed them one by one, and then restarted Lighttpd to see that they got installed correctly. Like php-sqlite for example.</p>\n<pre><code>pacman -Ss sqlite #search for sqlite\npacman -S extra/php-sqlite #install php-sqlite\n</code></pre>\n<p>It may be that they are just not enabled in <code>php.ini</code> extensions section, and/or that they are not even intalled. Like I had PHP-GD installed but had missed <code>;extension=gd.so</code> in <code>php.ini</code>.</p>\n<p>When all extensions are in place, you will see two input fields where you input admin user and password. Once entered it will take a very long time to submit the form! I actually gave up and did a restart of Lighttpd. After that it loaded faster.<br>\nIssues</p>\n<p>If you have issues, there are helpful logs.</p>\n<pre><code>tail -f /srv/http/owncloud/data/owncloud.log\ntail -f /var/log/lighttpd/error.log\n</code></pre>\n<p>First issue I had was that the first page got stuck hanging on &quot;Upgrading filesystem cache&quot;. Looking at the log I found.</p>\n<pre><code>2013-07-22 18:28:35: (mod_fastcgi.c.2676) FastCGI-stderr: PHP Fatal error: Call to a member function raiseError() on a non-object in /usr/share/webapps/owncloud/lib/MDB2/Driver/sqlite3.php on line 898\n</code></pre>\n<p>This is very easy to solve, just uncomment</p>\n<pre><code>&quot;extension=pdo_sqlite.so&quot; in php.ini.\nextension=pdo_sqlite.so\n</code></pre>\n<p>Second problem was admin got stuck. I got a tip that it could be PHP not being able to lookup <code>apps.owncloud.com</code> so I tried this.</p>\n<pre><code>echo &quot;&lt;?php echo gethostbyname('apps.owncloud.com'); ?&amp;rt;&quot; &gt; /srv/http/dns.php\n</code></pre>\n<p>And the dns.php page also got stuck. I added the entry in <code>/etc/hosts</code> like this, not nice but it works for now.</p>\n<pre><code>188.138.118.86 apps.owncloud.com apps.owncloud.com\n</code></pre>\n<p>However, the admin page was not accessble, it also hang. In the <code>owncloud.log</code> I saw.</p>\n<pre><code>{&quot;app&quot;:&quot;PHP&quot;,&quot;message&quot;:&quot;curl_setopt_array(): CURLOPT_FOLLOWLOCATION cannot be activated when an open_basedir is set at \\/usr\\/share\\/webapps\\/owncloud\\/3rdparty\\/Sabre\\/DAV\\/Client.php#462&quot;,&quot;level&quot;:2,&quot;time&quot;:814}\n</code></pre>\n<p>I fixed that by commenting out open_basedir in php.ini.</p>\n<pre><code>;open_basedir = ...\n</code></pre>\n<p>The third thing, that definitly finally did the trick, was <code>max-procs</code> parameter in Lighttpd config. I had it set to <code>1</code> and I changed it to <code>4</code>.</p>\n<p>Last I recommend looking at <a href=\"https://forum.owncloud.org/viewtopic.php?f=8&amp;t=10692\">https://forum.owncloud.org/viewtopic.php?f=8&amp;t=10692</a> for performance tips.</p>\n</div>","amp":"9","plaintext":"I just installed Owncloud Server on my Raspberry PI. It was a bit harder then I\nhad expected so I'll summarize how I did it and the issues I had. I'm using\nRaspberry PI (512Mb model), ArchLinux, Lighttpd 1.4.32, SQLite 3.7.17.\n\nLighttpd\nFirst, install it.\n\npacman -S lighttpd\n\n\nThe Lighttpd config file exists in /etc/lighttpd/lighttpd.conf. I made alot of\nchanges here it's probably easiest just to show the whole file.\n\nserver.port = 80\nserver.username = \"http\"\nserver.groupname = \"http\"\nserver.document-root = \"/srv/http\"\nserver.errorlog = \"/var/log/lighttpd/error.log\"\ndir-listing.activate = \"enable\"\nindex-file.names = ( \"index.html\", \"index.php\" )\nstatic-file.exclude-extensions = (\".php\", \".pl\", \".fcgi\")\nmimetype.assign = ( \".html\" => \"text/html\", \".txt\" => \"text/plain\", \".jpg\" => \"image/jpeg\", \".png\" => \"image/png\", \"\" => \"application/octet-stream\" )\n#ssl.engine = \"enable\"\n\nssl.pemfile = \"/etc/ssl/owncloud/server.pem\"\n\nserver.modules = (\n\"mod_access\",\n\"mod_fastcgi\",\n\"mod_cgi\"\n)\n\n$HTTP[\"url\"] =~ \"^/owncloud/data/\" {\nurl.access-deny = (\"\")\n}\n$HTTP[\"url\"] =~ \"^/owncloud($|/)\" {\ndir-listing.activate = \"disable\"\n}\n\nfastcgi.server = (\n\".php\" => ((\n\"bin-path\" => \"/usr/bin/php-cgi\",\n\"socket\" => \"/tmp/php.socket\",\n\"max-procs\" => 4\n))\n)\n\n\nYou can test the Lighttpd configuration like this.\n\nlighttpd -t -f /etc/lighttpd/lighttpd.conf\n\n\nPHP\nInstall like this.\n\npacman -S php-cgi\n\n\nThe configuration exists in /etc/php/php.ini. There are a number of settings to\nchange here. Here are the extensions I found was neccessary for Owncloud.\n\nextension=curl.so\nextension=gd.so\nextension=iconv.so\nextension=openssl.so\nextension=pdo_sqlite.so\nextension=sqlite3.so\nextension=zip.so\n\n\nThe document root has to be set.\n\ndoc_root = /srv/http\n\n\nI don't know exactly what this is, but it is needed =)\n\ncgi.fix_pathinfo=1\n\n\nOpenSSL\npacman -S openssl\nmkdir /etc/ssl/owncloud\ncd /etc/ssl/owncloud\nopenssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes\nchmod 0600 /etc/ssl/owncloud\n\n\nInstall Owncloud\nInstall and link the application to make it available in webserver. I like this\nsolution better then copying the files. Now it's easier to keep it updated with\nPacman.\n\npacman -S owncloud\nln -s /usr/share/webapps/owncloud /srv/http/owncloud\n\n\nTime to start the webserver!\n\nlighttpd -t -f /etc/lighttpd/lighttpd.conf #This test can save you some time!\nsystemctl restart lighttpd.service\n\n\nNow you can surf into /owncloud and the application should be running. You will\nmost likely get a response similar to this.\nNo database drivers (sqlite, mysql, or postgresql) installed.\nPHP module zip not installed.\n\nPlease ask your server administrator to install the module.\nPHP module GD is not installed.\n\nPlease ask your server administrator to install the module.\nPHP module iconv is not installed.\n\nPlease ask your server administrator to install the module.\n\n\nI installed them one by one, and then restarted Lighttpd to see that they got\ninstalled correctly. Like php-sqlite for example.\n\npacman -Ss sqlite #search for sqlite\npacman -S extra/php-sqlite #install php-sqlite\n\n\nIt may be that they are just not enabled in php.ini  extensions section, and/or\nthat they are not even intalled. Like I had PHP-GD installed but had missed \n;extension=gd.so  in php.ini.\n\nWhen all extensions are in place, you will see two input fields where you input\nadmin user and password. Once entered it will take a very long time to submit\nthe form! I actually gave up and did a restart of Lighttpd. After that it loaded\nfaster.\nIssues\n\nIf you have issues, there are helpful logs.\n\ntail -f /srv/http/owncloud/data/owncloud.log\ntail -f /var/log/lighttpd/error.log\n\n\nFirst issue I had was that the first page got stuck hanging on \"Upgrading\nfilesystem cache\". Looking at the log I found.\n\n2013-07-22 18:28:35: (mod_fastcgi.c.2676) FastCGI-stderr: PHP Fatal error: Call to a member function raiseError() on a non-object in /usr/share/webapps/owncloud/lib/MDB2/Driver/sqlite3.php on line 898\n\n\nThis is very easy to solve, just uncomment\n\n\"extension=pdo_sqlite.so\" in php.ini.\nextension=pdo_sqlite.so\n\n\nSecond problem was admin got stuck. I got a tip that it could be PHP not being\nable to lookup apps.owncloud.com  so I tried this.\n\necho \"<?php echo gethostbyname('apps.owncloud.com'); ?&rt;\" > /srv/http/dns.php\n\n\nAnd the dns.php page also got stuck. I added the entry in /etc/hosts  like this,\nnot nice but it works for now.\n\n188.138.118.86 apps.owncloud.com apps.owncloud.com\n\n\nHowever, the admin page was not accessble, it also hang. In the owncloud.log  I\nsaw.\n\n{\"app\":\"PHP\",\"message\":\"curl_setopt_array(): CURLOPT_FOLLOWLOCATION cannot be activated when an open_basedir is set at \\/usr\\/share\\/webapps\\/owncloud\\/3rdparty\\/Sabre\\/DAV\\/Client.php#462\",\"level\":2,\"time\":814}\n\n\nI fixed that by commenting out open_basedir in php.ini.\n\n;open_basedir = ...\n\n\nThe third thing, that definitly finally did the trick, was max-procs  parameter\nin Lighttpd config. I had it set to 1  and I changed it to 4.\n\nLast I recommend looking at https://forum.owncloud.org/viewtopic.php?f=8&t=10692\n[https://forum.owncloud.org/viewtopic.php?f=8&t=10692]  for performance tips.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:09:54.000Z","created_by":"2","updated_at":"2014-10-04T14:04:45.000Z","updated_by":"1","published_at":"2013-10-19T09:09:54.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918697","uuid":"be4ce0c2-9ae0-489e-a6fd-fb2d6586fa7d","title":"Raspberry PI with Camera Module and ArchLinux","slug":"raspberry-pi-with-camera-module-and-archlinux","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I reccently bought a Raspberry PI. I am new to ArchLinux so I thought I'd make some notes of the initial setup. This is the hardware used to build the camera:\\n\\n* Raspberry Pi Model B 512MB RAM\\n* Camera Module for Raspberry Pi\\n* WiFi USB Nano\\n* OpenBox Sky Case\\n* 16GB SD\\n\\n##Partitioning SD card\\n\\nI added the ArchLinux image to a 16GB card. The images creates a 2GB parition so you need to either extend it before booting or create a new partition after boot. I choose to create a new partition after boot, and use it for `/home`.\\n```\\nfdisk /dev/disk/by-id/mmc-*\\nn add partition\\nw save and exit\\n```\\n\\n##Create file system.\\n```\\nmkfs.ext4 /dev/mmcblk0p3\\n```\\n\\nRemove everything in `/home`. I am assuming you have nothing important here yet.\\n```\\nrm -rf /home/*\\n```\\n\\nMount the device at boot.\\n```\\n/dev/mmcblk0p3 /home ext4 defaults 0 2\\n```\\n##Package manager\\n\\nI had never heard of Pacman package manager before. But its just as easy. To search for packages do this.\\n```\\npacman -Ss partOfPackageName\\n```\\n\\nTo install a package do this.\\n```\\npacman -S packageName\\n```\\n\\nUpgrade all packages.\\n```\\npacman -Syu\\n```\\n\\nInitiallly I had some problems when installing packages. I got this.\\n```\\n\\\"from mirror.archlinuxarm.org : The requested URL returned error: 404 Not Found\\\"\\n```\\n\\nJust perform a full uppgrade and it should be resolved.\\n##Network setup\\n\\nTo list available devices do.\\n```\\nip link\\n```\\n\\nTo get the wireless network running I installed these.\\n```\\npacman -S wpa_supplicant\\npacman -S wpa_actiond\\npacman -S ifplugd\\npacman -S dhclient\\npacman -S openntpd\\n```\\n\\nThere is a very nice setup wizard, just do this.\\n```\\nwifi-menu -o\\n```\\n\\nNetwork configuration exists in profile files. I had some problems with the DHCP client not setting IP:s after network loss. I added `DHPClient` to the profiles to make it reconnect.\\n```\\n#/etc/netctl/ethernet-dhcp\\nDescription='A basic dhcp ethernet connection'\\nInterface=eth0\\nConnection=ethernet\\nIP=dhcp\\nDHCPClient='dhclient'\\nTimeoutDHCP=30\\nExecUpPost=\\\"ntpd -s &\\\"\\n```\\n\\n```\\n#/etc/netctl/wlan0-tallefjantlinksys\\nDescription='Automatically generated profile by wifi-menu'\\nInterface=wlan0\\nConnection=wireless\\nSecurity=wpa\\nESSID=MYNETWORKNAME\\nIP=dhcp\\nKey=12312312312313123132\\nDHCPClient='dhclient'\\nTimeoutDHCP=30\\nExecUpPost=\\\"ntpd -s &\\\"\\n```\\n\\nTo make WLAN connect when available, and Ethernet connect when plugged, do this.\\n```\\nsystemctl enable netctl-auto@wlan0.service\\nsystemctl enable netctl-ifplugd@eth00.service\\n```\\n\\nTo make WLAN and Ethernet use DHCP at boot, do this.\\n```\\nsystemctl enable dhcpcd@eth0\\nsystemctl enable dhcpcd@wlan0\\n```\\n\\nI noted that the network setup was not working after the first initual upgrade with Pacman. To solve it I just disabled the enabled services and enabled them again.\\n```\\nsystemctl status --failed\\nsystemctl disable FAILEDSERVICE\\n```\\nI had problems with DHCP timeouts so I added the `TimeoutDHCP` parameter and set it to 30. Default is 10 seconds. Also the `ExecUpPost` will set time from NTP when connected.\\n##Time and date\\n\\nIn my case, Sweden.\\n```\\nrm /etc/timezone\\nln -s /usr/share/zoneinfo/Europe/Stockholm /etc/timezone\\n```\\nAlso, the Raspberry Pi has no battery. The time will be 1970 on every reboot. You can use NTP to set the date from a time server on startup.\\n```\\npacman -S openntpd\\n```\\n\\nTo start ntpd when a network interface is connected, add `ExecUpPost` to your interface profile. Here is an example of my eth0.\\n```\\nDescription='A basic dhcp ethernet connection'\\nInterface=eth0\\nConnection=ethernet\\nIP=dhcp\\nExecUpPost=\\\"ntpd -s &\\\"\\nRaspberry Camera\\n```\\n\\n##Camera module software in PATH\\nIn `~/.bashrc` I added.\\n```\\nexport PATH=$PATH:/opt/vc/bin\\n```\\n\\n##Tweak camera memory usage\\nIn `/boot/config.txt` I added.\\n```\\ngpu_mem=128\\nstart_file=start_x.elf\\nfixup_file=fixup_x.dat\\n```\\n\\n##Speed up camera\\nThe camera may seem slow. There is a default delay of 5 seconds before it takes the picture. You can change this with `-t 0`.\\nI've noticed the device hangs when storing larger videos. It's a good idea to record video directly to RAM, that works much better for me. By default `/tmp` is mounted as `tmpfs`.\\n```\\n/opt/vc/bin/raspistill -t 0 -o /tmp/test.png\\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 5000\\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 20000\\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 60000\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I reccently bought a Raspberry PI. I am new to ArchLinux so I thought I'd make some notes of the initial setup. This is the hardware used to build the camera:</p>\n<ul>\n<li>Raspberry Pi Model B 512MB RAM</li>\n<li>Camera Module for Raspberry Pi</li>\n<li>WiFi USB Nano</li>\n<li>OpenBox Sky Case</li>\n<li>16GB SD</li>\n</ul>\n<h2 id=\"partitioningsdcard\">Partitioning SD card</h2>\n<p>I added the ArchLinux image to a 16GB card. The images creates a 2GB parition so you need to either extend it before booting or create a new partition after boot. I choose to create a new partition after boot, and use it for <code>/home</code>.</p>\n<pre><code>fdisk /dev/disk/by-id/mmc-*\nn add partition\nw save and exit\n</code></pre>\n<h2 id=\"createfilesystem\">Create file system.</h2>\n<pre><code>mkfs.ext4 /dev/mmcblk0p3\n</code></pre>\n<p>Remove everything in <code>/home</code>. I am assuming you have nothing important here yet.</p>\n<pre><code>rm -rf /home/*\n</code></pre>\n<p>Mount the device at boot.</p>\n<pre><code>/dev/mmcblk0p3 /home ext4 defaults 0 2\n</code></pre>\n<h2 id=\"packagemanager\">Package manager</h2>\n<p>I had never heard of Pacman package manager before. But its just as easy. To search for packages do this.</p>\n<pre><code>pacman -Ss partOfPackageName\n</code></pre>\n<p>To install a package do this.</p>\n<pre><code>pacman -S packageName\n</code></pre>\n<p>Upgrade all packages.</p>\n<pre><code>pacman -Syu\n</code></pre>\n<p>Initiallly I had some problems when installing packages. I got this.</p>\n<pre><code>&quot;from mirror.archlinuxarm.org : The requested URL returned error: 404 Not Found&quot;\n</code></pre>\n<p>Just perform a full uppgrade and it should be resolved.</p>\n<h2 id=\"networksetup\">Network setup</h2>\n<p>To list available devices do.</p>\n<pre><code>ip link\n</code></pre>\n<p>To get the wireless network running I installed these.</p>\n<pre><code>pacman -S wpa_supplicant\npacman -S wpa_actiond\npacman -S ifplugd\npacman -S dhclient\npacman -S openntpd\n</code></pre>\n<p>There is a very nice setup wizard, just do this.</p>\n<pre><code>wifi-menu -o\n</code></pre>\n<p>Network configuration exists in profile files. I had some problems with the DHCP client not setting IP:s after network loss. I added <code>DHPClient</code> to the profiles to make it reconnect.</p>\n<pre><code>#/etc/netctl/ethernet-dhcp\nDescription='A basic dhcp ethernet connection'\nInterface=eth0\nConnection=ethernet\nIP=dhcp\nDHCPClient='dhclient'\nTimeoutDHCP=30\nExecUpPost=&quot;ntpd -s &amp;&quot;\n</code></pre>\n<pre><code>#/etc/netctl/wlan0-tallefjantlinksys\nDescription='Automatically generated profile by wifi-menu'\nInterface=wlan0\nConnection=wireless\nSecurity=wpa\nESSID=MYNETWORKNAME\nIP=dhcp\nKey=12312312312313123132\nDHCPClient='dhclient'\nTimeoutDHCP=30\nExecUpPost=&quot;ntpd -s &amp;&quot;\n</code></pre>\n<p>To make WLAN connect when available, and Ethernet connect when plugged, do this.</p>\n<pre><code>systemctl enable netctl-auto@wlan0.service\nsystemctl enable netctl-ifplugd@eth00.service\n</code></pre>\n<p>To make WLAN and Ethernet use DHCP at boot, do this.</p>\n<pre><code>systemctl enable dhcpcd@eth0\nsystemctl enable dhcpcd@wlan0\n</code></pre>\n<p>I noted that the network setup was not working after the first initual upgrade with Pacman. To solve it I just disabled the enabled services and enabled them again.</p>\n<pre><code>systemctl status --failed\nsystemctl disable FAILEDSERVICE\n</code></pre>\n<p>I had problems with DHCP timeouts so I added the <code>TimeoutDHCP</code> parameter and set it to 30. Default is 10 seconds. Also the <code>ExecUpPost</code> will set time from NTP when connected.</p>\n<h2 id=\"timeanddate\">Time and date</h2>\n<p>In my case, Sweden.</p>\n<pre><code>rm /etc/timezone\nln -s /usr/share/zoneinfo/Europe/Stockholm /etc/timezone\n</code></pre>\n<p>Also, the Raspberry Pi has no battery. The time will be 1970 on every reboot. You can use NTP to set the date from a time server on startup.</p>\n<pre><code>pacman -S openntpd\n</code></pre>\n<p>To start ntpd when a network interface is connected, add <code>ExecUpPost</code> to your interface profile. Here is an example of my eth0.</p>\n<pre><code>Description='A basic dhcp ethernet connection'\nInterface=eth0\nConnection=ethernet\nIP=dhcp\nExecUpPost=&quot;ntpd -s &amp;&quot;\nRaspberry Camera\n</code></pre>\n<h2 id=\"cameramodulesoftwareinpath\">Camera module software in PATH</h2>\n<p>In <code>~/.bashrc</code> I added.</p>\n<pre><code>export PATH=$PATH:/opt/vc/bin\n</code></pre>\n<h2 id=\"tweakcameramemoryusage\">Tweak camera memory usage</h2>\n<p>In <code>/boot/config.txt</code> I added.</p>\n<pre><code>gpu_mem=128\nstart_file=start_x.elf\nfixup_file=fixup_x.dat\n</code></pre>\n<h2 id=\"speedupcamera\">Speed up camera</h2>\n<p>The camera may seem slow. There is a default delay of 5 seconds before it takes the picture. You can change this with <code>-t 0</code>.<br>\nI've noticed the device hangs when storing larger videos. It's a good idea to record video directly to RAM, that works much better for me. By default <code>/tmp</code> is mounted as <code>tmpfs</code>.</p>\n<pre><code>/opt/vc/bin/raspistill -t 0 -o /tmp/test.png\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 5000\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 20000\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 60000\n</code></pre>\n</div>","amp":"10","plaintext":"I reccently bought a Raspberry PI. I am new to ArchLinux so I thought I'd make\nsome notes of the initial setup. This is the hardware used to build the camera:\n\n * Raspberry Pi Model B 512MB RAM\n * Camera Module for Raspberry Pi\n * WiFi USB Nano\n * OpenBox Sky Case\n * 16GB SD\n\nPartitioning SD card\nI added the ArchLinux image to a 16GB card. The images creates a 2GB parition so\nyou need to either extend it before booting or create a new partition after\nboot. I choose to create a new partition after boot, and use it for /home.\n\nfdisk /dev/disk/by-id/mmc-*\nn add partition\nw save and exit\n\n\nCreate file system.\nmkfs.ext4 /dev/mmcblk0p3\n\n\nRemove everything in /home. I am assuming you have nothing important here yet.\n\nrm -rf /home/*\n\n\nMount the device at boot.\n\n/dev/mmcblk0p3 /home ext4 defaults 0 2\n\n\nPackage manager\nI had never heard of Pacman package manager before. But its just as easy. To\nsearch for packages do this.\n\npacman -Ss partOfPackageName\n\n\nTo install a package do this.\n\npacman -S packageName\n\n\nUpgrade all packages.\n\npacman -Syu\n\n\nInitiallly I had some problems when installing packages. I got this.\n\n\"from mirror.archlinuxarm.org : The requested URL returned error: 404 Not Found\"\n\n\nJust perform a full uppgrade and it should be resolved.\n\nNetwork setup\nTo list available devices do.\n\nip link\n\n\nTo get the wireless network running I installed these.\n\npacman -S wpa_supplicant\npacman -S wpa_actiond\npacman -S ifplugd\npacman -S dhclient\npacman -S openntpd\n\n\nThere is a very nice setup wizard, just do this.\n\nwifi-menu -o\n\n\nNetwork configuration exists in profile files. I had some problems with the DHCP\nclient not setting IP:s after network loss. I added DHPClient  to the profiles\nto make it reconnect.\n\n#/etc/netctl/ethernet-dhcp\nDescription='A basic dhcp ethernet connection'\nInterface=eth0\nConnection=ethernet\nIP=dhcp\nDHCPClient='dhclient'\nTimeoutDHCP=30\nExecUpPost=\"ntpd -s &\"\n\n\n#/etc/netctl/wlan0-tallefjantlinksys\nDescription='Automatically generated profile by wifi-menu'\nInterface=wlan0\nConnection=wireless\nSecurity=wpa\nESSID=MYNETWORKNAME\nIP=dhcp\nKey=12312312312313123132\nDHCPClient='dhclient'\nTimeoutDHCP=30\nExecUpPost=\"ntpd -s &\"\n\n\nTo make WLAN connect when available, and Ethernet connect when plugged, do this.\n\nsystemctl enable netctl-auto@wlan0.service\nsystemctl enable netctl-ifplugd@eth00.service\n\n\nTo make WLAN and Ethernet use DHCP at boot, do this.\n\nsystemctl enable dhcpcd@eth0\nsystemctl enable dhcpcd@wlan0\n\n\nI noted that the network setup was not working after the first initual upgrade\nwith Pacman. To solve it I just disabled the enabled services and enabled them\nagain.\n\nsystemctl status --failed\nsystemctl disable FAILEDSERVICE\n\n\nI had problems with DHCP timeouts so I added the TimeoutDHCP  parameter and set\nit to 30. Default is 10 seconds. Also the ExecUpPost  will set time from NTP\nwhen connected.\n\nTime and date\nIn my case, Sweden.\n\nrm /etc/timezone\nln -s /usr/share/zoneinfo/Europe/Stockholm /etc/timezone\n\n\nAlso, the Raspberry Pi has no battery. The time will be 1970 on every reboot.\nYou can use NTP to set the date from a time server on startup.\n\npacman -S openntpd\n\n\nTo start ntpd when a network interface is connected, add ExecUpPost  to your\ninterface profile. Here is an example of my eth0.\n\nDescription='A basic dhcp ethernet connection'\nInterface=eth0\nConnection=ethernet\nIP=dhcp\nExecUpPost=\"ntpd -s &\"\nRaspberry Camera\n\n\nCamera module software in PATH\nIn ~/.bashrc  I added.\n\nexport PATH=$PATH:/opt/vc/bin\n\n\nTweak camera memory usage\nIn /boot/config.txt  I added.\n\ngpu_mem=128\nstart_file=start_x.elf\nfixup_file=fixup_x.dat\n\n\nSpeed up camera\nThe camera may seem slow. There is a default delay of 5 seconds before it takes\nthe picture. You can change this with -t 0.\nI've noticed the device hangs when storing larger videos. It's a good idea to\nrecord video directly to RAM, that works much better for me. By default /tmp  is\nmounted as tmpfs.\n\n/opt/vc/bin/raspistill -t 0 -o /tmp/test.png\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 5000\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 20000\n/opt/vc/bin/raspivid -o /tmp/out.h264 -t 60000","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:14:09.000Z","created_by":"2","updated_at":"2014-10-04T14:04:18.000Z","updated_by":"1","published_at":"2013-10-19T09:14:09.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918698","uuid":"9967d65f-d8fd-403e-82b2-c564aabfc6c3","title":"Raspberry Surveillance","slug":"raspberry-surveillance","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I reccently bought a Raspberry PI. The main reason was that I had an idea of making some video surveillance software. I have made 2 previous blog posts regarding the Raspberry Pi and both of them are sort of related this one. One where I wrote some notes on the initial setup of the hardware and basic software. One where I wrote about how to setup Owncloud. This post is about https://github.com/tomasbjerre/RaspberrySurveillance. It is project where I've developed, mainly, a [web interface](http://files.bjurr.se/blog/rbs.png) that can:\\n\\n* Show snapshot of camera\\n* Setup motion triggering\\n* Start and stop motion triggering\\n* Save captured videos to disk\\n* Save captured videos to Webdav (Supported by Owncloud)\\n\\nThis means you can start and stop motion triggering from a web interface. Whenever a video is captured you can have it uploaded to Owncloud and have it automatically synced to you Windows PC.\\n\\nWhen camera triggers it will store pictures and/or vieos, it is configurable. Here is a very small example of a captured event.\\n\\n* [Picture that detected change](http://files.bjurr.se/blog/00003-image.jpg)\\n* [Video recorded on trigger](http://files.bjurr.se/blog/00003-2013-08-06_10-03-30-video.h264)\\n* [Picture showing what was changed in picture](http://files.bjurr.se/blog/00003-image-diff.jpg)\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I reccently bought a Raspberry PI. The main reason was that I had an idea of making some video surveillance software. I have made 2 previous blog posts regarding the Raspberry Pi and both of them are sort of related this one. One where I wrote some notes on the initial setup of the hardware and basic software. One where I wrote about how to setup Owncloud. This post is about <a href=\"https://github.com/tomasbjerre/RaspberrySurveillance\">https://github.com/tomasbjerre/RaspberrySurveillance</a>. It is project where I've developed, mainly, a <a href=\"http://files.bjurr.se/blog/rbs.png\">web interface</a> that can:</p>\n<ul>\n<li>Show snapshot of camera</li>\n<li>Setup motion triggering</li>\n<li>Start and stop motion triggering</li>\n<li>Save captured videos to disk</li>\n<li>Save captured videos to Webdav (Supported by Owncloud)</li>\n</ul>\n<p>This means you can start and stop motion triggering from a web interface. Whenever a video is captured you can have it uploaded to Owncloud and have it automatically synced to you Windows PC.</p>\n<p>When camera triggers it will store pictures and/or vieos, it is configurable. Here is a very small example of a captured event.</p>\n<ul>\n<li><a href=\"http://files.bjurr.se/blog/00003-image.jpg\">Picture that detected change</a></li>\n<li><a href=\"http://files.bjurr.se/blog/00003-2013-08-06_10-03-30-video.h264\">Video recorded on trigger</a></li>\n<li><a href=\"http://files.bjurr.se/blog/00003-image-diff.jpg\">Picture showing what was changed in picture</a></li>\n</ul>\n</div>","amp":"11","plaintext":"I reccently bought a Raspberry PI. The main reason was that I had an idea of\nmaking some video surveillance software. I have made 2 previous blog posts\nregarding the Raspberry Pi and both of them are sort of related this one. One\nwhere I wrote some notes on the initial setup of the hardware and basic\nsoftware. One where I wrote about how to setup Owncloud. This post is about \nhttps://github.com/tomasbjerre/RaspberrySurveillance. It is project where I've\ndeveloped, mainly, a web interface [http://files.bjurr.se/blog/rbs.png]  that\ncan:\n\n * Show snapshot of camera\n * Setup motion triggering\n * Start and stop motion triggering\n * Save captured videos to disk\n * Save captured videos to Webdav (Supported by Owncloud)\n\nThis means you can start and stop motion triggering from a web interface.\nWhenever a video is captured you can have it uploaded to Owncloud and have it\nautomatically synced to you Windows PC.\n\nWhen camera triggers it will store pictures and/or vieos, it is configurable.\nHere is a very small example of a captured event.\n\n * Picture that detected change [http://files.bjurr.se/blog/00003-image.jpg]\n * Video recorded on trigger\n   [http://files.bjurr.se/blog/00003-2013-08-06_10-03-30-video.h264]\n * Picture showing what was changed in picture\n   [http://files.bjurr.se/blog/00003-image-diff.jpg]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:15:05.000Z","created_by":"2","updated_at":"2014-10-04T14:03:54.000Z","updated_by":"1","published_at":"2013-10-19T09:15:09.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd918699","uuid":"5420692e-0deb-47ce-ad83-c1d7c168b1c4","title":"Dummy camera made smart with Raspberry Pi","slug":"dummy-camera-made-smart-with-raspberry-pi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I'd like to share how I build my camera using Raspberry Pi. I used a dummy camera and turned into a smart camera! The total cost is about £100 / 1000 SEK / $150 =)\\n\\nI have also developed software to help use the Raspberry Camera for surveillance. Check out these blog posts for further information.\\n\\n* [Raspberry Surveillance](/raspberry-surveillance)\\n* [Raspberry PI with Camera Module and ArchLinux](/raspberry-pi-with-camera-module-and-archlinux)\\n* [Owncloud 5 Server with Lighttpd, Sqlite on ArchLinux](/owncloud-5-server-with-lighttpd-sqlite-on-archlinux)\\n\\n##Camera\\n\\nI found these parts on Amazon.co.uk.\\n\\n* Raspberry PI Starter Kit - Power, SD-card, Raspberry 512MB\\n* USB Wifi Adapter\\n* Byron - CS11D Dummy CCTV Camera Unit\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I'd like to share how I build my camera using Raspberry Pi. I used a dummy camera and turned into a smart camera! The total cost is about £100 / 1000 SEK / $150 =)</p>\n<p>I have also developed software to help use the Raspberry Camera for surveillance. Check out these blog posts for further information.</p>\n<ul>\n<li><a href=\"/raspberry-surveillance\">Raspberry Surveillance</a></li>\n<li><a href=\"/raspberry-pi-with-camera-module-and-archlinux\">Raspberry PI with Camera Module and ArchLinux</a></li>\n<li><a href=\"/owncloud-5-server-with-lighttpd-sqlite-on-archlinux\">Owncloud 5 Server with Lighttpd, Sqlite on ArchLinux</a></li>\n</ul>\n<h2 id=\"camera\">Camera</h2>\n<p>I found these parts on <a href=\"http://Amazon.co.uk\">Amazon.co.uk</a>.</p>\n<ul>\n<li>Raspberry PI Starter Kit - Power, SD-card, Raspberry 512MB</li>\n<li>USB Wifi Adapter</li>\n<li>Byron - CS11D Dummy CCTV Camera Unit</li>\n</ul>\n</div>","amp":"12","plaintext":"I'd like to share how I build my camera using Raspberry Pi. I used a dummy\ncamera and turned into a smart camera! The total cost is about £100 / 1000 SEK /\n$150 =)\n\nI have also developed software to help use the Raspberry Camera for\nsurveillance. Check out these blog posts for further information.\n\n * Raspberry Surveillance [/raspberry-surveillance]\n * Raspberry PI with Camera Module and ArchLinux\n   [/raspberry-pi-with-camera-module-and-archlinux]\n * Owncloud 5 Server with Lighttpd, Sqlite on ArchLinux\n   [/owncloud-5-server-with-lighttpd-sqlite-on-archlinux]\n\nCamera\nI found these parts on Amazon.co.uk [http://Amazon.co.uk].\n\n * Raspberry PI Starter Kit - Power, SD-card, Raspberry 512MB\n * USB Wifi Adapter\n * Byron - CS11D Dummy CCTV Camera Unit","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-10-19T09:15:39.000Z","created_by":"2","updated_at":"2014-10-05T20:09:01.000Z","updated_by":"1","published_at":"2013-10-19T09:15:39.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869a","uuid":"d2433415-ca1a-4d29-bbd3-51665d5c72ee","title":"Linux in VirtualBox on Windows","slug":"linux-in-virtualbox-on-windows","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently got a new computer with Windows 8 installed. I will be using it mainly for web development. I setup a VirtualBox with Ubuntu. It's more or less a piece of cake, but I thought I'd summarize what I did.\\n\\n##Security\\nIn my case security is of high priority. It is very important that no information on the computer is leaked. I choose to use ***TrueCrypt*** and create a ***virtual encrypted disk*** to hold all important files. Including VirtualBox disks.\\n\\nThe password for decrypting the filesystem is the only protection that I have. Ubuntu will automatically logon a user that can do `sudo` without supplying password.\\n\\n###TrueCrypt\\nTrueCrypt is available [here](http://www.truecrypt.org/). Creating the encrypted filesystem is easy, just click ***Create Volume*** and choose ***create an encrypted file container***. A neat feature is to have it mounted on Windows startup, you can do that if you add the filesystem as a favorite.\\n\\n![Add Favorite](/content/images/2013/Dec/truecrypt1.png)\\nAnd check the option ***Mount selected volume upon logon***.\\n![Mount on logon](/content/images/2013/Dec/truecrypt2.png)\\n\\n##VirtualBox\\nDownload VirtualBox [here](https://www.virtualbox.org/). You may download latest bootable DVD from Ubuntu website but its much easier to grab an installation and then tweak it. You will find the latest Ubuntu [here](http://virtualboxes.org/images/ubuntu/) (In my case Ubuntu Linux 13.04 x86).\\n\\nI hade to disable USB for the virtual macine to start.\\n![Disable USB](/content/images/2013/Dec/virtualboxusb_PNG.png)\\nTo get Internet access, I added an NAT adapter like this:\\n![](/content/images/2014/Jan/nat.png)\\nAs I was unable to reach running servers on the virtual machine from the physical machine, I added another Host-only adapter. This will allow you to run, for example, a web server on the virtual machine and surf in to it from the physical machine.\\n![Network adapter 2](/content/images/2013/Dec/virtualboxnet_PNG.png)\\nNote that the Adapter 1 shown in these scrennshots should be disconnected or not there at all.\\n\\n##Ubuntu tweaks\\nTo allow user `ubuntu` to do sudo, without specifying a password, do this.\\n```\\nsudo nano -w /etc/sudoers.d/ubuntu \\n```\\nAnd add this.\\n```\\nubuntu ALL=(ALL) NOPASSWD: ALL\\n```\\n\\nI would recommend using LXDE window manager, its much more lightweight compared to Unity.\\n```\\nsudo apt-get install lxde\\n```\\nTo use it, logout and login again but this time select LXDE on login screen.\\n\\nTo have user `ubuntu` login automatically do this.\\n```\\nsudo apt-get install gnome-system-tools\\n```\\nIn LXDE menu, go to ***preferences / users and groups***.\\nSelect checkbox ***Dont ask for password on login***.\\n![User settings](/content/images/2013/Dec/usersettings_PNG.png)\\n\\nTo disable screensaver go to ***preferences / screensaver*** and select mode ***Disable Screensaver***\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently got a new computer with Windows 8 installed. I will be using it mainly for web development. I setup a VirtualBox with Ubuntu. It's more or less a piece of cake, but I thought I'd summarize what I did.</p>\n<h2 id=\"security\">Security</h2>\n<p>In my case security is of high priority. It is very important that no information on the computer is leaked. I choose to use <strong><em>TrueCrypt</em></strong> and create a <strong><em>virtual encrypted disk</em></strong> to hold all important files. Including VirtualBox disks.</p>\n<p>The password for decrypting the filesystem is the only protection that I have. Ubuntu will automatically logon a user that can do <code>sudo</code> without supplying password.</p>\n<h3 id=\"truecrypt\">TrueCrypt</h3>\n<p>TrueCrypt is available <a href=\"http://www.truecrypt.org/\">here</a>. Creating the encrypted filesystem is easy, just click <strong><em>Create Volume</em></strong> and choose <strong><em>create an encrypted file container</em></strong>. A neat feature is to have it mounted on Windows startup, you can do that if you add the filesystem as a favorite.</p>\n<p><img src=\"/content/images/2013/Dec/truecrypt1.png\" alt=\"Add Favorite\"><br>\nAnd check the option <strong><em>Mount selected volume upon logon</em></strong>.<br>\n<img src=\"/content/images/2013/Dec/truecrypt2.png\" alt=\"Mount on logon\"></p>\n<h2 id=\"virtualbox\">VirtualBox</h2>\n<p>Download VirtualBox <a href=\"https://www.virtualbox.org/\">here</a>. You may download latest bootable DVD from Ubuntu website but its much easier to grab an installation and then tweak it. You will find the latest Ubuntu <a href=\"http://virtualboxes.org/images/ubuntu/\">here</a> (In my case Ubuntu Linux 13.04 x86).</p>\n<p>I hade to disable USB for the virtual macine to start.<br>\n<img src=\"/content/images/2013/Dec/virtualboxusb_PNG.png\" alt=\"Disable USB\"><br>\nTo get Internet access, I added an NAT adapter like this:<br>\n<img src=\"/content/images/2014/Jan/nat.png\" alt=\"\"><br>\nAs I was unable to reach running servers on the virtual machine from the physical machine, I added another Host-only adapter. This will allow you to run, for example, a web server on the virtual machine and surf in to it from the physical machine.<br>\n<img src=\"/content/images/2013/Dec/virtualboxnet_PNG.png\" alt=\"Network adapter 2\"><br>\nNote that the Adapter 1 shown in these scrennshots should be disconnected or not there at all.</p>\n<h2 id=\"ubuntutweaks\">Ubuntu tweaks</h2>\n<p>To allow user <code>ubuntu</code> to do sudo, without specifying a password, do this.</p>\n<pre><code>sudo nano -w /etc/sudoers.d/ubuntu \n</code></pre>\n<p>And add this.</p>\n<pre><code>ubuntu ALL=(ALL) NOPASSWD: ALL\n</code></pre>\n<p>I would recommend using LXDE window manager, its much more lightweight compared to Unity.</p>\n<pre><code>sudo apt-get install lxde\n</code></pre>\n<p>To use it, logout and login again but this time select LXDE on login screen.</p>\n<p>To have user <code>ubuntu</code> login automatically do this.</p>\n<pre><code>sudo apt-get install gnome-system-tools\n</code></pre>\n<p>In LXDE menu, go to <strong><em>preferences / users and groups</em></strong>.<br>\nSelect checkbox <strong><em>Dont ask for password on login</em></strong>.<br>\n<img src=\"/content/images/2013/Dec/usersettings_PNG.png\" alt=\"User settings\"></p>\n<p>To disable screensaver go to <strong><em>preferences / screensaver</em></strong> and select mode <strong><em>Disable Screensaver</em></strong></p>\n</div>","amp":"13","plaintext":"I recently got a new computer with Windows 8 installed. I will be using it\nmainly for web development. I setup a VirtualBox with Ubuntu. It's more or less\na piece of cake, but I thought I'd summarize what I did.\n\nSecurity\nIn my case security is of high priority. It is very important that no\ninformation on the computer is leaked. I choose to use TrueCrypt  and create a \nvirtual encrypted disk  to hold all important files. Including VirtualBox disks.\n\nThe password for decrypting the filesystem is the only protection that I have.\nUbuntu will automatically logon a user that can do sudo  without supplying\npassword.\n\nTrueCrypt\nTrueCrypt is available here [http://www.truecrypt.org/]. Creating the encrypted\nfilesystem is easy, just click Create Volume  and choose create an encrypted\nfile container. A neat feature is to have it mounted on Windows startup, you can\ndo that if you add the filesystem as a favorite.\n\n\nAnd check the option Mount selected volume upon logon.\n\n\nVirtualBox\nDownload VirtualBox here [https://www.virtualbox.org/]. You may download latest\nbootable DVD from Ubuntu website but its much easier to grab an installation and\nthen tweak it. You will find the latest Ubuntu here\n[http://virtualboxes.org/images/ubuntu/]  (In my case Ubuntu Linux 13.04 x86).\n\nI hade to disable USB for the virtual macine to start.\n\nTo get Internet access, I added an NAT adapter like this:\n\nAs I was unable to reach running servers on the virtual machine from the\nphysical machine, I added another Host-only adapter. This will allow you to run,\nfor example, a web server on the virtual machine and surf in to it from the\nphysical machine.\n\nNote that the Adapter 1 shown in these scrennshots should be disconnected or not\nthere at all.\n\nUbuntu tweaks\nTo allow user ubuntu  to do sudo, without specifying a password, do this.\n\nsudo nano -w /etc/sudoers.d/ubuntu \n\n\nAnd add this.\n\nubuntu ALL=(ALL) NOPASSWD: ALL\n\n\nI would recommend using LXDE window manager, its much more lightweight compared\nto Unity.\n\nsudo apt-get install lxde\n\n\nTo use it, logout and login again but this time select LXDE on login screen.\n\nTo have user ubuntu  login automatically do this.\n\nsudo apt-get install gnome-system-tools\n\n\nIn LXDE menu, go to preferences / users and groups.\nSelect checkbox Dont ask for password on login.\n\n\nTo disable screensaver go to preferences / screensaver  and select mode Disable\nScreensaver","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-15T15:00:51.000Z","created_by":"2","updated_at":"2014-10-04T14:01:56.000Z","updated_by":"1","published_at":"2013-12-15T15:59:26.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869b","uuid":"9366cb09-05cb-4207-806a-f0651b83dde1","title":"FindFilm.se -  Netflix from A to Z, and more =)","slug":"findfilm-se-netflix-from-a-to-z-and-more","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I grew tired of the way Netflix is categorizing movies. I wanted to browse them alphabetically. I also wanted to find the movies that were recently added to Netflix. So I created [Findfilm.se](http://findfilm.se/), it has these features and it also includes movies from HeadWeb and ViaPlay. Enjoy =) And by the way: det är bara på Svenska =)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I grew tired of the way Netflix is categorizing movies. I wanted to browse them alphabetically. I also wanted to find the movies that were recently added to Netflix. So I created <a href=\"http://findfilm.se/\">Findfilm.se</a>, it has these features and it also includes movies from HeadWeb and ViaPlay. Enjoy =) And by the way: det är bara på Svenska =)</p>\n</div>","amp":"14","plaintext":"I grew tired of the way Netflix is categorizing movies. I wanted to browse them\nalphabetically. I also wanted to find the movies that were recently added to\nNetflix. So I created Findfilm.se [http://findfilm.se/], it has these features\nand it also includes movies from HeadWeb and ViaPlay. Enjoy =) And by the way:\ndet är bara på Svenska =)","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-10-04T13:38:48.000Z","created_by":"2","updated_at":"2014-10-05T23:58:28.000Z","updated_by":"1","published_at":"2014-10-04T13:38:48.000Z","published_by":"2","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869c","uuid":"e6587c5b-340f-4f25-b7d5-335ecf507e55","title":"Nu Validator offline implementation","slug":"nu-validator-offline-implementation","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I struggled alot before I got this working. In my case I want to validate a webpage, as HTML5, using a Jenkins job. I dont want to have to deploy anything to do the validation, just use a library and do it all offline.\\n\\nI found [Nu Validator](https://validator.nu/) which seems to be working great. Started looking for its implementation, its Java, great! =)\\n\\nStarted looking into the code, trying to figure out how to use it... It is very unclear and after some googling I found out that I'm definitly not alone with that opinion.\\n\\nI came up with a great solution that I'd like to share.\\n\\nThere is a WAR in the release. It contains an API. Basically I am using Jetty to start a tiny webserver, deploying the WAR in it, invoking the API and stopping the server.\\n\\nCheck it out at [GitHub](https://github.com/tomasbjerre/validatortest)!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I struggled alot before I got this working. In my case I want to validate a webpage, as HTML5, using a Jenkins job. I dont want to have to deploy anything to do the validation, just use a library and do it all offline.</p>\n<p>I found <a href=\"https://validator.nu/\">Nu Validator</a> which seems to be working great. Started looking for its implementation, its Java, great! =)</p>\n<p>Started looking into the code, trying to figure out how to use it... It is very unclear and after some googling I found out that I'm definitly not alone with that opinion.</p>\n<p>I came up with a great solution that I'd like to share.</p>\n<p>There is a WAR in the release. It contains an API. Basically I am using Jetty to start a tiny webserver, deploying the WAR in it, invoking the API and stopping the server.</p>\n<p>Check it out at <a href=\"https://github.com/tomasbjerre/validatortest\">GitHub</a>!</p>\n</div>","amp":"15","plaintext":"I struggled alot before I got this working. In my case I want to validate a\nwebpage, as HTML5, using a Jenkins job. I dont want to have to deploy anything\nto do the validation, just use a library and do it all offline.\n\nI found Nu Validator [https://validator.nu/]  which seems to be working great.\nStarted looking for its implementation, its Java, great! =)\n\nStarted looking into the code, trying to figure out how to use it... It is very\nunclear and after some googling I found out that I'm definitly not alone with\nthat opinion.\n\nI came up with a great solution that I'd like to share.\n\nThere is a WAR in the release. It contains an API. Basically I am using Jetty to\nstart a tiny webserver, deploying the WAR in it, invoking the API and stopping\nthe server.\n\nCheck it out at GitHub [https://github.com/tomasbjerre/validatortest]!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-11-20T22:48:30.000Z","created_by":"1","updated_at":"2014-11-22T07:31:46.000Z","updated_by":"1","published_at":"2014-11-20T22:48:30.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869d","uuid":"59207a29-a2aa-4e7b-977d-9e2a36e99eb0","title":"Web Traffic Simulator","slug":"web-traffic-simulator","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've started working on this test/monitoring tool. The initial idea was that I wanted to simulate having some visitors on the webpage I was working on. That is in the test environment, not available on the Internet.\\n\\nThen I came accross a tool, [SiteImprove](http://siteimprove.se/), that helps editor find spelling errors, dead links, unwanted texts like \\\"lorum ipsum\\\"... so those use cases were also added.\\n\\nIt is an ongoing project. Implemented as a core, which is basically a crawler, and plugins that can listen to the core, or each other. There will be some plugins in the initial release, for HTML validation and spell checking for example. Any user can easily write his or her own plugins.\\n\\nCheck it out at [GitHub](https://github.com/web-traffic-simulator/web-traffic-simulator) =)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I've started working on this test/monitoring tool. The initial idea was that I wanted to simulate having some visitors on the webpage I was working on. That is in the test environment, not available on the Internet.</p>\n<p>Then I came accross a tool, <a href=\"http://siteimprove.se/\">SiteImprove</a>, that helps editor find spelling errors, dead links, unwanted texts like &quot;lorum ipsum&quot;... so those use cases were also added.</p>\n<p>It is an ongoing project. Implemented as a core, which is basically a crawler, and plugins that can listen to the core, or each other. There will be some plugins in the initial release, for HTML validation and spell checking for example. Any user can easily write his or her own plugins.</p>\n<p>Check it out at <a href=\"https://github.com/web-traffic-simulator/web-traffic-simulator\">GitHub</a> =)</p>\n</div>","amp":"16","plaintext":"I've started working on this test/monitoring tool. The initial idea was that I\nwanted to simulate having some visitors on the webpage I was working on. That is\nin the test environment, not available on the Internet.\n\nThen I came accross a tool, SiteImprove [http://siteimprove.se/], that helps\neditor find spelling errors, dead links, unwanted texts like \"lorum ipsum\"... so\nthose use cases were also added.\n\nIt is an ongoing project. Implemented as a core, which is basically a crawler,\nand plugins that can listen to the core, or each other. There will be some\nplugins in the initial release, for HTML validation and spell checking for\nexample. Any user can easily write his or her own plugins.\n\nCheck it out at GitHub\n[https://github.com/web-traffic-simulator/web-traffic-simulator]  =)","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-12-09T22:11:14.000Z","created_by":"1","updated_at":"2014-12-16T20:39:15.000Z","updated_by":"1","published_at":"2014-12-09T22:11:14.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869e","uuid":"1086957f-b0ba-40eb-bac3-978cec5a4923","title":"Building Atlassian Stash pull requests in Jenkins","slug":"building-atlassian-stash-pull-requests-in-jenkins","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Update 160912: There is a [new post here](http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/).\\n\\nWe are just about to introduce pull requests at my current position. We are using Git with Atlassian Stash and Jenkins. We want to verify that the pull requests:\\n\\n* Compile\\n* Does not break any test cases\\n* Can be merged to target branch\\n* Compiles after merge\\n* Does not break test cases after merge\\n\\nAfter some Googling around the issue I found no solution, so I tought I'd make a post about how I solved it.\\n\\n# Verifying source of the pull request\\nThere is a really nice plugin for Jenkins [Stash Notifier Plugin](https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin) that can be used to notify Stash of the status of a build. Enable it on any Jenkins job that builds the branch you are merging from. It will add an icon and a link to Jenkins in the pull request view of Stash.\\n\\n# Discovering new pull requests\\nI initially solved this with a Jenkins job that is polling Stash for new pull requests. But polling is never good so I created a Stash plugin that will notify Jenkins about new pull requests.\\n\\n## Pull Request Notifier Plugin for Stash\\nThe plugin is available in [Atlassian Marketplace](https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash) and at [GitHub](https://github.com/tomasbjerre/pull-request-notifier-for-stash). When installed, you will have this configuration GUI.\\n\\n![pull-request-notifier-for-stash](/content/images/2015/04/variables.png)\\n\\nThe features include:\\n\\n* Trigger on one, or several, event(s) regarding pull requests.\\n* Invoke one, or several, URL(s) when event(s) are triggered.\\n * Optionally with *basic authentication* headers.\\n * Completely custom URL supporting variable parameters\\n     * ${PULL\\\\_REQUEST\\\\_ID} Example: 1\\n     * ${PULL\\\\_REQUEST\\\\_ACTION} Example: OPENED\\n     * ${PULL\\\\_REQUEST\\\\_AUTHOR\\\\_DISPLAY\\\\_NAME} Example: Administrator\\n     * ${PULL\\\\_REQUEST\\\\_AUTHOR\\\\_EMAIL} Example: admin@example.com\\n     * ${PULL\\\\_REQUEST\\\\_AUTHOR\\\\_ID} Example: 1\\n     * ${PULL\\\\_REQUEST\\\\_AUTHOR\\\\_NAME} Example: admin\\n     * ${PULL\\\\_REQUEST\\\\_AUTHOR\\\\_SLUG} Example: admin\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_HASH} Example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_ID} Example: refs/heads/branch_mod_merge\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_REPO\\\\_ID} Example: 1\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_REPO\\\\_NAME} Example: rep\\\\_1\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_REPO\\\\_PROJECT\\\\_ID} Example: 1\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_REPO\\\\_PROJECT\\\\_KEY} Example: PROJECT\\\\_1\\n     * ${PULL\\\\_REQUEST\\\\_FROM\\\\_REPO\\\\_SLUG} Example: rep\\\\_1\\n     * And same variables for TO, like: ${PULL\\\\_REQUEST\\\\_TO\\\\_HASH}\\n\\nYou can have several notifications and have them trigger different URL:s. If you trigger Jenkins builds, you may want each repo to have its own build job in Jenkins. The filtering functionality is highly configurable. Create a string with the variables and then a regexp that should match that string.\\n![pull-request-notifier-for-stash-filter](/content/images/2015/04/filter_branch_crop.png)\\n\\n## Polling Jenkins with Groovy script\\nNote that you should only do it this way if you cannot use the plugin described above! For example, uou may not have enaugh access to Stash to install plugins.\\n\\nStash has really nice [REST API:s](https://developer.atlassian.com/static/rest/stash/3.6.1/stash-rest.html). I created a scheduled job in Jenkins that runs every 5 minutes. I implemented it in Groovy using the [Groovy plugin](https://wiki.jenkins-ci.org/display/JENKINS/Groovy+plugin).\\n\\n* Find all repos: http://stash/rest/api/1.0/projects/PROJECTS/repos/\\n* Find all pull requests in a repo: http://stash/rest/api/1.0/projects/PROJECTS/repos/\\\"+repo.slug+\\\"/pull-requests?base&details&filterText&orderBy\\n\\n```\\nString summary = \\\"\\\"\\nint newPullRequests = 0;\\nFile previousPullRequests = new File(\\\"/ci/lib/jenkins/workspace/Pull Request Poller/previousPullRequests.txt\\\")\\n\\nString getJson(String addr) {\\n manager.listener.logger.println(\\\"Getting URL: \\\"+addr)\\n def authString = \\\"user:pass\\\".getBytes().encodeBase64().toString()\\n java.net.URLConnection conn = addr.toURL().openConnection()\\n conn.setRequestProperty( \\\"Authorization\\\", \\\"Basic ${authString}\\\" )\\n conn.connect()\\n def reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))\\n def stringBuilder = new StringBuilder()\\n String line = null\\n while ((line = reader.readLine()) != null) {\\n  stringBuilder.append(line + \\\"\\\\n\\\")\\n }\\n String json = groovy.json.JsonOutput.prettyPrint(stringBuilder.toString())\\n manager.listener.logger.println(\\\"Got response:\\\\n\\\"+json)\\n return json\\n}\\n\\nnew groovy.json.JsonSlurper().parseText(getJson(\\\"http://stash/rest/api/1.0/projects/PROJECTS/repos/\\\")).values.each { repo ->\\n manager.listener.logger.println(\\\"Repo: \\\"+repo.slug)\\n\\n String prettyJSON = getJson(\\\"http://stash/rest/api/1.0/projects/PROJECTS/repos/\\\"+repo.slug+\\\"/pull-requests?base&details&filterText&orderBy\\\")\\n def jsonData = new groovy.json.JsonSlurper().parseText(prettyJSON);\\n jsonData.values.each { value ->\\n  String title = value.title\\n  String from = value.fromRef.latestChangeset\\n  String fromRepo = value.fromRef.repository.links.clone.find { it.name == \\\"ssh\\\" }.href\\n  String to = value.toRef.latestChangeset\\n  String toRepo = value.toRef.repository.links.clone.find { it.name == \\\"ssh\\\" }.href\\n  String repositorySlug = repo.slug\\n  String pullRequestId = value.id\\n  String requestUrl =  \\\"http://stash/projects/PROJECTS/repos/\\\"+repositorySlug+\\\"/pull-requests/\\\"+pullRequestId+\\\"/overview\\\"\\n\\n  //Remember that this request has been triggered, and avoid triggering it again\\n  String identifier = from+\\\" \\\"+to\\n  if (previousPullRequests.text.contains(identifier)) {\\n   manager.listener.logger.println(\\\"Ignoring: \\\"+identifier)\\n   return;\\n  }\\n  previousPullRequests.append(identifier+\\\"\\\\n\\\")\\n\\n  //Trigger a jenkins job that will verify the pull request\\n  String invokeBuildUrl = \\\"http://jenkins/job/Pull%20Request%20Builder/buildWithParameters?token=SECRET_CONFIGURED_IN_BUILD&FROM=\\\"+from+\\\"&TO=\\\"+to+\\\"&FROMREPO=\\\"+fromRepo+\\\"&TOREPO=\\\"+toRepo+\\\"&REPOSITORY_SLUG=\\\"+repositorySlug+\\\"&PULL_REQUEST_ID=\\\"+pullRequestId\\n  manager.listener.logger.println(invokeBuildUrl)\\n  new URL(invokeBuildUrl).getText()\\n\\n  summary += \\\"<h1>\\\"+title+\\\"</h1><br><a href='\\\"+requestUrl+\\\"'>\\\"+requestUrl+\\\"</a><br>From: \\\"+jsonData.values[0].fromRef.id+\\\" (\\\"+from+\\\") in \\\"+fromRepo+\\\"<br>To: \\\"+jsonData.values[0].toRef.id+\\\" (\\\"+to+\\\") in \\\"+toRepo+\\\"<br><a href='\\\"+invokeBuildUrl+\\\"'>\\\"+invokeBuildUrl+\\\"</a><hr>\\\"\\n  newPullRequests++;\\n }\\n}\\n\\n//Add some info to the build\\nif (newPullRequests == 0) {\\n manager.createSummary(\\\"gear2.gif\\\").appendText(\\\"<h1>No new pull requests found!</h1>\\\" , false)\\n} else {\\n manager.addShortText(\\\"+\\\"+newPullRequests, \\\"grey\\\", \\\"white\\\", \\\"0px\\\", \\\"white\\\")\\n manager.createSummary(\\\"gear2.gif\\\").appendText(summary , false)\\n}\\n```\\n\\n# Merging and building the pull request\\nI created a parameterized job to merge the pull request from source branch to target branch. It takes *FROM_HASH*, *FROM_REPO*, *TO_HASH*, *TO_REPO*, *REPOSITORY_SLUG* and *PULL_REQUEST_ID* as parameters.\\n\\nThe job has a build step *execute shell* that does the actual verification.\\n\\n```\\ngit clone $TO_REPO\\ncd *\\ngit reset --hard $TO_HASH\\ngit status\\ngit remote add from $FROM_REPO\\ngit fetch from\\ngit merge $FROM_HASH\\ngit --no-pager log --max-count=10 --graph --abbrev-commit\\n\\n#compile command here ...\\n```\\n\\nThe job uses the [Stash Notifier Plugin](https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin) to record result in the pull request in Stash. Use the ${FROM_HASH} variable to get the build status reported correctly in the pull request in Stash.\\n\\nIt adds a comment to the pull request, like this.\\n\\n```\\ncurl -D- -u user:pass -X POST -H \\\"Content-Type: application/json\\\"  --data \\\"{ \\\\\\\"text\\\\\\\": \\\\\\\"Looking good :) http://jenkins/job/Pull%20Request%20Builder/${BUILD_NUMBER}/\\\\\\\" }\\\" http://stash/rest/api/1.0/projects/PROJECT/repos/$REPOSITORY_SLUG/pull-requests/$PULL_REQUEST_ID/comments\\n```\\n\\n# Static code analyzers\\nIf you are using static code analyzers you may want to have a look at [Jenkins Violation Comments to Stash Plugin](https://github.com/jenkinsci/jenkins-violation-comments-to-stash-plugin) for Jenkins.\\n\\nIt is configured like this.\\n\\n![alt](/content/images/2015/05/screenshot-config.png)\\n\\nAnd will comment the pull requests like this.\\n\\n![alt](/content/images/2015/05/screenshot-stash.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Update 160912: There is a <a href=\"http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/\">new post here</a>.</p>\n<p>We are just about to introduce pull requests at my current position. We are using Git with Atlassian Stash and Jenkins. We want to verify that the pull requests:</p>\n<ul>\n<li>Compile</li>\n<li>Does not break any test cases</li>\n<li>Can be merged to target branch</li>\n<li>Compiles after merge</li>\n<li>Does not break test cases after merge</li>\n</ul>\n<p>After some Googling around the issue I found no solution, so I tought I'd make a post about how I solved it.</p>\n<h1 id=\"verifyingsourceofthepullrequest\">Verifying source of the pull request</h1>\n<p>There is a really nice plugin for Jenkins <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin\">Stash Notifier Plugin</a> that can be used to notify Stash of the status of a build. Enable it on any Jenkins job that builds the branch you are merging from. It will add an icon and a link to Jenkins in the pull request view of Stash.</p>\n<h1 id=\"discoveringnewpullrequests\">Discovering new pull requests</h1>\n<p>I initially solved this with a Jenkins job that is polling Stash for new pull requests. But polling is never good so I created a Stash plugin that will notify Jenkins about new pull requests.</p>\n<h2 id=\"pullrequestnotifierpluginforstash\">Pull Request Notifier Plugin for Stash</h2>\n<p>The plugin is available in <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash\">Atlassian Marketplace</a> and at <a href=\"https://github.com/tomasbjerre/pull-request-notifier-for-stash\">GitHub</a>. When installed, you will have this configuration GUI.</p>\n<p><img src=\"/content/images/2015/04/variables.png\" alt=\"pull-request-notifier-for-stash\"></p>\n<p>The features include:</p>\n<ul>\n<li>Trigger on one, or several, event(s) regarding pull requests.</li>\n<li>Invoke one, or several, URL(s) when event(s) are triggered.</li>\n<li>Optionally with <em>basic authentication</em> headers.</li>\n<li>Completely custom URL supporting variable parameters\n<ul>\n<li>${PULL_REQUEST_ID} Example: 1</li>\n<li>${PULL_REQUEST_ACTION} Example: OPENED</li>\n<li>${PULL_REQUEST_AUTHOR_DISPLAY_NAME} Example: Administrator</li>\n<li>${PULL_REQUEST_AUTHOR_EMAIL} Example: <a href=\"mailto:admin@example.com\">admin@example.com</a></li>\n<li>${PULL_REQUEST_AUTHOR_ID} Example: 1</li>\n<li>${PULL_REQUEST_AUTHOR_NAME} Example: admin</li>\n<li>${PULL_REQUEST_AUTHOR_SLUG} Example: admin</li>\n<li>${PULL_REQUEST_FROM_HASH} Example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad</li>\n<li>${PULL_REQUEST_FROM_ID} Example: refs/heads/branch_mod_merge</li>\n<li>${PULL_REQUEST_FROM_REPO_ID} Example: 1</li>\n<li>${PULL_REQUEST_FROM_REPO_NAME} Example: rep_1</li>\n<li>${PULL_REQUEST_FROM_REPO_PROJECT_ID} Example: 1</li>\n<li>${PULL_REQUEST_FROM_REPO_PROJECT_KEY} Example: PROJECT_1</li>\n<li>${PULL_REQUEST_FROM_REPO_SLUG} Example: rep_1</li>\n<li>And same variables for TO, like: ${PULL_REQUEST_TO_HASH}</li>\n</ul>\n</li>\n</ul>\n<p>You can have several notifications and have them trigger different URL:s. If you trigger Jenkins builds, you may want each repo to have its own build job in Jenkins. The filtering functionality is highly configurable. Create a string with the variables and then a regexp that should match that string.<br>\n<img src=\"/content/images/2015/04/filter_branch_crop.png\" alt=\"pull-request-notifier-for-stash-filter\"></p>\n<h2 id=\"pollingjenkinswithgroovyscript\">Polling Jenkins with Groovy script</h2>\n<p>Note that you should only do it this way if you cannot use the plugin described above! For example, uou may not have enaugh access to Stash to install plugins.</p>\n<p>Stash has really nice <a href=\"https://developer.atlassian.com/static/rest/stash/3.6.1/stash-rest.html\">REST API:s</a>. I created a scheduled job in Jenkins that runs every 5 minutes. I implemented it in Groovy using the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Groovy+plugin\">Groovy plugin</a>.</p>\n<ul>\n<li>Find all repos: <a href=\"http://stash/rest/api/1.0/projects/PROJECTS/repos/\">http://stash/rest/api/1.0/projects/PROJECTS/repos/</a></li>\n<li>Find all pull requests in a repo: <a href=\"http://stash/rest/api/1.0/projects/PROJECTS/repos/%22+repo.slug+%22/pull-requests?base&amp;details&amp;filterText&amp;orderBy\">http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;+repo.slug+&quot;/pull-requests?base&amp;details&amp;filterText&amp;orderBy</a></li>\n</ul>\n<pre><code>String summary = &quot;&quot;\nint newPullRequests = 0;\nFile previousPullRequests = new File(&quot;/ci/lib/jenkins/workspace/Pull Request Poller/previousPullRequests.txt&quot;)\n\nString getJson(String addr) {\n manager.listener.logger.println(&quot;Getting URL: &quot;+addr)\n def authString = &quot;user:pass&quot;.getBytes().encodeBase64().toString()\n java.net.URLConnection conn = addr.toURL().openConnection()\n conn.setRequestProperty( &quot;Authorization&quot;, &quot;Basic ${authString}&quot; )\n conn.connect()\n def reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))\n def stringBuilder = new StringBuilder()\n String line = null\n while ((line = reader.readLine()) != null) {\n  stringBuilder.append(line + &quot;\\n&quot;)\n }\n String json = groovy.json.JsonOutput.prettyPrint(stringBuilder.toString())\n manager.listener.logger.println(&quot;Got response:\\n&quot;+json)\n return json\n}\n\nnew groovy.json.JsonSlurper().parseText(getJson(&quot;http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;)).values.each { repo -&gt;\n manager.listener.logger.println(&quot;Repo: &quot;+repo.slug)\n\n String prettyJSON = getJson(&quot;http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;+repo.slug+&quot;/pull-requests?base&amp;details&amp;filterText&amp;orderBy&quot;)\n def jsonData = new groovy.json.JsonSlurper().parseText(prettyJSON);\n jsonData.values.each { value -&gt;\n  String title = value.title\n  String from = value.fromRef.latestChangeset\n  String fromRepo = value.fromRef.repository.links.clone.find { it.name == &quot;ssh&quot; }.href\n  String to = value.toRef.latestChangeset\n  String toRepo = value.toRef.repository.links.clone.find { it.name == &quot;ssh&quot; }.href\n  String repositorySlug = repo.slug\n  String pullRequestId = value.id\n  String requestUrl =  &quot;http://stash/projects/PROJECTS/repos/&quot;+repositorySlug+&quot;/pull-requests/&quot;+pullRequestId+&quot;/overview&quot;\n\n  //Remember that this request has been triggered, and avoid triggering it again\n  String identifier = from+&quot; &quot;+to\n  if (previousPullRequests.text.contains(identifier)) {\n   manager.listener.logger.println(&quot;Ignoring: &quot;+identifier)\n   return;\n  }\n  previousPullRequests.append(identifier+&quot;\\n&quot;)\n\n  //Trigger a jenkins job that will verify the pull request\n  String invokeBuildUrl = &quot;http://jenkins/job/Pull%20Request%20Builder/buildWithParameters?token=SECRET_CONFIGURED_IN_BUILD&amp;FROM=&quot;+from+&quot;&amp;TO=&quot;+to+&quot;&amp;FROMREPO=&quot;+fromRepo+&quot;&amp;TOREPO=&quot;+toRepo+&quot;&amp;REPOSITORY_SLUG=&quot;+repositorySlug+&quot;&amp;PULL_REQUEST_ID=&quot;+pullRequestId\n  manager.listener.logger.println(invokeBuildUrl)\n  new URL(invokeBuildUrl).getText()\n\n  summary += &quot;&lt;h1&gt;&quot;+title+&quot;&lt;/h1&gt;&lt;br&gt;&lt;a href='&quot;+requestUrl+&quot;'&gt;&quot;+requestUrl+&quot;&lt;/a&gt;&lt;br&gt;From: &quot;+jsonData.values[0].fromRef.id+&quot; (&quot;+from+&quot;) in &quot;+fromRepo+&quot;&lt;br&gt;To: &quot;+jsonData.values[0].toRef.id+&quot; (&quot;+to+&quot;) in &quot;+toRepo+&quot;&lt;br&gt;&lt;a href='&quot;+invokeBuildUrl+&quot;'&gt;&quot;+invokeBuildUrl+&quot;&lt;/a&gt;&lt;hr&gt;&quot;\n  newPullRequests++;\n }\n}\n\n//Add some info to the build\nif (newPullRequests == 0) {\n manager.createSummary(&quot;gear2.gif&quot;).appendText(&quot;&lt;h1&gt;No new pull requests found!&lt;/h1&gt;&quot; , false)\n} else {\n manager.addShortText(&quot;+&quot;+newPullRequests, &quot;grey&quot;, &quot;white&quot;, &quot;0px&quot;, &quot;white&quot;)\n manager.createSummary(&quot;gear2.gif&quot;).appendText(summary , false)\n}\n</code></pre>\n<h1 id=\"mergingandbuildingthepullrequest\">Merging and building the pull request</h1>\n<p>I created a parameterized job to merge the pull request from source branch to target branch. It takes <em>FROM_HASH</em>, <em>FROM_REPO</em>, <em>TO_HASH</em>, <em>TO_REPO</em>, <em>REPOSITORY_SLUG</em> and <em>PULL_REQUEST_ID</em> as parameters.</p>\n<p>The job has a build step <em>execute shell</em> that does the actual verification.</p>\n<pre><code>git clone $TO_REPO\ncd *\ngit reset --hard $TO_HASH\ngit status\ngit remote add from $FROM_REPO\ngit fetch from\ngit merge $FROM_HASH\ngit --no-pager log --max-count=10 --graph --abbrev-commit\n\n#compile command here ...\n</code></pre>\n<p>The job uses the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin\">Stash Notifier Plugin</a> to record result in the pull request in Stash. Use the ${FROM_HASH} variable to get the build status reported correctly in the pull request in Stash.</p>\n<p>It adds a comment to the pull request, like this.</p>\n<pre><code>curl -D- -u user:pass -X POST -H &quot;Content-Type: application/json&quot;  --data &quot;{ \\&quot;text\\&quot;: \\&quot;Looking good :) http://jenkins/job/Pull%20Request%20Builder/${BUILD_NUMBER}/\\&quot; }&quot; http://stash/rest/api/1.0/projects/PROJECT/repos/$REPOSITORY_SLUG/pull-requests/$PULL_REQUEST_ID/comments\n</code></pre>\n<h1 id=\"staticcodeanalyzers\">Static code analyzers</h1>\n<p>If you are using static code analyzers you may want to have a look at <a href=\"https://github.com/jenkinsci/jenkins-violation-comments-to-stash-plugin\">Jenkins Violation Comments to Stash Plugin</a> for Jenkins.</p>\n<p>It is configured like this.</p>\n<p><img src=\"/content/images/2015/05/screenshot-config.png\" alt=\"alt\"></p>\n<p>And will comment the pull requests like this.</p>\n<p><img src=\"/content/images/2015/05/screenshot-stash.png\" alt=\"alt\"></p>\n</div>","amp":"18","plaintext":"Update 160912: There is a new post here\n[http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/].\n\nWe are just about to introduce pull requests at my current position. We are\nusing Git with Atlassian Stash and Jenkins. We want to verify that the pull\nrequests:\n\n * Compile\n * Does not break any test cases\n * Can be merged to target branch\n * Compiles after merge\n * Does not break test cases after merge\n\nAfter some Googling around the issue I found no solution, so I tought I'd make a\npost about how I solved it.\n\nVerifying source of the pull request\nThere is a really nice plugin for Jenkins Stash Notifier Plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin]  that can be\nused to notify Stash of the status of a build. Enable it on any Jenkins job that\nbuilds the branch you are merging from. It will add an icon and a link to\nJenkins in the pull request view of Stash.\n\nDiscovering new pull requests\nI initially solved this with a Jenkins job that is polling Stash for new pull\nrequests. But polling is never good so I created a Stash plugin that will notify\nJenkins about new pull requests.\n\nPull Request Notifier Plugin for Stash\nThe plugin is available in Atlassian Marketplace\n[https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash] \n and at GitHub [https://github.com/tomasbjerre/pull-request-notifier-for-stash].\nWhen installed, you will have this configuration GUI.\n\n\n\nThe features include:\n\n * Trigger on one, or several, event(s) regarding pull requests.\n * Invoke one, or several, URL(s) when event(s) are triggered.\n * Optionally with basic authentication  headers.\n * Completely custom URL supporting variable parameters * ${PULL_REQUEST_ID}\n      Example: 1\n    * ${PULL_REQUEST_ACTION}\n      Example: OPENED\n    * \n      ${PULL_REQUEST_AUTHOR_DISPLAY_NAME} Example: Administrator\n    * \n      ${PULL_REQUEST_AUTHOR_EMAIL} Example: admin@example.com\n    * \n      ${PULL_REQUEST_AUTHOR_ID} Example: 1\n    * \n      ${PULL_REQUEST_AUTHOR_NAME} Example: admin\n    * \n      ${PULL_REQUEST_AUTHOR_SLUG} Example: admin\n    * \n      ${PULL_REQUEST_FROM_HASH} Example:\n      6053a1eaa1c009dd11092d09a72f3c41af1b59ad\n    * \n      ${PULL_REQUEST_FROM_ID} Example: refs/heads/branch_mod_merge\n    * \n      ${PULL_REQUEST_FROM_REPO_ID} Example: 1\n    * \n      ${PULL_REQUEST_FROM_REPO_NAME} Example: rep_1\n    * \n      ${PULL_REQUEST_FROM_REPO_PROJECT_ID} Example: 1\n    * \n      ${PULL_REQUEST_FROM_REPO_PROJECT_KEY} Example: PROJECT_1\n    * \n      ${PULL_REQUEST_FROM_REPO_SLUG} Example: rep_1\n    * And same variables for\n      TO, like: ${PULL_REQUEST_TO_HASH}\n   \n   \n\nYou can have several notifications and have them trigger different URL:s. If you\ntrigger Jenkins builds, you may want each repo to have its own build job in\nJenkins. The filtering functionality is highly configurable. Create a string\nwith the variables and then a regexp that should match that string.\n\n\nPolling Jenkins with Groovy script\nNote that you should only do it this way if you cannot use the plugin described\nabove! For example, uou may not have enaugh access to Stash to install plugins.\n\nStash has really nice REST API:s\n[https://developer.atlassian.com/static/rest/stash/3.6.1/stash-rest.html]. I\ncreated a scheduled job in Jenkins that runs every 5 minutes. I implemented it\nin Groovy using the Groovy plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/Groovy+plugin].\n\n * Find all repos: http://stash/rest/api/1.0/projects/PROJECTS/repos/\n * Find all pull requests in a repo: \n   http://stash/rest/api/1.0/projects/PROJECTS/repos/\"+repo.slug+\"/pull-requests?base&details&filterText&orderBy\n   [http://stash/rest/api/1.0/projects/PROJECTS/repos/%22+repo.slug+%22/pull-requests?base&details&filterText&orderBy]\n\nString summary = \"\"\nint newPullRequests = 0;\nFile previousPullRequests = new File(\"/ci/lib/jenkins/workspace/Pull Request Poller/previousPullRequests.txt\")\n\nString getJson(String addr) {\n manager.listener.logger.println(\"Getting URL: \"+addr)\n def authString = \"user:pass\".getBytes().encodeBase64().toString()\n java.net.URLConnection conn = addr.toURL().openConnection()\n conn.setRequestProperty( \"Authorization\", \"Basic ${authString}\" )\n conn.connect()\n def reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))\n def stringBuilder = new StringBuilder()\n String line = null\n while ((line = reader.readLine()) != null) {\n  stringBuilder.append(line + \"\\n\")\n }\n String json = groovy.json.JsonOutput.prettyPrint(stringBuilder.toString())\n manager.listener.logger.println(\"Got response:\\n\"+json)\n return json\n}\n\nnew groovy.json.JsonSlurper().parseText(getJson(\"http://stash/rest/api/1.0/projects/PROJECTS/repos/\")).values.each { repo ->\n manager.listener.logger.println(\"Repo: \"+repo.slug)\n\n String prettyJSON = getJson(\"http://stash/rest/api/1.0/projects/PROJECTS/repos/\"+repo.slug+\"/pull-requests?base&details&filterText&orderBy\")\n def jsonData = new groovy.json.JsonSlurper().parseText(prettyJSON);\n jsonData.values.each { value ->\n  String title = value.title\n  String from = value.fromRef.latestChangeset\n  String fromRepo = value.fromRef.repository.links.clone.find { it.name == \"ssh\" }.href\n  String to = value.toRef.latestChangeset\n  String toRepo = value.toRef.repository.links.clone.find { it.name == \"ssh\" }.href\n  String repositorySlug = repo.slug\n  String pullRequestId = value.id\n  String requestUrl =  \"http://stash/projects/PROJECTS/repos/\"+repositorySlug+\"/pull-requests/\"+pullRequestId+\"/overview\"\n\n  //Remember that this request has been triggered, and avoid triggering it again\n  String identifier = from+\" \"+to\n  if (previousPullRequests.text.contains(identifier)) {\n   manager.listener.logger.println(\"Ignoring: \"+identifier)\n   return;\n  }\n  previousPullRequests.append(identifier+\"\\n\")\n\n  //Trigger a jenkins job that will verify the pull request\n  String invokeBuildUrl = \"http://jenkins/job/Pull%20Request%20Builder/buildWithParameters?token=SECRET_CONFIGURED_IN_BUILD&FROM=\"+from+\"&TO=\"+to+\"&FROMREPO=\"+fromRepo+\"&TOREPO=\"+toRepo+\"&REPOSITORY_SLUG=\"+repositorySlug+\"&PULL_REQUEST_ID=\"+pullRequestId\n  manager.listener.logger.println(invokeBuildUrl)\n  new URL(invokeBuildUrl).getText()\n\n  summary += \"<h1>\"+title+\"</h1><br><a href='\"+requestUrl+\"'>\"+requestUrl+\"</a><br>From: \"+jsonData.values[0].fromRef.id+\" (\"+from+\") in \"+fromRepo+\"<br>To: \"+jsonData.values[0].toRef.id+\" (\"+to+\") in \"+toRepo+\"<br><a href='\"+invokeBuildUrl+\"'>\"+invokeBuildUrl+\"</a><hr>\"\n  newPullRequests++;\n }\n}\n\n//Add some info to the build\nif (newPullRequests == 0) {\n manager.createSummary(\"gear2.gif\").appendText(\"<h1>No new pull requests found!</h1>\" , false)\n} else {\n manager.addShortText(\"+\"+newPullRequests, \"grey\", \"white\", \"0px\", \"white\")\n manager.createSummary(\"gear2.gif\").appendText(summary , false)\n}\n\n\nMerging and building the pull request\nI created a parameterized job to merge the pull request from source branch to\ntarget branch. It takes FROM_HASH, FROM_REPO, TO_HASH, TO_REPO, REPOSITORY_SLUG \nand PULL_REQUEST_ID  as parameters.\n\nThe job has a build step execute shell  that does the actual verification.\n\ngit clone $TO_REPO\ncd *\ngit reset --hard $TO_HASH\ngit status\ngit remote add from $FROM_REPO\ngit fetch from\ngit merge $FROM_HASH\ngit --no-pager log --max-count=10 --graph --abbrev-commit\n\n#compile command here ...\n\n\nThe job uses the Stash Notifier Plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin]  to record\nresult in the pull request in Stash. Use the ${FROM_HASH} variable to get the\nbuild status reported correctly in the pull request in Stash.\n\nIt adds a comment to the pull request, like this.\n\ncurl -D- -u user:pass -X POST -H \"Content-Type: application/json\"  --data \"{ \\\"text\\\": \\\"Looking good :) http://jenkins/job/Pull%20Request%20Builder/${BUILD_NUMBER}/\\\" }\" http://stash/rest/api/1.0/projects/PROJECT/repos/$REPOSITORY_SLUG/pull-requests/$PULL_REQUEST_ID/comments\n\n\nStatic code analyzers\nIf you are using static code analyzers you may want to have a look at Jenkins\nViolation Comments to Stash Plugin\n[https://github.com/jenkinsci/jenkins-violation-comments-to-stash-plugin]  for\nJenkins.\n\nIt is configured like this.\n\n\n\nAnd will comment the pull requests like this.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-02-18T16:25:34.000Z","created_by":"1","updated_at":"2017-03-18T19:18:18.000Z","updated_by":"1","published_at":"2015-02-18T16:25:34.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd91869f","uuid":"a29e716c-e305-4ad2-9a10-00bb44a0a545","title":"Simple Stash Commit Checker","slug":"simple-stash-commit-checker","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Update 160912: There is a [new post here](http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/).\\n\\nI'm currently working with a customer that has around 30 comitters working on the same code base. We are using Git with Atlassian Stash.\\n\\nReccently some code were released to production earlier then planned. Because of a faulty merge about 10 weeks earlier. This brings up the subject of commit comments. I started looking around for a good commit checker for Stash. I found mainly one problem with the existing hooks. It was not possible to customize messages shown to comitters when rejected.\\n\\nSo I created [Simple Stash Commit Checker](https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc). The code is available [here](https://github.com/tomasbjerre/simple-stash-commit-checker). It is highly configurable. For any rejection reason, there is a configurable response.\\n\\n![Config Email](/content/images/2015/03/config_and_reject.png)\\n\\nEmail and author can be checked against corresponding value in Stash.\\n\\n![Config Email](/content/images/2015/03/config.png)\\n\\nIf you enable this kind of plugin, the developers may need some time to adjust. Thats why I added a *dry run* mode. Where rejection messages are shown but no commits are actually rejected.\\n![Dry run](/content/images/2015/03/dry.png)\\n\\nIt is possible to add groups of restrictions. A group could be *Issues*. And rules in the groups. A rule could be, for example, *Jira* and/or *Incident*. And the group could state that at least one issue should be mentioned in the commit.\\n\\n![Groups](/content/images/2015/03/rules.png)\\n\\nThe group could also accept commits that does not contain some specific word. Some people like to write *fixing review comments* or *fixing sonar errors*. There could be a rule rejecting commits containing *sonar* or *review*. With a rejection reason like: *It is not relevant to mention that the changes were suggested by Sonar or from a review. It is relevant to mention what is actually changed and how that improves the code.*\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Update 160912: There is a <a href=\"http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/\">new post here</a>.</p>\n<p>I'm currently working with a customer that has around 30 comitters working on the same code base. We are using Git with Atlassian Stash.</p>\n<p>Reccently some code were released to production earlier then planned. Because of a faulty merge about 10 weeks earlier. This brings up the subject of commit comments. I started looking around for a good commit checker for Stash. I found mainly one problem with the existing hooks. It was not possible to customize messages shown to comitters when rejected.</p>\n<p>So I created <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc\">Simple Stash Commit Checker</a>. The code is available <a href=\"https://github.com/tomasbjerre/simple-stash-commit-checker\">here</a>. It is highly configurable. For any rejection reason, there is a configurable response.</p>\n<p><img src=\"/content/images/2015/03/config_and_reject.png\" alt=\"Config Email\"></p>\n<p>Email and author can be checked against corresponding value in Stash.</p>\n<p><img src=\"/content/images/2015/03/config.png\" alt=\"Config Email\"></p>\n<p>If you enable this kind of plugin, the developers may need some time to adjust. Thats why I added a <em>dry run</em> mode. Where rejection messages are shown but no commits are actually rejected.<br>\n<img src=\"/content/images/2015/03/dry.png\" alt=\"Dry run\"></p>\n<p>It is possible to add groups of restrictions. A group could be <em>Issues</em>. And rules in the groups. A rule could be, for example, <em>Jira</em> and/or <em>Incident</em>. And the group could state that at least one issue should be mentioned in the commit.</p>\n<p><img src=\"/content/images/2015/03/rules.png\" alt=\"Groups\"></p>\n<p>The group could also accept commits that does not contain some specific word. Some people like to write <em>fixing review comments</em> or <em>fixing sonar errors</em>. There could be a rule rejecting commits containing <em>sonar</em> or <em>review</em>. With a rejection reason like: <em>It is not relevant to mention that the changes were suggested by Sonar or from a review. It is relevant to mention what is actually changed and how that improves the code.</em></p>\n</div>","amp":"19","plaintext":"Update 160912: There is a new post here\n[http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/].\n\nI'm currently working with a customer that has around 30 comitters working on\nthe same code base. We are using Git with Atlassian Stash.\n\nReccently some code were released to production earlier then planned. Because of\na faulty merge about 10 weeks earlier. This brings up the subject of commit\ncomments. I started looking around for a good commit checker for Stash. I found\nmainly one problem with the existing hooks. It was not possible to customize\nmessages shown to comitters when rejected.\n\nSo I created Simple Stash Commit Checker\n[https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc]. The code is\navailable here [https://github.com/tomasbjerre/simple-stash-commit-checker]. It\nis highly configurable. For any rejection reason, there is a configurable\nresponse.\n\n\n\nEmail and author can be checked against corresponding value in Stash.\n\n\n\nIf you enable this kind of plugin, the developers may need some time to adjust.\nThats why I added a dry run  mode. Where rejection messages are shown but no\ncommits are actually rejected.\n\n\nIt is possible to add groups of restrictions. A group could be Issues. And rules\nin the groups. A rule could be, for example, Jira  and/or Incident. And the\ngroup could state that at least one issue should be mentioned in the commit.\n\n\n\nThe group could also accept commits that does not contain some specific word.\nSome people like to write fixing review comments  or fixing sonar errors. There\ncould be a rule rejecting commits containing sonar  or review. With a rejection\nreason like: It is not relevant to mention that the changes were suggested by\nSonar or from a review. It is relevant to mention what is actually changed and\nhow that improves the code.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-03-01T21:35:13.000Z","created_by":"1","updated_at":"2016-09-12T05:47:58.000Z","updated_by":"1","published_at":"2015-03-01T21:35:29.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a0","uuid":"8a156015-0dbe-49c2-b057-0c84319a9da7","title":"Ghost blog on GitHub pages","slug":"ghost-blog-on-github-pages","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"**Updated version here: https://bjurr.com/ghost-1-0-free-hosting-with-https/**\\n\\nI just moved this blog from a Raspberry PI to GitHub pages. I was inspired by [this](https://stefanscherer.github.io/setup-ghost-for-github-pages/) article. I am also using [Buster](https://pypi.python.org/pypi/buster/) but I am doing it a bit different. The repository is [here](https://github.com/tomasbjerre/tomasbjerre.github.io/).\\n\\nI get HTTPS with custom domain as described in [this](https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html) blog post.\\n\\nI put together some [scripts](https://github.com/tomasbjerre/tomasbjerre.github.io/tree/tools) to ease the blogging.\\n\\n * **install.sh** Downloads Ghost blogging platform and installs it in the current directory.\\n * **run.sh** Starts Ghost blogging platform on *localhost*. So that it can be edited.\\n * **commit.sh** Saves the blog and commits it to *master*. The **run.sh** script must be running when this script is invoked.\\n\\n**commit.sh** will create the *CNAME* file required if you want to use [your own domain name](https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/).\\n\\nThere will be 3 commits in the repo. The scripts will amend to these when changes are made. This is important to keep the repo small, it may grow very big, very fast if you don't amend.\\n```\\n*       (tools)  Blog maintenance\\n| *     (master)  Static blog content\\n|/  \\n*       Initial commit\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><strong>Updated version here: <a href=\"https://bjurr.com/ghost-1-0-free-hosting-with-https/\">https://bjurr.com/ghost-1-0-free-hosting-with-https/</a></strong></p>\n<p>I just moved this blog from a Raspberry PI to GitHub pages. I was inspired by <a href=\"https://stefanscherer.github.io/setup-ghost-for-github-pages/\">this</a> article. I am also using <a href=\"https://pypi.python.org/pypi/buster/\">Buster</a> but I am doing it a bit different. The repository is <a href=\"https://github.com/tomasbjerre/tomasbjerre.github.io/\">here</a>.</p>\n<p>I get HTTPS with custom domain as described in <a href=\"https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html\">this</a> blog post.</p>\n<p>I put together some <a href=\"https://github.com/tomasbjerre/tomasbjerre.github.io/tree/tools\">scripts</a> to ease the blogging.</p>\n<ul>\n<li><strong><a href=\"http://install.sh\">install.sh</a></strong> Downloads Ghost blogging platform and installs it in the current directory.</li>\n<li><strong><a href=\"http://run.sh\">run.sh</a></strong> Starts Ghost blogging platform on <em>localhost</em>. So that it can be edited.</li>\n<li><strong><a href=\"http://commit.sh\">commit.sh</a></strong> Saves the blog and commits it to <em>master</em>. The <strong><a href=\"http://run.sh\">run.sh</a></strong> script must be running when this script is invoked.</li>\n</ul>\n<p><strong><a href=\"http://commit.sh\">commit.sh</a></strong> will create the <em>CNAME</em> file required if you want to use <a href=\"https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/\">your own domain name</a>.</p>\n<p>There will be 3 commits in the repo. The scripts will amend to these when changes are made. This is important to keep the repo small, it may grow very big, very fast if you don't amend.</p>\n<pre><code>*       (tools)  Blog maintenance\n| *     (master)  Static blog content\n|/  \n*       Initial commit\n</code></pre>\n</div>","amp":"22","plaintext":"Updated version here: https://bjurr.com/ghost-1-0-free-hosting-with-https/\n\nI just moved this blog from a Raspberry PI to GitHub pages. I was inspired by \nthis [https://stefanscherer.github.io/setup-ghost-for-github-pages/]  article. I\nam also using Buster [https://pypi.python.org/pypi/buster/]  but I am doing it a\nbit different. The repository is here\n[https://github.com/tomasbjerre/tomasbjerre.github.io/].\n\nI get HTTPS with custom domain as described in this\n[https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html] \n blog post.\n\nI put together some scripts\n[https://github.com/tomasbjerre/tomasbjerre.github.io/tree/tools]  to ease the\nblogging.\n\n * install.sh [http://install.sh]  Downloads Ghost blogging platform and\n   installs it in the current directory.\n * run.sh [http://run.sh]  Starts Ghost blogging platform on localhost. So that\n   it can be edited.\n * commit.sh [http://commit.sh]  Saves the blog and commits it to master. The \n   run.sh [http://run.sh]  script must be running when this script is invoked.\n\ncommit.sh [http://commit.sh]  will create the CNAME  file required if you want\nto use your own domain name\n[https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/]\n.\n\nThere will be 3 commits in the repo. The scripts will amend to these when\nchanges are made. This is important to keep the repo small, it may grow very\nbig, very fast if you don't amend.\n\n*       (tools)  Blog maintenance\n| *     (master)  Static blog content\n|/  \n*       Initial commit","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-18T12:58:58.000Z","created_by":"1","updated_at":"2017-07-28T16:44:50.000Z","updated_by":"1","published_at":"2015-12-18T13:10:28.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a1","uuid":"d5ae9f56-dcc8-41d7-9b44-f46607fb0875","title":"Git Changelog Lib - Changelog, or releasenotes, from template","slug":"git-changelog","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I define a **changelog** as a document that, for every release, contains a section describing the changes in that release. I define **releasenotes** as the changes made in a specific release. Most notes below can be applied to both, but I'm just going to talk about changelogs. To keep it simple.\\n\\n#The problem\\n\\nChangelogs are important! But there are some problems that comes with having a changelog.\\n\\n * **Boring** Keeping the changelog updated is boring!\\n * **Availability** You may be required to make the changelog available to people who are not developers.\\n * **Reliability** Some change may not be in the changelog, or some change may be there but not in the actual release.\\n * **Formatting** Very few developers enjoy fiddling with text formatting!\\n\\n#Other solutions\\n\\nThere are some solutions, if you [google it](http://lmgtfy.com/?q=git+changelog). What I was missing in the solutions that I found was:\\n\\n * **Templating** Companies may have very specific requirements on the formatting of the changelog.\\n * **Wiki integration** I needed to publish the changelog in MediaWiki.\\n\\n#My solution\\n\\nIs [Git Changelog Lib](https://github.com/tomasbjerre/git-changelog-lib). A library, Java, that create a changelog for you, using the information that is already in the GIT repository. The lib can be used:\\n\\n * With a [Gradle plugin](https://github.com/tomasbjerre/git-changelog-gradle-plugin).\\n * With a [Maven plugin](https://github.com/tomasbjerre/git-changelog-maven-plugin).\\n * With a [Jenkins plugin](https://github.com/jenkinsci/git-changelog-plugin).\\n * With a [Bitbucket Server plugin](https://github.com/tomasbjerre/git-changelog-bitbucket-plugin).\\n * From [command line](https://github.com/tomasbjerre/git-changelog-command-line).\\n\\nThe basic idea is to have library that gathers a data structure and supplies it to a Mustache template so that the changelog becomes completely customizable.\\n\\n```\\n# Git Changelog changelog\\n\\nChangelog of Git Changelog.\\n{{#tags}}\\n## {{name}}\\n {{#issues}}\\n  {{#hasLink}}\\n### {{name}} [{{issue}}]({{link}}) {{title}}\\n  {{/hasLink}}\\n  {{^hasLink}}\\n### {{name}} {{title}}\\n  {{/hasLink}}\\n  {{#authors}}\\n* {{authorName}}\\n   {{#commits}}\\n[{{hash}}](https://server/{{hash}}) *{{commitTime}}*\\n{{{message}}}\\n\\n   {{/commits}}\\n\\n  {{/authors}}\\n {{/issues}}\\n{{/tags}}\\n```\\n\\nSome of the features included are:\\n\\n * **Templating** Using Mustache templates.\\n * **MediaWiki** Integrated with MediaWiki to publish changelogs.\\n * **[Jenkins plugin](https://github.com/jenkinsci/git-changelog-plugin)** To publish the changelog on Jenkins summary page. Or let Jenkins create MediaWiki page or file in workspace.\\n * **[Bitbucket Server plugin](https://github.com/tomasbjerre/git-changelog-bitbucket-plugin)** Adds a changelog in the repository page.\\n * **[Gradle plugin](https://github.com/tomasbjerre/git-changelog-gradle-plugin)** To add a changelog task to the Gradle build.\\n * **[Maven plugin](https://github.com/tomasbjerre/git-changelog-maven-plugin)** To add a changelog task to the Maven build.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I define a <strong>changelog</strong> as a document that, for every release, contains a section describing the changes in that release. I define <strong>releasenotes</strong> as the changes made in a specific release. Most notes below can be applied to both, but I'm just going to talk about changelogs. To keep it simple.</p>\n<h1 id=\"theproblem\">The problem</h1>\n<p>Changelogs are important! But there are some problems that comes with having a changelog.</p>\n<ul>\n<li><strong>Boring</strong> Keeping the changelog updated is boring!</li>\n<li><strong>Availability</strong> You may be required to make the changelog available to people who are not developers.</li>\n<li><strong>Reliability</strong> Some change may not be in the changelog, or some change may be there but not in the actual release.</li>\n<li><strong>Formatting</strong> Very few developers enjoy fiddling with text formatting!</li>\n</ul>\n<h1 id=\"othersolutions\">Other solutions</h1>\n<p>There are some solutions, if you <a href=\"http://lmgtfy.com/?q=git+changelog\">google it</a>. What I was missing in the solutions that I found was:</p>\n<ul>\n<li><strong>Templating</strong> Companies may have very specific requirements on the formatting of the changelog.</li>\n<li><strong>Wiki integration</strong> I needed to publish the changelog in MediaWiki.</li>\n</ul>\n<h1 id=\"mysolution\">My solution</h1>\n<p>Is <a href=\"https://github.com/tomasbjerre/git-changelog-lib\">Git Changelog Lib</a>. A library, Java, that create a changelog for you, using the information that is already in the GIT repository. The lib can be used:</p>\n<ul>\n<li>With a <a href=\"https://github.com/tomasbjerre/git-changelog-gradle-plugin\">Gradle plugin</a>.</li>\n<li>With a <a href=\"https://github.com/tomasbjerre/git-changelog-maven-plugin\">Maven plugin</a>.</li>\n<li>With a <a href=\"https://github.com/jenkinsci/git-changelog-plugin\">Jenkins plugin</a>.</li>\n<li>With a <a href=\"https://github.com/tomasbjerre/git-changelog-bitbucket-plugin\">Bitbucket Server plugin</a>.</li>\n<li>From <a href=\"https://github.com/tomasbjerre/git-changelog-command-line\">command line</a>.</li>\n</ul>\n<p>The basic idea is to have library that gathers a data structure and supplies it to a Mustache template so that the changelog becomes completely customizable.</p>\n<pre><code># Git Changelog changelog\n\nChangelog of Git Changelog.\n{{#tags}}\n## {{name}}\n {{#issues}}\n  {{#hasLink}}\n### {{name}} [{{issue}}]({{link}}) {{title}}\n  {{/hasLink}}\n  {{^hasLink}}\n### {{name}} {{title}}\n  {{/hasLink}}\n  {{#authors}}\n* {{authorName}}\n   {{#commits}}\n[{{hash}}](https://server/{{hash}}) *{{commitTime}}*\n{{{message}}}\n\n   {{/commits}}\n\n  {{/authors}}\n {{/issues}}\n{{/tags}}\n</code></pre>\n<p>Some of the features included are:</p>\n<ul>\n<li><strong>Templating</strong> Using Mustache templates.</li>\n<li><strong>MediaWiki</strong> Integrated with MediaWiki to publish changelogs.</li>\n<li><strong><a href=\"https://github.com/jenkinsci/git-changelog-plugin\">Jenkins plugin</a></strong> To publish the changelog on Jenkins summary page. Or let Jenkins create MediaWiki page or file in workspace.</li>\n<li><strong><a href=\"https://github.com/tomasbjerre/git-changelog-bitbucket-plugin\">Bitbucket Server plugin</a></strong> Adds a changelog in the repository page.</li>\n<li><strong><a href=\"https://github.com/tomasbjerre/git-changelog-gradle-plugin\">Gradle plugin</a></strong> To add a changelog task to the Gradle build.</li>\n<li><strong><a href=\"https://github.com/tomasbjerre/git-changelog-maven-plugin\">Maven plugin</a></strong> To add a changelog task to the Maven build.</li>\n</ul>\n</div>","amp":"23","plaintext":"I define a changelog  as a document that, for every release, contains a section\ndescribing the changes in that release. I define releasenotes  as the changes\nmade in a specific release. Most notes below can be applied to both, but I'm\njust going to talk about changelogs. To keep it simple.\n\nThe problem\nChangelogs are important! But there are some problems that comes with having a\nchangelog.\n\n * Boring  Keeping the changelog updated is boring!\n * Availability  You may be required to make the changelog available to people\n   who are not developers.\n * Reliability  Some change may not be in the changelog, or some change may be\n   there but not in the actual release.\n * Formatting  Very few developers enjoy fiddling with text formatting!\n\nOther solutions\nThere are some solutions, if you google it [http://lmgtfy.com/?q=git+changelog].\nWhat I was missing in the solutions that I found was:\n\n * Templating  Companies may have very specific requirements on the formatting\n   of the changelog.\n * Wiki integration  I needed to publish the changelog in MediaWiki.\n\nMy solution\nIs Git Changelog Lib [https://github.com/tomasbjerre/git-changelog-lib]. A\nlibrary, Java, that create a changelog for you, using the information that is\nalready in the GIT repository. The lib can be used:\n\n * With a Gradle plugin\n   [https://github.com/tomasbjerre/git-changelog-gradle-plugin].\n * With a Maven plugin\n   [https://github.com/tomasbjerre/git-changelog-maven-plugin].\n * With a Jenkins plugin [https://github.com/jenkinsci/git-changelog-plugin].\n * With a Bitbucket Server plugin\n   [https://github.com/tomasbjerre/git-changelog-bitbucket-plugin].\n * From command line [https://github.com/tomasbjerre/git-changelog-command-line]\n   .\n\nThe basic idea is to have library that gathers a data structure and supplies it\nto a Mustache template so that the changelog becomes completely customizable.\n\n# Git Changelog changelog\n\nChangelog of Git Changelog.\n{{#tags}}\n## {{name}}\n {{#issues}}\n  {{#hasLink}}\n### {{name}} [{{issue}}]({{link}}) {{title}}\n  {{/hasLink}}\n  {{^hasLink}}\n### {{name}} {{title}}\n  {{/hasLink}}\n  {{#authors}}\n* {{authorName}}\n   {{#commits}}\n[{{hash}}](https://server/{{hash}}) *{{commitTime}}*\n{{{message}}}\n\n   {{/commits}}\n\n  {{/authors}}\n {{/issues}}\n{{/tags}}\n\n\nSome of the features included are:\n\n * Templating  Using Mustache templates.\n * MediaWiki  Integrated with MediaWiki to publish changelogs.\n * Jenkins plugin [https://github.com/jenkinsci/git-changelog-plugin]  To\n   publish the changelog on Jenkins summary page. Or let Jenkins create\n   MediaWiki page or file in workspace.\n * Bitbucket Server plugin\n   [https://github.com/tomasbjerre/git-changelog-bitbucket-plugin]  Adds a\n   changelog in the repository page.\n * Gradle plugin [https://github.com/tomasbjerre/git-changelog-gradle-plugin] \n   To add a changelog task to the Gradle build.\n * Maven plugin [https://github.com/tomasbjerre/git-changelog-maven-plugin]  To\n   add a changelog task to the Maven build.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-19T09:00:06.000Z","created_by":"1","updated_at":"2016-09-11T07:02:28.000Z","updated_by":"1","published_at":"2015-12-19T09:24:55.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a2","uuid":"120ed7f4-df28-4658-819f-f1e42b1b843c","title":"Static code analysis with GitHub","slug":"static-code-analysis-with-github","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I previously wrote about [Violation Comments to Bitbucket Server](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin) plugin for Jenkins. I wanted to do the same thing with GitHub and Travis, here is the result.\\n\\n![Violation comment in GitHub pull request](/content/images/2016/03/findbugs-github-pr-file-comment.png)\\n\\nYou may also have a look at [violations-test](https://github.com/tomasbjerre/violations-test/pull/2) repo where I have a live demo of this.\\n\\nEvery time I push to a pull request, or its target branch, Travis will perform static code analysis and report back to GitHub. I created a [Maven plugin](https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin) and [Gradle plugin](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin) to make this possible. I also created a [Jenkins plugin](https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin).\\n\\nIt supports same format as [violations-lib](https://github.com/tomasbjerre/violations-lib):\\n  \\n * [**Checkstyle**](http://checkstyle.sourceforge.net/)\\n * [**CPPLint**](https://github.com/theandrewdavis/cpplint)\\n * [**CPPCheck**](http://cppcheck.sourceforge.net/)\\n * [**CSSLint**](https://github.com/CSSLint/csslint)\\n * [**Findbugs**](http://findbugs.sourceforge.net/)\\n * [**Flake8**](http://flake8.readthedocs.org/en/latest/) ([_PyLint_](https://www.pylint.org/), [_Pep8_](https://github.com/PyCQA/pycodestyle))\\n * [**JSHint**](http://jshint.com/)\\n * **Lint** A common XML format, used by different linters.\\n * [**PerlCritic**](https://github.com/Perl-Critic)\\n * [**PMD**](https://pmd.github.io/)\\n * [**ReSharper**](https://www.jetbrains.com/resharper/)\\n * [**XMLLint**](http://xmlsoft.org/xmllint.html)\\n\\nMany more formats are planned and [pull requests](https://github.com/tomasbjerre/violations-lib) are very welcome!\\n\\nThis will **not work in Travis for pull requests from forked repositories**. But **will work great with Travis for internal pull requests**. But that is a **limitation in Travis, not in the plugins** used for reporting. So if you want to do this on pull requests from forked repos you can use a private hosted build server. I created a **[Jenkins plugin](https://github.com/tomasbjerre/violation-comments-to-github-jenkins-plugin) that can be used for building pull requests from forked repositories**. You may also use the [Maven plugin](https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin) or [Gradle plugin](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin) for that.\\n\\nHere is how to set it up in Travis.\\n\\n# Travis setup\\nYou need to have a user that is allowed to post comments on the pull request. You may use the users username and password, or an OAuth2 token. I will use OAuth2 token in this example. Here is how to create it:\\n\\n`curl -u 'yourgithubuser' -d '{\\\"note\\\":\\\"Violation comments\\\"}' https://api.github.com/authorizations\\n`\\n\\nIt will prompt for you password and give you back the token.\\n\\nYou need to add it to `.travis.yml`. Travis provides a nice tool for encrypting the token:\\n```\\nsudo apt-get install ruby-dev\\ngem install travis\\ntravis encrypt export GITHUB_OAUTH2TOKEN=YOUR TOKEN HERE\\n```\\nAdd the encrypted token to your `.travis.yml` under env. I'm including the Gradle task here also:\\n```\\nsudo: false\\nlanguage: java\\nenv:\\n  - secure: \\\"YOUR ENCRYPTED TOKEN HERE\\\"\\njdk:\\n  - oraclejdk7\\nscript:\\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i --stacktrace\\nnotifications:\\n  email: false\\n```\\n\\nNow you need to edit your `build.gradle` to include the plugin. As mentioned above, there is also a [Maven plugin](https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin) with the exact same functionality. This blog post may not be up to date, so best is to check [Gradle plugin](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin) for latest version and config. But here is an example:\\n\\n```\\n  buildscript {\\n    repositories {\\n      maven {\\n        url \\\"https://plugins.gradle.org/m2/\\\"\\n      }\\n    }\\n    dependencies {\\n      classpath \\\"se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.1\\\"\\n    }\\n  }\\n\\n  apply plugin: \\\"se.bjurr.violations.violation-comments-to-github-gradle-plugin\\\"\\n\\n  task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {\\n   repositoryOwner = \\\"tomasbjerre\\\";\\n   repositoryName = \\\"violations-test\\\"\\n   pullRequestId = System.properties['GITHUB_PULLREQUESTID']\\n   username = System.properties['GITHUB_USERNAME']\\n   password = System.properties['GITHUB_PASSWORD']\\n   oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']\\n   gitHubUrl = \\\"https://api.github.com/\\\"\\n   createCommentWithAllSingleFileComments = false\\n   createSingleFileComments = true\\n   violations = [\\n    [\\\"FINDBUGS\\\",   \\\".\\\", \\\".*/findbugs/.*\\\\\\\\.xml\\\\$\\\"],\\n    [\\\"PMD\\\",        \\\".\\\", \\\".*/pmd/.*\\\\\\\\.xml\\\\$\\\"],\\n    [\\\"CHECKSTYLE\\\", \\\".\\\", \\\".*/checkstyle/.*\\\\\\\\.xml\\\\$\\\"],\\n    [\\\"JSHINT\\\",     \\\".\\\", \\\".*/jshint/.*\\\\\\\\.xml\\\\$\\\"],\\n    [\\\"CSSLINT\\\",    \\\".\\\", \\\".*/csslint/.*\\\\\\\\.xml\\\\$\\\"]\\n   ]\\n  }\\n```\\n\\nNow all you need to do is to add the task to the build script, as you saw above, you need this:\\n```\\n script:\\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i\\n```\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I previously wrote about <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin\">Violation Comments to Bitbucket Server</a> plugin for Jenkins. I wanted to do the same thing with GitHub and Travis, here is the result.</p>\n<p><img src=\"/content/images/2016/03/findbugs-github-pr-file-comment.png\" alt=\"Violation comment in GitHub pull request\"></p>\n<p>You may also have a look at <a href=\"https://github.com/tomasbjerre/violations-test/pull/2\">violations-test</a> repo where I have a live demo of this.</p>\n<p>Every time I push to a pull request, or its target branch, Travis will perform static code analysis and report back to GitHub. I created a <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin\">Maven plugin</a> and <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin\">Gradle plugin</a> to make this possible. I also created a <a href=\"https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin\">Jenkins plugin</a>.</p>\n<p>It supports same format as <a href=\"https://github.com/tomasbjerre/violations-lib\">violations-lib</a>:</p>\n<ul>\n<li><a href=\"http://checkstyle.sourceforge.net/\"><strong>Checkstyle</strong></a></li>\n<li><a href=\"https://github.com/theandrewdavis/cpplint\"><strong>CPPLint</strong></a></li>\n<li><a href=\"http://cppcheck.sourceforge.net/\"><strong>CPPCheck</strong></a></li>\n<li><a href=\"https://github.com/CSSLint/csslint\"><strong>CSSLint</strong></a></li>\n<li><a href=\"http://findbugs.sourceforge.net/\"><strong>Findbugs</strong></a></li>\n<li><a href=\"http://flake8.readthedocs.org/en/latest/\"><strong>Flake8</strong></a> (<a href=\"https://www.pylint.org/\"><em>PyLint</em></a>, <a href=\"https://github.com/PyCQA/pycodestyle\"><em>Pep8</em></a>)</li>\n<li><a href=\"http://jshint.com/\"><strong>JSHint</strong></a></li>\n<li><strong>Lint</strong> A common XML format, used by different linters.</li>\n<li><a href=\"https://github.com/Perl-Critic\"><strong>PerlCritic</strong></a></li>\n<li><a href=\"https://pmd.github.io/\"><strong>PMD</strong></a></li>\n<li><a href=\"https://www.jetbrains.com/resharper/\"><strong>ReSharper</strong></a></li>\n<li><a href=\"http://xmlsoft.org/xmllint.html\"><strong>XMLLint</strong></a></li>\n</ul>\n<p>Many more formats are planned and <a href=\"https://github.com/tomasbjerre/violations-lib\">pull requests</a> are very welcome!</p>\n<p>This will <strong>not work in Travis for pull requests from forked repositories</strong>. But <strong>will work great with Travis for internal pull requests</strong>. But that is a <strong>limitation in Travis, not in the plugins</strong> used for reporting. So if you want to do this on pull requests from forked repos you can use a private hosted build server. I created a <strong><a href=\"https://github.com/tomasbjerre/violation-comments-to-github-jenkins-plugin\">Jenkins plugin</a> that can be used for building pull requests from forked repositories</strong>. You may also use the <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin\">Maven plugin</a> or <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin\">Gradle plugin</a> for that.</p>\n<p>Here is how to set it up in Travis.</p>\n<h1 id=\"travissetup\">Travis setup</h1>\n<p>You need to have a user that is allowed to post comments on the pull request. You may use the users username and password, or an OAuth2 token. I will use OAuth2 token in this example. Here is how to create it:</p>\n<p><code>curl -u 'yourgithubuser' -d '{&quot;note&quot;:&quot;Violation comments&quot;}' https://api.github.com/authorizations</code></p>\n<p>It will prompt for you password and give you back the token.</p>\n<p>You need to add it to <code>.travis.yml</code>. Travis provides a nice tool for encrypting the token:</p>\n<pre><code>sudo apt-get install ruby-dev\ngem install travis\ntravis encrypt export GITHUB_OAUTH2TOKEN=YOUR TOKEN HERE\n</code></pre>\n<p>Add the encrypted token to your <code>.travis.yml</code> under env. I'm including the Gradle task here also:</p>\n<pre><code>sudo: false\nlanguage: java\nenv:\n  - secure: &quot;YOUR ENCRYPTED TOKEN HERE&quot;\njdk:\n  - oraclejdk7\nscript:\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i --stacktrace\nnotifications:\n  email: false\n</code></pre>\n<p>Now you need to edit your <code>build.gradle</code> to include the plugin. As mentioned above, there is also a <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin\">Maven plugin</a> with the exact same functionality. This blog post may not be up to date, so best is to check <a href=\"https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin\">Gradle plugin</a> for latest version and config. But here is an example:</p>\n<pre><code>  buildscript {\n    repositories {\n      maven {\n        url &quot;https://plugins.gradle.org/m2/&quot;\n      }\n    }\n    dependencies {\n      classpath &quot;se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.1&quot;\n    }\n  }\n\n  apply plugin: &quot;se.bjurr.violations.violation-comments-to-github-gradle-plugin&quot;\n\n  task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {\n   repositoryOwner = &quot;tomasbjerre&quot;;\n   repositoryName = &quot;violations-test&quot;\n   pullRequestId = System.properties['GITHUB_PULLREQUESTID']\n   username = System.properties['GITHUB_USERNAME']\n   password = System.properties['GITHUB_PASSWORD']\n   oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']\n   gitHubUrl = &quot;https://api.github.com/&quot;\n   createCommentWithAllSingleFileComments = false\n   createSingleFileComments = true\n   violations = [\n    [&quot;FINDBUGS&quot;,   &quot;.&quot;, &quot;.*/findbugs/.*\\\\.xml\\$&quot;],\n    [&quot;PMD&quot;,        &quot;.&quot;, &quot;.*/pmd/.*\\\\.xml\\$&quot;],\n    [&quot;CHECKSTYLE&quot;, &quot;.&quot;, &quot;.*/checkstyle/.*\\\\.xml\\$&quot;],\n    [&quot;JSHINT&quot;,     &quot;.&quot;, &quot;.*/jshint/.*\\\\.xml\\$&quot;],\n    [&quot;CSSLINT&quot;,    &quot;.&quot;, &quot;.*/csslint/.*\\\\.xml\\$&quot;]\n   ]\n  }\n</code></pre>\n<p>Now all you need to do is to add the task to the build script, as you saw above, you need this:</p>\n<pre><code> script:\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i\n</code></pre>\n</div>","amp":"24","plaintext":"I previously wrote about Violation Comments to Bitbucket Server\n[https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin] \n plugin for Jenkins. I wanted to do the same thing with GitHub and Travis, here\nis the result.\n\n\n\nYou may also have a look at violations-test\n[https://github.com/tomasbjerre/violations-test/pull/2]  repo where I have a\nlive demo of this.\n\nEvery time I push to a pull request, or its target branch, Travis will perform\nstatic code analysis and report back to GitHub. I created a Maven plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin]  and \nGradle plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin]  to\nmake this possible. I also created a Jenkins plugin\n[https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin].\n\nIt supports same format as violations-lib\n[https://github.com/tomasbjerre/violations-lib]:\n\n * Checkstyle [http://checkstyle.sourceforge.net/]\n * CPPLint [https://github.com/theandrewdavis/cpplint]\n * CPPCheck [http://cppcheck.sourceforge.net/]\n * CSSLint [https://github.com/CSSLint/csslint]\n * Findbugs [http://findbugs.sourceforge.net/]\n * Flake8 [http://flake8.readthedocs.org/en/latest/]  (PyLint\n   [https://www.pylint.org/], Pep8 [https://github.com/PyCQA/pycodestyle])\n * JSHint [http://jshint.com/]\n * Lint  A common XML format, used by different linters.\n * PerlCritic [https://github.com/Perl-Critic]\n * PMD [https://pmd.github.io/]\n * ReSharper [https://www.jetbrains.com/resharper/]\n * XMLLint [http://xmlsoft.org/xmllint.html]\n\nMany more formats are planned and pull requests\n[https://github.com/tomasbjerre/violations-lib]  are very welcome!\n\nThis will not work in Travis for pull requests from forked repositories. But \nwill work great with Travis for internal pull requests. But that is a limitation\nin Travis, not in the plugins  used for reporting. So if you want to do this on\npull requests from forked repos you can use a private hosted build server. I\ncreated a Jenkins plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-jenkins-plugin] \nthat can be used for building pull requests from forked repositories. You may\nalso use the Maven plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin]  or \nGradle plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin]  for\nthat.\n\nHere is how to set it up in Travis.\n\nTravis setup\nYou need to have a user that is allowed to post comments on the pull request.\nYou may use the users username and password, or an OAuth2 token. I will use\nOAuth2 token in this example. Here is how to create it:\n\ncurl -u 'yourgithubuser' -d '{\"note\":\"Violation comments\"}'\nhttps://api.github.com/authorizations\n\nIt will prompt for you password and give you back the token.\n\nYou need to add it to .travis.yml. Travis provides a nice tool for encrypting\nthe token:\n\nsudo apt-get install ruby-dev\ngem install travis\ntravis encrypt export GITHUB_OAUTH2TOKEN=YOUR TOKEN HERE\n\n\nAdd the encrypted token to your .travis.yml  under env. I'm including the Gradle\ntask here also:\n\nsudo: false\nlanguage: java\nenv:\n  - secure: \"YOUR ENCRYPTED TOKEN HERE\"\njdk:\n  - oraclejdk7\nscript:\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i --stacktrace\nnotifications:\n  email: false\n\n\nNow you need to edit your build.gradle  to include the plugin. As mentioned\nabove, there is also a Maven plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin]  with\nthe exact same functionality. This blog post may not be up to date, so best is\nto check Gradle plugin\n[https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin]  for\nlatest version and config. But here is an example:\n\n  buildscript {\n    repositories {\n      maven {\n        url \"https://plugins.gradle.org/m2/\"\n      }\n    }\n    dependencies {\n      classpath \"se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.1\"\n    }\n  }\n\n  apply plugin: \"se.bjurr.violations.violation-comments-to-github-gradle-plugin\"\n\n  task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {\n   repositoryOwner = \"tomasbjerre\";\n   repositoryName = \"violations-test\"\n   pullRequestId = System.properties['GITHUB_PULLREQUESTID']\n   username = System.properties['GITHUB_USERNAME']\n   password = System.properties['GITHUB_PASSWORD']\n   oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']\n   gitHubUrl = \"https://api.github.com/\"\n   createCommentWithAllSingleFileComments = false\n   createSingleFileComments = true\n   violations = [\n    [\"FINDBUGS\",   \".\", \".*/findbugs/.*\\\\.xml\\$\"],\n    [\"PMD\",        \".\", \".*/pmd/.*\\\\.xml\\$\"],\n    [\"CHECKSTYLE\", \".\", \".*/checkstyle/.*\\\\.xml\\$\"],\n    [\"JSHINT\",     \".\", \".*/jshint/.*\\\\.xml\\$\"],\n    [\"CSSLINT\",    \".\", \".*/csslint/.*\\\\.xml\\$\"]\n   ]\n  }\n\n\nNow all you need to do is to add the task to the build script, as you saw above,\nyou need this:\n\n script:\n  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-03-04T21:01:59.000Z","created_by":"1","updated_at":"2017-03-18T19:17:00.000Z","updated_by":"1","published_at":"2016-03-04T21:30:58.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a3","uuid":"3cc02964-4f5d-417d-89f5-85ded3b9ba07","title":"Clean invocations of dirty methods","slug":"clean-invocations-of-dirty-methods","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently started to implement a [client for a REST API](https://github.com/tomasbjerre/bitbucket-server-java-client). I was using [RetroFit](http://square.github.io/retrofit/) and here is one the resources used by the client.\\n```\\npublic interface BitBucketServerService {\\n @GET(\\\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\\\")\\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\\n   @Query(\\\"projectkey\\\") String projectKey,//\\n   @Query(\\\"repositoryslug\\\") String repositoryslug,//\\n   @Query(\\\"direction\\\") String direction,//\\n   @Query(\\\"at\\\") Integer at,//\\n   @Query(\\\"state\\\") String state,//\\n   @Query(\\\"order\\\") String order,//\\n   @Query(\\\"withattributes\\\") boolean withattributes,//\\n   @Query(\\\"withproperties\\\") boolean withproperties);\\n}\\n```\\n\\nThe problem here is that calls to this service will be dirty. Alot of parameters in each invocation. Alot of strings that can accidentally be added in the wrong order. So just for comparison, here is an invocation of that service.\\n```\\nbitBucketServerService //\\n .pullRequests(\\\"projectKey\\\", \\\"repositoryslug\\\", \\\"direction\\\", 1, \\\"state\\\", \\\"order\\\", true, true);\\n```\\n\\nI created [Java Method Invocation Builder](https://github.com/tomasbjerre/java-method-invocation-builder). It adds the `@GenerateMethodInvocationBuilder` and also `@Default`. They are added to an interface, or class. It enables default values of method parameters  in Java and is making the invocations readable.\\n\\n```\\n@GenerateMethodInvocationBuilder\\npublic interface BitBucketServerService {\\n @GET(\\\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\\\")\\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\\n   @Query(\\\"projectkey\\\") String projectKey,//\\n   @Query(\\\"repositoryslug\\\") String repositoryslug,//\\n   @Default(\\\"INCOMING\\\") @Query(\\\"direction\\\") String direction,//\\n   @Query(\\\"at\\\") Integer at,//\\n   @Default(\\\"OPEN\\\") @Query(\\\"state\\\") String state,//\\n   @Default(\\\"NEWEST\\\") @Query(\\\"order\\\") String order,//\\n   @Default(\\\"true\\\") @Query(\\\"withattributes\\\") boolean withattributes,//\\n   @Default(\\\"true\\\") @Query(\\\"withproperties\\\") boolean withproperties);\\n}\\n```\\n\\n[Java Method Invocation Builder](https://github.com/tomasbjerre/java-method-invocation-builder) will generate builders for invoking every method in the **interface**, **or class**. So that the invoking code can look like this instead.\\n\\n```\\n  BitBucketServerServicePullRequestsBuilder.pullRequests()//\\n    .withProjectKey(\\\"projectKey\\\")//\\n    .withRepositoryslug(\\\"repositoryslug\\\")//\\n    .withAt(123)//\\n    .invoke(bitBucketServerService);\\n```\\n\\nThe code is generated as Java files at compile time. I created [Maven](https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-maven) and [Gradle](https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-gradle) examples to show how to use it.\\n\\n![Example](/content/images/2016/06/example_usage.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently started to implement a <a href=\"https://github.com/tomasbjerre/bitbucket-server-java-client\">client for a REST API</a>. I was using <a href=\"http://square.github.io/retrofit/\">RetroFit</a> and here is one the resources used by the client.</p>\n<pre><code>public interface BitBucketServerService {\n @GET(&quot;/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&amp;at={at}&amp;state={state}&amp;order={order}&amp;withattributes={withattributes}&amp;withproperties={withproperties}&quot;)\n Call&lt;BitbucketServerResponse&lt;BitBucketServerPullRequest&gt;&gt; pullRequests(//\n   @Query(&quot;projectkey&quot;) String projectKey,//\n   @Query(&quot;repositoryslug&quot;) String repositoryslug,//\n   @Query(&quot;direction&quot;) String direction,//\n   @Query(&quot;at&quot;) Integer at,//\n   @Query(&quot;state&quot;) String state,//\n   @Query(&quot;order&quot;) String order,//\n   @Query(&quot;withattributes&quot;) boolean withattributes,//\n   @Query(&quot;withproperties&quot;) boolean withproperties);\n}\n</code></pre>\n<p>The problem here is that calls to this service will be dirty. Alot of parameters in each invocation. Alot of strings that can accidentally be added in the wrong order. So just for comparison, here is an invocation of that service.</p>\n<pre><code>bitBucketServerService //\n .pullRequests(&quot;projectKey&quot;, &quot;repositoryslug&quot;, &quot;direction&quot;, 1, &quot;state&quot;, &quot;order&quot;, true, true);\n</code></pre>\n<p>I created <a href=\"https://github.com/tomasbjerre/java-method-invocation-builder\">Java Method Invocation Builder</a>. It adds the <code>@GenerateMethodInvocationBuilder</code> and also <code>@Default</code>. They are added to an interface, or class. It enables default values of method parameters  in Java and is making the invocations readable.</p>\n<pre><code>@GenerateMethodInvocationBuilder\npublic interface BitBucketServerService {\n @GET(&quot;/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&amp;at={at}&amp;state={state}&amp;order={order}&amp;withattributes={withattributes}&amp;withproperties={withproperties}&quot;)\n Call&lt;BitbucketServerResponse&lt;BitBucketServerPullRequest&gt;&gt; pullRequests(//\n   @Query(&quot;projectkey&quot;) String projectKey,//\n   @Query(&quot;repositoryslug&quot;) String repositoryslug,//\n   @Default(&quot;INCOMING&quot;) @Query(&quot;direction&quot;) String direction,//\n   @Query(&quot;at&quot;) Integer at,//\n   @Default(&quot;OPEN&quot;) @Query(&quot;state&quot;) String state,//\n   @Default(&quot;NEWEST&quot;) @Query(&quot;order&quot;) String order,//\n   @Default(&quot;true&quot;) @Query(&quot;withattributes&quot;) boolean withattributes,//\n   @Default(&quot;true&quot;) @Query(&quot;withproperties&quot;) boolean withproperties);\n}\n</code></pre>\n<p><a href=\"https://github.com/tomasbjerre/java-method-invocation-builder\">Java Method Invocation Builder</a> will generate builders for invoking every method in the <strong>interface</strong>, <strong>or class</strong>. So that the invoking code can look like this instead.</p>\n<pre><code>  BitBucketServerServicePullRequestsBuilder.pullRequests()//\n    .withProjectKey(&quot;projectKey&quot;)//\n    .withRepositoryslug(&quot;repositoryslug&quot;)//\n    .withAt(123)//\n    .invoke(bitBucketServerService);\n</code></pre>\n<p>The code is generated as Java files at compile time. I created <a href=\"https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-maven\">Maven</a> and <a href=\"https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-gradle\">Gradle</a> examples to show how to use it.</p>\n<p><img src=\"/content/images/2016/06/example_usage.png\" alt=\"Example\"></p>\n</div>","amp":"25","plaintext":"I recently started to implement a client for a REST API\n[https://github.com/tomasbjerre/bitbucket-server-java-client]. I was using \nRetroFit [http://square.github.io/retrofit/]  and here is one the resources used\nby the client.\n\npublic interface BitBucketServerService {\n @GET(\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\")\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\n   @Query(\"projectkey\") String projectKey,//\n   @Query(\"repositoryslug\") String repositoryslug,//\n   @Query(\"direction\") String direction,//\n   @Query(\"at\") Integer at,//\n   @Query(\"state\") String state,//\n   @Query(\"order\") String order,//\n   @Query(\"withattributes\") boolean withattributes,//\n   @Query(\"withproperties\") boolean withproperties);\n}\n\n\nThe problem here is that calls to this service will be dirty. Alot of parameters\nin each invocation. Alot of strings that can accidentally be added in the wrong\norder. So just for comparison, here is an invocation of that service.\n\nbitBucketServerService //\n .pullRequests(\"projectKey\", \"repositoryslug\", \"direction\", 1, \"state\", \"order\", true, true);\n\n\nI created Java Method Invocation Builder\n[https://github.com/tomasbjerre/java-method-invocation-builder]. It adds the \n@GenerateMethodInvocationBuilder  and also @Default. They are added to an\ninterface, or class. It enables default values of method parameters in Java and\nis making the invocations readable.\n\n@GenerateMethodInvocationBuilder\npublic interface BitBucketServerService {\n @GET(\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\")\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\n   @Query(\"projectkey\") String projectKey,//\n   @Query(\"repositoryslug\") String repositoryslug,//\n   @Default(\"INCOMING\") @Query(\"direction\") String direction,//\n   @Query(\"at\") Integer at,//\n   @Default(\"OPEN\") @Query(\"state\") String state,//\n   @Default(\"NEWEST\") @Query(\"order\") String order,//\n   @Default(\"true\") @Query(\"withattributes\") boolean withattributes,//\n   @Default(\"true\") @Query(\"withproperties\") boolean withproperties);\n}\n\n\nJava Method Invocation Builder\n[https://github.com/tomasbjerre/java-method-invocation-builder]  will generate\nbuilders for invoking every method in the interface, or class. So that the\ninvoking code can look like this instead.\n\n  BitBucketServerServicePullRequestsBuilder.pullRequests()//\n    .withProjectKey(\"projectKey\")//\n    .withRepositoryslug(\"repositoryslug\")//\n    .withAt(123)//\n    .invoke(bitBucketServerService);\n\n\nThe code is generated as Java files at compile time. I created Maven\n[https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-maven] \n and Gradle\n[https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-gradle] \n examples to show how to use it.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-06-11T16:30:29.000Z","created_by":"1","updated_at":"2016-09-11T07:01:24.000Z","updated_by":"1","published_at":"2016-06-11T16:53:14.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a4","uuid":"3fd3272e-d690-478c-b03e-742624228a64","title":"Continuous Integration with Bitbucket Server and Jenkins","slug":"continuous-integration-with-bitbucket-server-and-jenkins","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I have started several projects where I develop plugins for Bitbucket Server and Jenkins. They are independent of each other but I thought it would be nice to have a blog post about how they can work together and on how I prefer to do continuous integration. This is it! =)\\n\\nWhat is the configuration that I apply?\\n\\n* [Gitflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow) workflow.\\n* Every commit, message and code, has to be reviewed before it can be merged.\\n* Every commit has to have an issue in its message.\\n* The size of the files that are put under version control cannot exceed 2000kb.\\n* The committer must use valid name and email in all commits.\\n* Changes can only be made with *feature branches* and merged with *pull requests*.\\n* *Pull requests* cannot be merged unless it its guaranteed that the target branch will still build after merge.\\n* *Pull requests* cannot be merged unless, at least, one other developer has reviewed it.\\n* *Static code analysis* will be made on every *pull request*.\\n\\nWhy do I apply this configuration?\\n\\n* **Git flow enables you to**\\n * Use plugins for managing releases, like [JGit-Flow](https://bitbucket.org/atlassian/jgit-flow/wiki/Home).\\n * Reduce time spent on documentation. You just need to refer to some [youtube-videos](https://www.youtube.com/results?search_query=git+flow) or [websites](http://lmgtfy.com/?q=git+flow).\\n * Discuss any scenario on any public forum like [Stackoverflow](http://stackoverflow.com/search?q=git+flow).\\n * Let a configuration manager have total control of *master* and *release*-branches. While developers have total control of *dev* and *feature*-branches.\\n * Some people skip *dev* and use *master* as developer branch. I keep *dev* because when developing tools around GIT, its convenient to have a reference to latest release, *master*, and latest snapshot, *dev*. And since branches in git are basically just a file with a hash I think its a small price to pay for keeping it nice and tidy.\\n* **You will know exactly what is included in your releases**. The commits are reviewed, so you can trust that the message is true. Which means you can create your release notes by looking at the new commits in *dev* that are not yet merged to *master* (production). A special QA-jira is created to use for small fixes, like correcting toggling test case or formatting code.\\n* **You will make the code more maintainable and share knowledge among developers**. When tracking down a bug, the commit messages you find will be clear and understandable. Also the code will be cleaner from the reviews. Duplicated utility classes, diverging patterns... and so on will be denied.\\n* **You will never have a failing build on a shared branch**. Merge is only allowed, blocked by the Bitbucket Server, if it is guaranteed that target will still build after merge. Actually, if you have toggling test cases they can fail. But that should be found in code reviews.\\n* **Testers can pick a feature and try it out in a test environment before its merged to *dev***. By letting *Jenkins* perform the merge (without pushing), build the artifacts and deploy to an environment.\\n* **Your static code analysis will be honored**. You will see dramatically reduced amount of warnings from static code analysis. The developers will not be able to ignore such warnings (often the case with *Sonar*) as they will automatically be converted into comments on the code in the *pull request*.\\n* **Your repository will not quickly increase in size**. Remember that when you clone a Git repo you will download every version of everything. Its mostly a one time thing for a developer but something that a build server does several times a day. Once your repo has grown big its a bit of a pain getting rid of those large files.\\n\\nAnd finally, how do I apply the configuration? With Jenkins, Bitbucket Server (some of this is also possible to do if you are using GitHub) and plugins! I created a small [Docker Compose](https://github.com/tomasbjerre/jenkinsbitbucket) to help fiddle with this.\\n\\n# Bitbucket Server\\nThis is the Git repo that I use. It adds some things that Git does not have:\\n\\n* Authentication.\\n* Branch, repo and project permissions.\\n* Pull request support.\\n* Code review support.\\n* Alot of plugins.\\n\\nThe plugins I will use adds support for:\\n\\n * Commit checks with [Simple Bitbucket Server Commit Checker](https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview).\\n * Notifies Jenkins to perform verification of pull requests with [Pull Request Notifier for Bitbucket Server](https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview).\\n * Synchronizing settings among repositories with [Settings Synchronizer for Bitbucket Server](https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview) \\n\\nYou can think about Git as an open database. Anyone can change anything. Anyone can add commits to any branch, with any author/committer name/email. It is very dangerous to collaborate around a repo that is not protected with a service like Bitbucket Server.\\n\\n## Simple Bitbucket Server Commit Checker\\nThis is one of my plugins. Its available for easy install from [Atlassian Marketplace](https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview) and is developed [on Github](https://github.com/tomasbjerre/simple-bitbucket-commit-checker).\\n\\nThe main reason why I developed this plugin was to allow custom rejection messages. The rejection messages also allows you to use variables so that you can reject a commit with a message saying exactly what the committer needs to do in order to fixup the commit. It also has a *dry run* mode where it only complains about the things that are not correct, but does not actually block the commit. It may be crucial to have such a feature if you introduce commit checks for 100+ committers.\\n\\n![Block committer emails not in Bitbucket Server](/content/images/2016/09/sscc-email.png)\\n\\nThe rejection messages are very clear.\\n\\n![Email rejected](/content/images/2016/09/sscc-reject.png)\\n\\nIt uses Jira:s [JQL](https://confluence.atlassian.com/jirasoftwarecloud/advanced-searching-764478330.html#Advancedsearching-ConstructingJQLqueries) to enable advanced and flexible validation of commit comments. It does not have to be an advanced query, simply adding `issue = ${REGEXP}` will validate that the Jiras exists.\\n\\n![JQL](/content/images/2016/09/sscc-issues.png)\\n\\nI use it to block commits:\\n\\n* Contains files that are too big, larger then 2000kb.\\n* Committer email or name does not match authenticated user in Bitbucket Server.\\n* Message does not contain an issue. Jira or custom incident pattern. I create a special issue in jira, a QA-jira, that can be use for small fixes. A small fix might be correcting toggling test case or formatting code.\\n\\n## Pull Request Notifier for Bitbucket Server\\nThis is one of my plugins. Its available for easy install from [Atlassian Marketplace](https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview) and is developed [on Github](https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket).\\n\\nIt invokes a URL when a pull request event happens in Bitbucket Server. The URL is completely customizable and supports variables so that you can notify any system with the information it needs on the format it needs it. \\n\\n![Pull Request Notifier for Bitbucket Server URL config](/content/images/2016/09/pull-request-notifier-url-config.png)\\n\\nThe main reason why I developed this plugin was to allow perfect verification of pull requests in Jenkins. But it is written in a way so that it is in no way limited to Jenkins. It basically just interacts with HTTP and can be used for many other purposes. I know people use it for posting updates regarding pull requests in Slack channels.\\n\\nIt enables you to guarantee that pull requests cannot be merged unless target branch will still build after the merge. If one of several pull requests to *dev* is merged, the plugin can re-trigger all other pull requests to verify them with the new commit that is now *dev*.\\n\\nIt adds support for *custom buttons* on pull request view. These buttons are mapped to a *notifications* (a URL being invoked). This means you can have a button labeled \\\"*Deploy to test env 1*\\\" and when it is pressed you trigger a job in Jenkins. The job is served with the feature branch of the pull request, builds the artifact and deploys it to that environment.\\n\\n![Pull Request Notifier for Bitbucket Server Button Config](/content/images/2016/09/prnfb-buttons.png)\\n\\nAnd in the pull request view you will see that button to the right, when clicking the dots.\\n\\n![Pull Request Notifier for Bitbucket Server Button In PR view](/content/images/2016/09/prnfb-button-pr-view.png)\\n\\nThe button will only be made visible if there is a configured notification that will actually trigger on the button being pressed. So make sure you add that also.\\n\\n![Pull Request Notifier for Bitucket Server Triggers](/content/images/2016/09/prnfb-triggers.png)\\n\\n## Settings Synchronizer for Bitbucket Server\\nThis is one of my plugins. Its available for easy install from [Atlassian Marketplace](https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview) and is developed [on Github](https://github.com/tomasbjerre/settings-synchronizer-for-bitbucket-plugin).\\n\\nIt is a bit of a pain to configure plugins for a 100, or even just a couple, of repositories. This plugin lets you synchronize plugin settings among your repositories.\\n\\n![Settings Synchronizer for Bitbucket Server](/content/images/2016/10/repoadmin.png)\\n\\n# Jenkins\\nThe build server that I use. Some say its just a glorified cron job. And yes thats pretty much it. The good thing about it is all the plugins. I dont think I would ever use it if it was not for the plugins.\\n\\nWhen I verify the pull requests I do it with a simple shell script build step.\\n\\n * From [Pull Request Notifier for Bitbucket Server](https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket) I pass the `${EVERYTHING_URL}`.\\n * I check the job as parameterized and add the variables, used below, ass parameters.\\n * I check delay and set it to 0 seconds.\\n * I check allow parallel jobs.\\n\\nThe script is something like this.\\n\\n```\\ngit clone $PULL_REQUEST_TO_HTTP_CLONE_URL\\ncd *  \\ngit reset --hard $PULL_REQUEST_TO_HASH\\ngit status  \\ngit remote add from $PULL_REQUEST_FROM_HTTP_CLONE_URL\\ngit fetch --all\\ngit merge $PULL_REQUEST_FROM_HASH\\ngit --no-pager log --max-count=10 --graph --abbrev-commit\\n\\n#compile command here ...\\n```\\n\\n## Violation Comments to Bitbucket Server Plugin\\nThis is one of my Jenkins plugins. It is available in [Jenkins update sites](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin) and is developed [on Github](https://github.com/jenkinsci/violation-comments-to-stash-plugin). There is also a [Jenkins plugin for Github](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Github+Plugin) if that is what you are using.\\n\\nMy opinion is that projects often put to much trust in that developers themselves will adhere to rules specified by static code analysis tools. They often trust that developers will have their IDE setup correctly to report problems. They also trust that developers will browse to [SonarQube](http://www.sonarqube.org/), every now and then, and find problems to fix. It is my strongest opinion that this never works. Some developers are really enthusiastic about it in the beginning but soon forgets to check for problems. Some never even cares in the first place. Commenting the pull requests with the problems found, makes them hard to ignore.\\n\\nWhen a pull request is verified, part of the verification is static code analysis. This plugin finds report files generated from that analysis and uses them to comment the pull request in Bitbucket Server.\\n\\n![Violation Comments to Bitbucket Server](/content/images/2016/09/screenshot-stash.png)\\n\\nThe post build action may look something like this.\\n\\n![Violation Comments to Bitbucket Server Post Build Action](/content/images/2016/09/violation-comments-to-bitbucket.png)\\n\\n## Git Changelog Plugin\\nThis is one of my Jenkins plugins. It is available in [Jenkins update sites](https://wiki.jenkins-ci.org/display/JENKINS/Git+Changelog+Plugin) and is developed [on Github](https://github.com/jenkinsci/git-changelog-plugin).\\n\\nThere may be several commits in the feature branch that is the source of the pull request. It may be an integration branch where developers has been working for weeks or even months. Then its very nice get a more organized view of what the feature branch actually contains.\\n\\n![Git Changelog Jenkins Plugin Configuration](/content/images/2016/09/git-changelog-postaction1.png)\\n\\nThis plugin is configured with a template and then creates a changelog where the template is rendered with the content of the feature branch.\\n\\n![Git Changelog Jenkins Plugin Template Configuration](/content/images/2016/09/git-changelog-postaction2.png)\\n\\nIt may look something like this if you chose to publish it on Jenkins job summary page. I used a Github repo here in the example because I dont have access to a Jira installation, but it works just the same with Jira! =)\\n\\n![Git Changelog Jenkins Summary](/content/images/2016/09/gitchangelog-prnfb-github.png)\\n\\nYou can also use this plugin to create release notes, just select *dev* as source branch and *master* as target branch. If you have a Jenkins job for *dev* then that is where to put that. It includes **integration with MediaWiki** so that releasenotes can be posted there. You can also chose to **create a file** where you are totally free to create a formatted HTML with CSS, or just plain text, the way you like it.\\n\\n## Stash Notifier Plugin\\nIt is available in [Jenkins update sites](https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin). It adds a post build step in Jenkns.\\n\\n![Post Build Step in Jenkins](/content/images/2016/09/stash-notifier-plugin.png)\\n\\nIt also reveals build status on Pull request view in Bitbucket Server.\\n\\n![Build status in Bitbucket Server](/content/images/2016/09/stash-notifier-in-bitbucket.png)\\n\\n# Conclusions\\nHope you found something useful here. Pull requests and suggested features are always welcome. Please dont email me directly but instead try to file issues on GitHub!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I have started several projects where I develop plugins for Bitbucket Server and Jenkins. They are independent of each other but I thought it would be nice to have a blog post about how they can work together and on how I prefer to do continuous integration. This is it! =)</p>\n<p>What is the configuration that I apply?</p>\n<ul>\n<li><a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">Gitflow</a> workflow.</li>\n<li>Every commit, message and code, has to be reviewed before it can be merged.</li>\n<li>Every commit has to have an issue in its message.</li>\n<li>The size of the files that are put under version control cannot exceed 2000kb.</li>\n<li>The committer must use valid name and email in all commits.</li>\n<li>Changes can only be made with <em>feature branches</em> and merged with <em>pull requests</em>.</li>\n<li><em>Pull requests</em> cannot be merged unless it its guaranteed that the target branch will still build after merge.</li>\n<li><em>Pull requests</em> cannot be merged unless, at least, one other developer has reviewed it.</li>\n<li><em>Static code analysis</em> will be made on every <em>pull request</em>.</li>\n</ul>\n<p>Why do I apply this configuration?</p>\n<ul>\n<li><strong>Git flow enables you to</strong></li>\n<li>Use plugins for managing releases, like <a href=\"https://bitbucket.org/atlassian/jgit-flow/wiki/Home\">JGit-Flow</a>.</li>\n<li>Reduce time spent on documentation. You just need to refer to some <a href=\"https://www.youtube.com/results?search_query=git+flow\">youtube-videos</a> or <a href=\"http://lmgtfy.com/?q=git+flow\">websites</a>.</li>\n<li>Discuss any scenario on any public forum like <a href=\"http://stackoverflow.com/search?q=git+flow\">Stackoverflow</a>.</li>\n<li>Let a configuration manager have total control of <em>master</em> and <em>release</em>-branches. While developers have total control of <em>dev</em> and <em>feature</em>-branches.</li>\n<li>Some people skip <em>dev</em> and use <em>master</em> as developer branch. I keep <em>dev</em> because when developing tools around GIT, its convenient to have a reference to latest release, <em>master</em>, and latest snapshot, <em>dev</em>. And since branches in git are basically just a file with a hash I think its a small price to pay for keeping it nice and tidy.</li>\n<li><strong>You will know exactly what is included in your releases</strong>. The commits are reviewed, so you can trust that the message is true. Which means you can create your release notes by looking at the new commits in <em>dev</em> that are not yet merged to <em>master</em> (production). A special QA-jira is created to use for small fixes, like correcting toggling test case or formatting code.</li>\n<li><strong>You will make the code more maintainable and share knowledge among developers</strong>. When tracking down a bug, the commit messages you find will be clear and understandable. Also the code will be cleaner from the reviews. Duplicated utility classes, diverging patterns... and so on will be denied.</li>\n<li><strong>You will never have a failing build on a shared branch</strong>. Merge is only allowed, blocked by the Bitbucket Server, if it is guaranteed that target will still build after merge. Actually, if you have toggling test cases they can fail. But that should be found in code reviews.</li>\n<li><strong>Testers can pick a feature and try it out in a test environment before its merged to <em>dev</em></strong>. By letting <em>Jenkins</em> perform the merge (without pushing), build the artifacts and deploy to an environment.</li>\n<li><strong>Your static code analysis will be honored</strong>. You will see dramatically reduced amount of warnings from static code analysis. The developers will not be able to ignore such warnings (often the case with <em>Sonar</em>) as they will automatically be converted into comments on the code in the <em>pull request</em>.</li>\n<li><strong>Your repository will not quickly increase in size</strong>. Remember that when you clone a Git repo you will download every version of everything. Its mostly a one time thing for a developer but something that a build server does several times a day. Once your repo has grown big its a bit of a pain getting rid of those large files.</li>\n</ul>\n<p>And finally, how do I apply the configuration? With Jenkins, Bitbucket Server (some of this is also possible to do if you are using GitHub) and plugins! I created a small <a href=\"https://github.com/tomasbjerre/jenkinsbitbucket\">Docker Compose</a> to help fiddle with this.</p>\n<h1 id=\"bitbucketserver\">Bitbucket Server</h1>\n<p>This is the Git repo that I use. It adds some things that Git does not have:</p>\n<ul>\n<li>Authentication.</li>\n<li>Branch, repo and project permissions.</li>\n<li>Pull request support.</li>\n<li>Code review support.</li>\n<li>Alot of plugins.</li>\n</ul>\n<p>The plugins I will use adds support for:</p>\n<ul>\n<li>Commit checks with <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview\">Simple Bitbucket Server Commit Checker</a>.</li>\n<li>Notifies Jenkins to perform verification of pull requests with <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview\">Pull Request Notifier for Bitbucket Server</a>.</li>\n<li>Synchronizing settings among repositories with <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview\">Settings Synchronizer for Bitbucket Server</a></li>\n</ul>\n<p>You can think about Git as an open database. Anyone can change anything. Anyone can add commits to any branch, with any author/committer name/email. It is very dangerous to collaborate around a repo that is not protected with a service like Bitbucket Server.</p>\n<h2 id=\"simplebitbucketservercommitchecker\">Simple Bitbucket Server Commit Checker</h2>\n<p>This is one of my plugins. Its available for easy install from <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview\">Atlassian Marketplace</a> and is developed <a href=\"https://github.com/tomasbjerre/simple-bitbucket-commit-checker\">on Github</a>.</p>\n<p>The main reason why I developed this plugin was to allow custom rejection messages. The rejection messages also allows you to use variables so that you can reject a commit with a message saying exactly what the committer needs to do in order to fixup the commit. It also has a <em>dry run</em> mode where it only complains about the things that are not correct, but does not actually block the commit. It may be crucial to have such a feature if you introduce commit checks for 100+ committers.</p>\n<p><img src=\"/content/images/2016/09/sscc-email.png\" alt=\"Block committer emails not in Bitbucket Server\"></p>\n<p>The rejection messages are very clear.</p>\n<p><img src=\"/content/images/2016/09/sscc-reject.png\" alt=\"Email rejected\"></p>\n<p>It uses Jira:s <a href=\"https://confluence.atlassian.com/jirasoftwarecloud/advanced-searching-764478330.html#Advancedsearching-ConstructingJQLqueries\">JQL</a> to enable advanced and flexible validation of commit comments. It does not have to be an advanced query, simply adding <code>issue = ${REGEXP}</code> will validate that the Jiras exists.</p>\n<p><img src=\"/content/images/2016/09/sscc-issues.png\" alt=\"JQL\"></p>\n<p>I use it to block commits:</p>\n<ul>\n<li>Contains files that are too big, larger then 2000kb.</li>\n<li>Committer email or name does not match authenticated user in Bitbucket Server.</li>\n<li>Message does not contain an issue. Jira or custom incident pattern. I create a special issue in jira, a QA-jira, that can be use for small fixes. A small fix might be correcting toggling test case or formatting code.</li>\n</ul>\n<h2 id=\"pullrequestnotifierforbitbucketserver\">Pull Request Notifier for Bitbucket Server</h2>\n<p>This is one of my plugins. Its available for easy install from <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview\">Atlassian Marketplace</a> and is developed <a href=\"https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket\">on Github</a>.</p>\n<p>It invokes a URL when a pull request event happens in Bitbucket Server. The URL is completely customizable and supports variables so that you can notify any system with the information it needs on the format it needs it.</p>\n<p><img src=\"/content/images/2016/09/pull-request-notifier-url-config.png\" alt=\"Pull Request Notifier for Bitbucket Server URL config\"></p>\n<p>The main reason why I developed this plugin was to allow perfect verification of pull requests in Jenkins. But it is written in a way so that it is in no way limited to Jenkins. It basically just interacts with HTTP and can be used for many other purposes. I know people use it for posting updates regarding pull requests in Slack channels.</p>\n<p>It enables you to guarantee that pull requests cannot be merged unless target branch will still build after the merge. If one of several pull requests to <em>dev</em> is merged, the plugin can re-trigger all other pull requests to verify them with the new commit that is now <em>dev</em>.</p>\n<p>It adds support for <em>custom buttons</em> on pull request view. These buttons are mapped to a <em>notifications</em> (a URL being invoked). This means you can have a button labeled &quot;<em>Deploy to test env 1</em>&quot; and when it is pressed you trigger a job in Jenkins. The job is served with the feature branch of the pull request, builds the artifact and deploys it to that environment.</p>\n<p><img src=\"/content/images/2016/09/prnfb-buttons.png\" alt=\"Pull Request Notifier for Bitbucket Server Button Config\"></p>\n<p>And in the pull request view you will see that button to the right, when clicking the dots.</p>\n<p><img src=\"/content/images/2016/09/prnfb-button-pr-view.png\" alt=\"Pull Request Notifier for Bitbucket Server Button In PR view\"></p>\n<p>The button will only be made visible if there is a configured notification that will actually trigger on the button being pressed. So make sure you add that also.</p>\n<p><img src=\"/content/images/2016/09/prnfb-triggers.png\" alt=\"Pull Request Notifier for Bitucket Server Triggers\"></p>\n<h2 id=\"settingssynchronizerforbitbucketserver\">Settings Synchronizer for Bitbucket Server</h2>\n<p>This is one of my plugins. Its available for easy install from <a href=\"https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview\">Atlassian Marketplace</a> and is developed <a href=\"https://github.com/tomasbjerre/settings-synchronizer-for-bitbucket-plugin\">on Github</a>.</p>\n<p>It is a bit of a pain to configure plugins for a 100, or even just a couple, of repositories. This plugin lets you synchronize plugin settings among your repositories.</p>\n<p><img src=\"/content/images/2016/10/repoadmin.png\" alt=\"Settings Synchronizer for Bitbucket Server\"></p>\n<h1 id=\"jenkins\">Jenkins</h1>\n<p>The build server that I use. Some say its just a glorified cron job. And yes thats pretty much it. The good thing about it is all the plugins. I dont think I would ever use it if it was not for the plugins.</p>\n<p>When I verify the pull requests I do it with a simple shell script build step.</p>\n<ul>\n<li>From <a href=\"https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket\">Pull Request Notifier for Bitbucket Server</a> I pass the <code>${EVERYTHING_URL}</code>.</li>\n<li>I check the job as parameterized and add the variables, used below, ass parameters.</li>\n<li>I check delay and set it to 0 seconds.</li>\n<li>I check allow parallel jobs.</li>\n</ul>\n<p>The script is something like this.</p>\n<pre><code>git clone $PULL_REQUEST_TO_HTTP_CLONE_URL\ncd *  \ngit reset --hard $PULL_REQUEST_TO_HASH\ngit status  \ngit remote add from $PULL_REQUEST_FROM_HTTP_CLONE_URL\ngit fetch --all\ngit merge $PULL_REQUEST_FROM_HASH\ngit --no-pager log --max-count=10 --graph --abbrev-commit\n\n#compile command here ...\n</code></pre>\n<h2 id=\"violationcommentstobitbucketserverplugin\">Violation Comments to Bitbucket Server Plugin</h2>\n<p>This is one of my Jenkins plugins. It is available in <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin\">Jenkins update sites</a> and is developed <a href=\"https://github.com/jenkinsci/violation-comments-to-stash-plugin\">on Github</a>. There is also a <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Github+Plugin\">Jenkins plugin for Github</a> if that is what you are using.</p>\n<p>My opinion is that projects often put to much trust in that developers themselves will adhere to rules specified by static code analysis tools. They often trust that developers will have their IDE setup correctly to report problems. They also trust that developers will browse to <a href=\"http://www.sonarqube.org/\">SonarQube</a>, every now and then, and find problems to fix. It is my strongest opinion that this never works. Some developers are really enthusiastic about it in the beginning but soon forgets to check for problems. Some never even cares in the first place. Commenting the pull requests with the problems found, makes them hard to ignore.</p>\n<p>When a pull request is verified, part of the verification is static code analysis. This plugin finds report files generated from that analysis and uses them to comment the pull request in Bitbucket Server.</p>\n<p><img src=\"/content/images/2016/09/screenshot-stash.png\" alt=\"Violation Comments to Bitbucket Server\"></p>\n<p>The post build action may look something like this.</p>\n<p><img src=\"/content/images/2016/09/violation-comments-to-bitbucket.png\" alt=\"Violation Comments to Bitbucket Server Post Build Action\"></p>\n<h2 id=\"gitchangelogplugin\">Git Changelog Plugin</h2>\n<p>This is one of my Jenkins plugins. It is available in <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Git+Changelog+Plugin\">Jenkins update sites</a> and is developed <a href=\"https://github.com/jenkinsci/git-changelog-plugin\">on Github</a>.</p>\n<p>There may be several commits in the feature branch that is the source of the pull request. It may be an integration branch where developers has been working for weeks or even months. Then its very nice get a more organized view of what the feature branch actually contains.</p>\n<p><img src=\"/content/images/2016/09/git-changelog-postaction1.png\" alt=\"Git Changelog Jenkins Plugin Configuration\"></p>\n<p>This plugin is configured with a template and then creates a changelog where the template is rendered with the content of the feature branch.</p>\n<p><img src=\"/content/images/2016/09/git-changelog-postaction2.png\" alt=\"Git Changelog Jenkins Plugin Template Configuration\"></p>\n<p>It may look something like this if you chose to publish it on Jenkins job summary page. I used a Github repo here in the example because I dont have access to a Jira installation, but it works just the same with Jira! =)</p>\n<p><img src=\"/content/images/2016/09/gitchangelog-prnfb-github.png\" alt=\"Git Changelog Jenkins Summary\"></p>\n<p>You can also use this plugin to create release notes, just select <em>dev</em> as source branch and <em>master</em> as target branch. If you have a Jenkins job for <em>dev</em> then that is where to put that. It includes <strong>integration with MediaWiki</strong> so that releasenotes can be posted there. You can also chose to <strong>create a file</strong> where you are totally free to create a formatted HTML with CSS, or just plain text, the way you like it.</p>\n<h2 id=\"stashnotifierplugin\">Stash Notifier Plugin</h2>\n<p>It is available in <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin\">Jenkins update sites</a>. It adds a post build step in Jenkns.</p>\n<p><img src=\"/content/images/2016/09/stash-notifier-plugin.png\" alt=\"Post Build Step in Jenkins\"></p>\n<p>It also reveals build status on Pull request view in Bitbucket Server.</p>\n<p><img src=\"/content/images/2016/09/stash-notifier-in-bitbucket.png\" alt=\"Build status in Bitbucket Server\"></p>\n<h1 id=\"conclusions\">Conclusions</h1>\n<p>Hope you found something useful here. Pull requests and suggested features are always welcome. Please dont email me directly but instead try to file issues on GitHub!</p>\n</div>","amp":"26","plaintext":"I have started several projects where I develop plugins for Bitbucket Server and\nJenkins. They are independent of each other but I thought it would be nice to\nhave a blog post about how they can work together and on how I prefer to do\ncontinuous integration. This is it! =)\n\nWhat is the configuration that I apply?\n\n * Gitflow\n   [https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow] \n    workflow.\n * Every commit, message and code, has to be reviewed before it can be merged.\n * Every commit has to have an issue in its message.\n * The size of the files that are put under version control cannot exceed\n   2000kb.\n * The committer must use valid name and email in all commits.\n * Changes can only be made with feature branches  and merged with pull requests\n   .\n * Pull requests  cannot be merged unless it its guaranteed that the target\n   branch will still build after merge.\n * Pull requests  cannot be merged unless, at least, one other developer has\n   reviewed it.\n * Static code analysis  will be made on every pull request.\n\nWhy do I apply this configuration?\n\n * Git flow enables you to\n * Use plugins for managing releases, like JGit-Flow\n   [https://bitbucket.org/atlassian/jgit-flow/wiki/Home].\n * Reduce time spent on documentation. You just need to refer to some \n   youtube-videos [https://www.youtube.com/results?search_query=git+flow]  or \n   websites [http://lmgtfy.com/?q=git+flow].\n * Discuss any scenario on any public forum like Stackoverflow\n   [http://stackoverflow.com/search?q=git+flow].\n * Let a configuration manager have total control of master  and release\n   -branches. While developers have total control of dev  and feature-branches.\n * Some people skip dev  and use master  as developer branch. I keep dev \n   because when developing tools around GIT, its convenient to have a reference\n   to latest release, master, and latest snapshot, dev. And since branches in\n   git are basically just a file with a hash I think its a small price to pay\n   for keeping it nice and tidy.\n * You will know exactly what is included in your releases. The commits are\n   reviewed, so you can trust that the message is true. Which means you can\n   create your release notes by looking at the new commits in dev  that are not\n   yet merged to master  (production). A special QA-jira is created to use for\n   small fixes, like correcting toggling test case or formatting code.\n * You will make the code more maintainable and share knowledge among developers\n   . When tracking down a bug, the commit messages you find will be clear and\n   understandable. Also the code will be cleaner from the reviews. Duplicated\n   utility classes, diverging patterns... and so on will be denied.\n * You will never have a failing build on a shared branch. Merge is only\n   allowed, blocked by the Bitbucket Server, if it is guaranteed that target\n   will still build after merge. Actually, if you have toggling test cases they\n   can fail. But that should be found in code reviews.\n * Testers can pick a feature and try it out in a test environment before its\n   merged to dev. By letting Jenkins  perform the merge (without pushing), build\n   the artifacts and deploy to an environment.\n * Your static code analysis will be honored. You will see dramatically reduced\n   amount of warnings from static code analysis. The developers will not be able\n   to ignore such warnings (often the case with Sonar) as they will\n   automatically be converted into comments on the code in the pull request.\n * Your repository will not quickly increase in size. Remember that when you\n   clone a Git repo you will download every version of everything. Its mostly a\n   one time thing for a developer but something that a build server does several\n   times a day. Once your repo has grown big its a bit of a pain getting rid of\n   those large files.\n\nAnd finally, how do I apply the configuration? With Jenkins, Bitbucket Server\n(some of this is also possible to do if you are using GitHub) and plugins! I\ncreated a small Docker Compose [https://github.com/tomasbjerre/jenkinsbitbucket] \n to help fiddle with this.\n\nBitbucket Server\nThis is the Git repo that I use. It adds some things that Git does not have:\n\n * Authentication.\n * Branch, repo and project permissions.\n * Pull request support.\n * Code review support.\n * Alot of plugins.\n\nThe plugins I will use adds support for:\n\n * Commit checks with Simple Bitbucket Server Commit Checker\n   [https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview]\n   .\n * Notifies Jenkins to perform verification of pull requests with Pull Request\n   Notifier for Bitbucket Server\n   [https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview]\n   .\n * Synchronizing settings among repositories with Settings Synchronizer for\n   Bitbucket Server\n   [https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview]\n\nYou can think about Git as an open database. Anyone can change anything. Anyone\ncan add commits to any branch, with any author/committer name/email. It is very\ndangerous to collaborate around a repo that is not protected with a service like\nBitbucket Server.\n\nSimple Bitbucket Server Commit Checker\nThis is one of my plugins. Its available for easy install from Atlassian\nMarketplace\n[https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview] \nand is developed on Github\n[https://github.com/tomasbjerre/simple-bitbucket-commit-checker].\n\nThe main reason why I developed this plugin was to allow custom rejection\nmessages. The rejection messages also allows you to use variables so that you\ncan reject a commit with a message saying exactly what the committer needs to do\nin order to fixup the commit. It also has a dry run  mode where it only\ncomplains about the things that are not correct, but does not actually block the\ncommit. It may be crucial to have such a feature if you introduce commit checks\nfor 100+ committers.\n\n\n\nThe rejection messages are very clear.\n\n\n\nIt uses Jira:s JQL  to enable advanced and flexible validation of commit\ncomments. It does not have to be an advanced query, simply adding issue =\n${REGEXP}  will validate that the Jiras exists.\n\n\n\nI use it to block commits:\n\n * Contains files that are too big, larger then 2000kb.\n * Committer email or name does not match authenticated user in Bitbucket\n   Server.\n * Message does not contain an issue. Jira or custom incident pattern. I create\n   a special issue in jira, a QA-jira, that can be use for small fixes. A small\n   fix might be correcting toggling test case or formatting code.\n\nPull Request Notifier for Bitbucket Server\nThis is one of my plugins. Its available for easy install from Atlassian\nMarketplace\n[https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview] \n and is developed on Github\n[https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket].\n\nIt invokes a URL when a pull request event happens in Bitbucket Server. The URL\nis completely customizable and supports variables so that you can notify any\nsystem with the information it needs on the format it needs it.\n\n\n\nThe main reason why I developed this plugin was to allow perfect verification of\npull requests in Jenkins. But it is written in a way so that it is in no way\nlimited to Jenkins. It basically just interacts with HTTP and can be used for\nmany other purposes. I know people use it for posting updates regarding pull\nrequests in Slack channels.\n\nIt enables you to guarantee that pull requests cannot be merged unless target\nbranch will still build after the merge. If one of several pull requests to dev \nis merged, the plugin can re-trigger all other pull requests to verify them with\nthe new commit that is now dev.\n\nIt adds support for custom buttons  on pull request view. These buttons are\nmapped to a notifications  (a URL being invoked). This means you can have a\nbutton labeled \"Deploy to test env 1\" and when it is pressed you trigger a job\nin Jenkins. The job is served with the feature branch of the pull request,\nbuilds the artifact and deploys it to that environment.\n\n\n\nAnd in the pull request view you will see that button to the right, when\nclicking the dots.\n\n\n\nThe button will only be made visible if there is a configured notification that\nwill actually trigger on the button being pressed. So make sure you add that\nalso.\n\n\n\nSettings Synchronizer for Bitbucket Server\nThis is one of my plugins. Its available for easy install from Atlassian\nMarketplace\n[https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview] \n and is developed on Github\n[https://github.com/tomasbjerre/settings-synchronizer-for-bitbucket-plugin].\n\nIt is a bit of a pain to configure plugins for a 100, or even just a couple, of\nrepositories. This plugin lets you synchronize plugin settings among your\nrepositories.\n\n\n\nJenkins\nThe build server that I use. Some say its just a glorified cron job. And yes\nthats pretty much it. The good thing about it is all the plugins. I dont think I\nwould ever use it if it was not for the plugins.\n\nWhen I verify the pull requests I do it with a simple shell script build step.\n\n * From Pull Request Notifier for Bitbucket Server\n   [https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket]  I pass\n   the ${EVERYTHING_URL}.\n * I check the job as parameterized and add the variables, used below, ass\n   parameters.\n * I check delay and set it to 0 seconds.\n * I check allow parallel jobs.\n\nThe script is something like this.\n\ngit clone $PULL_REQUEST_TO_HTTP_CLONE_URL\ncd *  \ngit reset --hard $PULL_REQUEST_TO_HASH\ngit status  \ngit remote add from $PULL_REQUEST_FROM_HTTP_CLONE_URL\ngit fetch --all\ngit merge $PULL_REQUEST_FROM_HASH\ngit --no-pager log --max-count=10 --graph --abbrev-commit\n\n#compile command here ...\n\n\nViolation Comments to Bitbucket Server Plugin\nThis is one of my Jenkins plugins. It is available in Jenkins update sites\n[https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin] \n and is developed on Github\n[https://github.com/jenkinsci/violation-comments-to-stash-plugin]. There is also\na Jenkins plugin for Github\n[https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Github+Plugin] \n if that is what you are using.\n\nMy opinion is that projects often put to much trust in that developers\nthemselves will adhere to rules specified by static code analysis tools. They\noften trust that developers will have their IDE setup correctly to report\nproblems. They also trust that developers will browse to SonarQube\n[http://www.sonarqube.org/], every now and then, and find problems to fix. It is\nmy strongest opinion that this never works. Some developers are really\nenthusiastic about it in the beginning but soon forgets to check for problems.\nSome never even cares in the first place. Commenting the pull requests with the\nproblems found, makes them hard to ignore.\n\nWhen a pull request is verified, part of the verification is static code\nanalysis. This plugin finds report files generated from that analysis and uses\nthem to comment the pull request in Bitbucket Server.\n\n\n\nThe post build action may look something like this.\n\n\n\nGit Changelog Plugin\nThis is one of my Jenkins plugins. It is available in Jenkins update sites\n[https://wiki.jenkins-ci.org/display/JENKINS/Git+Changelog+Plugin]  and is\ndeveloped on Github [https://github.com/jenkinsci/git-changelog-plugin].\n\nThere may be several commits in the feature branch that is the source of the\npull request. It may be an integration branch where developers has been working\nfor weeks or even months. Then its very nice get a more organized view of what\nthe feature branch actually contains.\n\n\n\nThis plugin is configured with a template and then creates a changelog where the\ntemplate is rendered with the content of the feature branch.\n\n\n\nIt may look something like this if you chose to publish it on Jenkins job\nsummary page. I used a Github repo here in the example because I dont have\naccess to a Jira installation, but it works just the same with Jira! =)\n\n\n\nYou can also use this plugin to create release notes, just select dev  as source\nbranch and master  as target branch. If you have a Jenkins job for dev  then\nthat is where to put that. It includes integration with MediaWiki  so that\nreleasenotes can be posted there. You can also chose to create a file  where you\nare totally free to create a formatted HTML with CSS, or just plain text, the\nway you like it.\n\nStash Notifier Plugin\nIt is available in Jenkins update sites\n[https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin]. It adds a\npost build step in Jenkns.\n\n\n\nIt also reveals build status on Pull request view in Bitbucket Server.\n\n\n\nConclusions\nHope you found something useful here. Pull requests and suggested features are\nalways welcome. Please dont email me directly but instead try to file issues on\nGitHub!","feature_image":"","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-09-07T17:17:25.000Z","created_by":"1","updated_at":"2016-12-27T08:23:56.000Z","updated_by":"1","published_at":"2016-09-10T08:07:34.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a5","uuid":"3099c298-3f00-497a-86a9-67ad0789d172","title":"GitFlow and when you should use it","slug":"gitflow-and-when-you-should-use-it","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There are a lot of people explaining [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/) in different blog posts and videos. I could not find one that, using the correct arguments, explained when it should, and should not, be used. I would say its a very simple choice. These are my personal opinions and you don't have to agree =)\\n\\n*GitFlow* is really the simplest thing. People saying that its over-engineered are using it wrong. People that are moving away from it should probably not have used it in the first place. If you don't feel that its simple, then its not the right pick for you.\\n\\n**If you don't have a code freeze, then *GitFlow* is not for you!** Let's divide the people working with the project into **developers** and **configuration manager(s)** and look at what they do.\\n\\n# GitFlow as a developer\\nAs a **developer** you have 2 kinds of branches.\\n\\n * **develop** Integration branch. Refers to the *next release*.\\n * **feature/X** Feature branch where feature *X* is developed.\\n\\nYou may have **feature** branches that branch out of other **feature** branches. In order to, easily, collaborate with other developers on a feature.\\n\\n* You should always merge code to **develop** as fast as you can. To avoid merge conflicts.\\n* You should regularly *rebase* or *merge* **develop** into you branch. To avoid merge conflicts and benefit from new improvements like refactorings.\\n\\nTo work on the next release. You branch out of **develop**, work with the **feature**, merge back to **develop**.\\n\\n```\\n*    (develop)  Merge branch 'feature/work-with-correcting-a' into develop \\n|\\\\  \\n| *  (feature/work-with-correcting-a) Correcting a\\n|/  \\n*     Merge branch 'feature/work-with-a' into develop \\n|\\\\  \\n| *  (feature/work-with-a)  a \\n|/  \\n* \\n```\\n\\nTo work on the *next*-*next* release, or even further into the future, simply don't merge it back to **develop** before *next*-*next* is *next*. And keep in mind, it may be a good idea to merge it into **develop** earlier, to avoid merge conflicts, if you can do feature toggling.\\n\\nAs a **developer**, this is all there is to it! This is how **developers** most often prefer to work. Just look at any open source repository. Most often you fork the main repository and the **master** in your fork is your **feature** branch. But still, **this is as simple as it can get and this is how developers do it!**\\n\\nAnd again, if you don't have a **code freeze** then don't use *GitFlow*. You will most likely not have **develop**-branch but instead just **master**. And you will also most likely do releases directly from **master**.\\n\\n# GitFlow as a configuration manager\\nAs a **configuration manager** you have 2 kinds of branches.\\n\\n * **master** This is the what's in **production**.\\n * **release-X** This is what's included in **release** *X*.\\n\\nAs soon as it's *code freeze* it's time to create the first *release candidate*. That is done by branching out of **develop** into **release-X**. The version of **develop** is now set to 1.1, in Java that would mean changing the version to *1.1-SNAPSHOT* while in the release branch its still *1.0-SNAPSHOT*. The semantics of the versions is a side track, but I can recommend [this blog post](http://kylelieber.com/2012/06/maven-versioning-strategy/).\\n```\\n| *  (release-1, tag: 1.0-RC-1) Releasing RC 1\\n| *  Setting version to 1.0-RC1\\n* | (develop) Setting version to 1.1-SNAPSHOT\\n|/\\n```\\n\\nThe release candidate, *RC1*, is deployed and tested and if it's all good then it's released. But there is probably something that needs to be fixed. It can be done in different ways.\\n\\n* With *cherry-picking* from *develop*.\\n\\n This is the prettiest but it may also not be possible. Merge conflicts may hinder this. There is also a risk that the **develop**-branch is too far ahead making it hard to know if the fix will work once it's in the **release**-branch. But I feel that it gives the **configuration manager** the most control of the release process.\\n\\n* With merging a **feature**-branch that branches out of the **release**-branch.\\n \\n This often my preferred choice in large teams. It gives the **configuration manager** control of what's included in the release. It avoids risk of merge conflicts. The tests done on that **feature**-branch can be trusted. It can be done with pull requests.\\n\\n* With direct commits to the **release**-branch.\\n \\n This may fit a technical team where the **configuration manager** is also a **developer**. It provides a release process for the current release and enables the **developer** to work on the next release in **develop**. It lacks support for code review but you may not need that in a small project.\\n\\nHere is what it may look like if *cherry-picking* is used.\\n\\n```\\n| *  Setting version to 1.0-SNAPSHOT\\n| *  (release-1, tag: 1.0-RC-2) Releasing RC 2\\n| *  Setting version to 1.0-RC2\\n| *  Correcting a\\n| *  Setting version to 1.0-SNAPSHOT\\n| *  (tag: 1.0-RC-1) Releasing RC 1\\n| *  Setting version to 1.0-RC1\\n* | (develop) Setting version to 1.1-SNAPSHOT\\n|/\\n```\\n\\nNow if *RC2* is good and should be released then that exact artifact is deployed in production.\\n\\n* **release-1** is merged into **master** to keep track of whats in production.\\n* **master** is merged into **develop** to make sure any changes made in production are also in the next release.\\n\\n#Conclusions\\n\\nI've shown the two roles in *GitFlow* and I hope I made it obvious that its actually a very simple workflow! It will not fit all projects. A tiny library that is just used by other software will probably not gain from using *GitFlow*. A big application, where a release is the same as a production deployment, will probably gain from using *GitFlow*.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>There are a lot of people explaining <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">GitFlow</a> in different blog posts and videos. I could not find one that, using the correct arguments, explained when it should, and should not, be used. I would say its a very simple choice. These are my personal opinions and you don't have to agree =)</p>\n<p><em>GitFlow</em> is really the simplest thing. People saying that its over-engineered are using it wrong. People that are moving away from it should probably not have used it in the first place. If you don't feel that its simple, then its not the right pick for you.</p>\n<p><strong>If you don't have a code freeze, then <em>GitFlow</em> is not for you!</strong> Let's divide the people working with the project into <strong>developers</strong> and <strong>configuration manager(s)</strong> and look at what they do.</p>\n<h1 id=\"gitflowasadeveloper\">GitFlow as a developer</h1>\n<p>As a <strong>developer</strong> you have 2 kinds of branches.</p>\n<ul>\n<li><strong>develop</strong> Integration branch. Refers to the <em>next release</em>.</li>\n<li><strong>feature/X</strong> Feature branch where feature <em>X</em> is developed.</li>\n</ul>\n<p>You may have <strong>feature</strong> branches that branch out of other <strong>feature</strong> branches. In order to, easily, collaborate with other developers on a feature.</p>\n<ul>\n<li>You should always merge code to <strong>develop</strong> as fast as you can. To avoid merge conflicts.</li>\n<li>You should regularly <em>rebase</em> or <em>merge</em> <strong>develop</strong> into you branch. To avoid merge conflicts and benefit from new improvements like refactorings.</li>\n</ul>\n<p>To work on the next release. You branch out of <strong>develop</strong>, work with the <strong>feature</strong>, merge back to <strong>develop</strong>.</p>\n<pre><code>*    (develop)  Merge branch 'feature/work-with-correcting-a' into develop \n|\\  \n| *  (feature/work-with-correcting-a) Correcting a\n|/  \n*     Merge branch 'feature/work-with-a' into develop \n|\\  \n| *  (feature/work-with-a)  a \n|/  \n* \n</code></pre>\n<p>To work on the <em>next</em>-<em>next</em> release, or even further into the future, simply don't merge it back to <strong>develop</strong> before <em>next</em>-<em>next</em> is <em>next</em>. And keep in mind, it may be a good idea to merge it into <strong>develop</strong> earlier, to avoid merge conflicts, if you can do feature toggling.</p>\n<p>As a <strong>developer</strong>, this is all there is to it! This is how <strong>developers</strong> most often prefer to work. Just look at any open source repository. Most often you fork the main repository and the <strong>master</strong> in your fork is your <strong>feature</strong> branch. But still, <strong>this is as simple as it can get and this is how developers do it!</strong></p>\n<p>And again, if you don't have a <strong>code freeze</strong> then don't use <em>GitFlow</em>. You will most likely not have <strong>develop</strong>-branch but instead just <strong>master</strong>. And you will also most likely do releases directly from <strong>master</strong>.</p>\n<h1 id=\"gitflowasaconfigurationmanager\">GitFlow as a configuration manager</h1>\n<p>As a <strong>configuration manager</strong> you have 2 kinds of branches.</p>\n<ul>\n<li><strong>master</strong> This is the what's in <strong>production</strong>.</li>\n<li><strong>release-X</strong> This is what's included in <strong>release</strong> <em>X</em>.</li>\n</ul>\n<p>As soon as it's <em>code freeze</em> it's time to create the first <em>release candidate</em>. That is done by branching out of <strong>develop</strong> into <strong>release-X</strong>. The version of <strong>develop</strong> is now set to 1.1, in Java that would mean changing the version to <em>1.1-SNAPSHOT</em> while in the release branch its still <em>1.0-SNAPSHOT</em>. The semantics of the versions is a side track, but I can recommend <a href=\"http://kylelieber.com/2012/06/maven-versioning-strategy/\">this blog post</a>.</p>\n<pre><code>| *  (release-1, tag: 1.0-RC-1) Releasing RC 1\n| *  Setting version to 1.0-RC1\n* | (develop) Setting version to 1.1-SNAPSHOT\n|/\n</code></pre>\n<p>The release candidate, <em>RC1</em>, is deployed and tested and if it's all good then it's released. But there is probably something that needs to be fixed. It can be done in different ways.</p>\n<ul>\n<li>With <em>cherry-picking</em> from <em>develop</em>.</li>\n</ul>\n<p>This is the prettiest but it may also not be possible. Merge conflicts may hinder this. There is also a risk that the <strong>develop</strong>-branch is too far ahead making it hard to know if the fix will work once it's in the <strong>release</strong>-branch. But I feel that it gives the <strong>configuration manager</strong> the most control of the release process.</p>\n<ul>\n<li>With merging a <strong>feature</strong>-branch that branches out of the <strong>release</strong>-branch.</li>\n</ul>\n<p>This often my preferred choice in large teams. It gives the <strong>configuration manager</strong> control of what's included in the release. It avoids risk of merge conflicts. The tests done on that <strong>feature</strong>-branch can be trusted. It can be done with pull requests.</p>\n<ul>\n<li>With direct commits to the <strong>release</strong>-branch.</li>\n</ul>\n<p>This may fit a technical team where the <strong>configuration manager</strong> is also a <strong>developer</strong>. It provides a release process for the current release and enables the <strong>developer</strong> to work on the next release in <strong>develop</strong>. It lacks support for code review but you may not need that in a small project.</p>\n<p>Here is what it may look like if <em>cherry-picking</em> is used.</p>\n<pre><code>| *  Setting version to 1.0-SNAPSHOT\n| *  (release-1, tag: 1.0-RC-2) Releasing RC 2\n| *  Setting version to 1.0-RC2\n| *  Correcting a\n| *  Setting version to 1.0-SNAPSHOT\n| *  (tag: 1.0-RC-1) Releasing RC 1\n| *  Setting version to 1.0-RC1\n* | (develop) Setting version to 1.1-SNAPSHOT\n|/\n</code></pre>\n<p>Now if <em>RC2</em> is good and should be released then that exact artifact is deployed in production.</p>\n<ul>\n<li><strong>release-1</strong> is merged into <strong>master</strong> to keep track of whats in production.</li>\n<li><strong>master</strong> is merged into <strong>develop</strong> to make sure any changes made in production are also in the next release.</li>\n</ul>\n<h1 id=\"conclusions\">Conclusions</h1>\n<p>I've shown the two roles in <em>GitFlow</em> and I hope I made it obvious that its actually a very simple workflow! It will not fit all projects. A tiny library that is just used by other software will probably not gain from using <em>GitFlow</em>. A big application, where a release is the same as a production deployment, will probably gain from using <em>GitFlow</em>.</p>\n</div>","amp":"27","plaintext":"There are a lot of people explaining GitFlow\n[http://nvie.com/posts/a-successful-git-branching-model/]  in different blog\nposts and videos. I could not find one that, using the correct arguments,\nexplained when it should, and should not, be used. I would say its a very simple\nchoice. These are my personal opinions and you don't have to agree =)\n\nGitFlow  is really the simplest thing. People saying that its over-engineered\nare using it wrong. People that are moving away from it should probably not have\nused it in the first place. If you don't feel that its simple, then its not the\nright pick for you.\n\nIf you don't have a code freeze, then GitFlow  is not for you!  Let's divide the\npeople working with the project into developers  and configuration manager(s) \nand look at what they do.\n\nGitFlow as a developer\nAs a developer  you have 2 kinds of branches.\n\n * develop  Integration branch. Refers to the next release.\n * feature/X  Feature branch where feature X  is developed.\n\nYou may have feature  branches that branch out of other feature  branches. In\norder to, easily, collaborate with other developers on a feature.\n\n * You should always merge code to develop  as fast as you can. To avoid merge\n   conflicts.\n * You should regularly rebase  or merge  develop  into you branch. To avoid\n   merge conflicts and benefit from new improvements like refactorings.\n\nTo work on the next release. You branch out of develop, work with the feature,\nmerge back to develop.\n\n*    (develop)  Merge branch 'feature/work-with-correcting-a' into develop \n|\\  \n| *  (feature/work-with-correcting-a) Correcting a\n|/  \n*     Merge branch 'feature/work-with-a' into develop \n|\\  \n| *  (feature/work-with-a)  a \n|/  \n* \n\n\nTo work on the next-next  release, or even further into the future, simply don't\nmerge it back to develop  before next-next  is next. And keep in mind, it may be\na good idea to merge it into develop  earlier, to avoid merge conflicts, if you\ncan do feature toggling.\n\nAs a developer, this is all there is to it! This is how developers  most often\nprefer to work. Just look at any open source repository. Most often you fork the\nmain repository and the master  in your fork is your feature  branch. But still,\n this is as simple as it can get and this is how developers do it!\n\nAnd again, if you don't have a code freeze  then don't use GitFlow. You will\nmost likely not have develop-branch but instead just master. And you will also\nmost likely do releases directly from master.\n\nGitFlow as a configuration manager\nAs a configuration manager  you have 2 kinds of branches.\n\n * master  This is the what's in production.\n * release-X  This is what's included in release  X.\n\nAs soon as it's code freeze  it's time to create the first release candidate.\nThat is done by branching out of develop  into release-X. The version of develop \n is now set to 1.1, in Java that would mean changing the version to 1.1-SNAPSHOT \n while in the release branch its still 1.0-SNAPSHOT. The semantics of the\nversions is a side track, but I can recommend this blog post\n[http://kylelieber.com/2012/06/maven-versioning-strategy/].\n\n| *  (release-1, tag: 1.0-RC-1) Releasing RC 1\n| *  Setting version to 1.0-RC1\n* | (develop) Setting version to 1.1-SNAPSHOT\n|/\n\n\nThe release candidate, RC1, is deployed and tested and if it's all good then\nit's released. But there is probably something that needs to be fixed. It can be\ndone in different ways.\n\n * With cherry-picking  from develop.\n\nThis is the prettiest but it may also not be possible. Merge conflicts may\nhinder this. There is also a risk that the develop-branch is too far ahead\nmaking it hard to know if the fix will work once it's in the release-branch. But\nI feel that it gives the configuration manager  the most control of the release\nprocess.\n\n * With merging a feature-branch that branches out of the release-branch.\n\nThis often my preferred choice in large teams. It gives the configuration\nmanager  control of what's included in the release. It avoids risk of merge\nconflicts. The tests done on that feature-branch can be trusted. It can be done\nwith pull requests.\n\n * With direct commits to the release-branch.\n\nThis may fit a technical team where the configuration manager  is also a \ndeveloper. It provides a release process for the current release and enables the\n developer  to work on the next release in develop. It lacks support for code\nreview but you may not need that in a small project.\n\nHere is what it may look like if cherry-picking  is used.\n\n| *  Setting version to 1.0-SNAPSHOT\n| *  (release-1, tag: 1.0-RC-2) Releasing RC 2\n| *  Setting version to 1.0-RC2\n| *  Correcting a\n| *  Setting version to 1.0-SNAPSHOT\n| *  (tag: 1.0-RC-1) Releasing RC 1\n| *  Setting version to 1.0-RC1\n* | (develop) Setting version to 1.1-SNAPSHOT\n|/\n\n\nNow if RC2  is good and should be released then that exact artifact is deployed\nin production.\n\n * release-1  is merged into master  to keep track of whats in production.\n * master  is merged into develop  to make sure any changes made in production\n   are also in the next release.\n\nConclusions\nI've shown the two roles in GitFlow  and I hope I made it obvious that its\nactually a very simple workflow! It will not fit all projects. A tiny library\nthat is just used by other software will probably not gain from using GitFlow. A\nbig application, where a release is the same as a production deployment, will\nprobably gain from using GitFlow.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-02-25T03:28:42.000Z","created_by":"1","updated_at":"2017-04-17T08:46:34.000Z","updated_by":"1","published_at":"2017-02-25T04:56:31.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a6","uuid":"0c0c6499-af7f-4067-b900-17f8d7864667","title":"Continuous Integration with GitLab and Jenkins","slug":"continuous-integration-with-gitlab-and-jenkins","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"My client recently started using GitLab. I did not find the plugins needed to properly verify merge requests. Here is what I wanted to do:\\n\\n * Trigger on merge requests events.\\n * Merge, compile, test and run static code analysis on it.\\n * Report static code analysis results to GitLab.\\n\\nWhen fiddling with this I came up with a Job DSL solution and a pipeline solution. Here is how they work.\\n\\n# Job DSL approach\\nI developed a couple of Jenkins Plugins to do this.\\n\\n* [Generic Webhook Trigger Jenkins Plugin](https://github.com/jenkinsci/generic-webhook-trigger-plugin)\\n* [Violation Comments To GitLab Jenkins Plugin](https://github.com/jenkinsci/violation-comments-to-gitlab-plugin)\\n\\nI also use the [HTTP Request Plugin](https://wiki.jenkins-ci.org/display/JENKINS/HTTP+Request+Plugin) and [Conditional BuildStep Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin).\\n\\nHere is what you need to do to use this workflow.\\n\\n\\nIn Jenkins:\\n\\n 1. Install the plugins.\\n 2. Use the job DSL to create the job. The DSL is [in the wiki](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin) and [in the repo](https://github.com/jenkinsci/violation-comments-to-gitlab-plugin).\\n\\nIn GitLab:\\n\\n 1. Create a API token. You will find it at `/profile/personal_access_tokens`\\n 2. Add a webhook. You will find it at `/root/violations-test/settings/integrations`. Point it at `http://user:password@jenkins:8080/generic-webhook-trigger/invoke`.\\n 3. Make sure you are authenticated, in this request, with a user that can view any jobs that should be triggered.\\n\\n\\nThe [GitLab merge request](https://gitlab.com/tomas.bjerre85/violations-test/merge_requests/1) will then be commented like this:\\n![alt](/content/images/2017/03/mergerequest-onecomment-1.png)\\n\\n#Pipeline approach\\n\\nI just use curl, [GitLab plugin](https://github.com/jenkinsci/gitlab-plugin) and [Violation Comments to GitLab Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin) to implement it.\\n\\n![Violation Comments to GitLab pipeline](/content/images/2017/04/violation-pipeline.PNG)\\nHere is what you need to do to use this workflow.\\n\\nIn Jenkins:\\n\\n 1. Install the plugins.\\n 2. Create a pipeline job. The pipeline script is [in the wiki](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin) and [in the repo](https://github.com/jenkinsci/violation-comments-to-gitlab-plugin).\\n\\nIn GitLab:\\n\\n 1. Create a API token. You will find it at `/profile/personal_access_tokens`\\n 2. Add a webhook. You will find it at `/root/violations-test/settings/integrations`.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>My client recently started using GitLab. I did not find the plugins needed to properly verify merge requests. Here is what I wanted to do:</p>\n<ul>\n<li>Trigger on merge requests events.</li>\n<li>Merge, compile, test and run static code analysis on it.</li>\n<li>Report static code analysis results to GitLab.</li>\n</ul>\n<p>When fiddling with this I came up with a Job DSL solution and a pipeline solution. Here is how they work.</p>\n<h1 id=\"jobdslapproach\">Job DSL approach</h1>\n<p>I developed a couple of Jenkins Plugins to do this.</p>\n<ul>\n<li><a href=\"https://github.com/jenkinsci/generic-webhook-trigger-plugin\">Generic Webhook Trigger Jenkins Plugin</a></li>\n<li><a href=\"https://github.com/jenkinsci/violation-comments-to-gitlab-plugin\">Violation Comments To GitLab Jenkins Plugin</a></li>\n</ul>\n<p>I also use the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/HTTP+Request+Plugin\">HTTP Request Plugin</a> and <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin\">Conditional BuildStep Plugin</a>.</p>\n<p>Here is what you need to do to use this workflow.</p>\n<p>In Jenkins:</p>\n<ol>\n<li>Install the plugins.</li>\n<li>Use the job DSL to create the job. The DSL is <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin\">in the wiki</a> and <a href=\"https://github.com/jenkinsci/violation-comments-to-gitlab-plugin\">in the repo</a>.</li>\n</ol>\n<p>In GitLab:</p>\n<ol>\n<li>Create a API token. You will find it at <code>/profile/personal_access_tokens</code></li>\n<li>Add a webhook. You will find it at <code>/root/violations-test/settings/integrations</code>. Point it at <code>http://user:password@jenkins:8080/generic-webhook-trigger/invoke</code>.</li>\n<li>Make sure you are authenticated, in this request, with a user that can view any jobs that should be triggered.</li>\n</ol>\n<p>The <a href=\"https://gitlab.com/tomas.bjerre85/violations-test/merge_requests/1\">GitLab merge request</a> will then be commented like this:<br>\n<img src=\"/content/images/2017/03/mergerequest-onecomment-1.png\" alt=\"alt\"></p>\n<h1 id=\"pipelineapproach\">Pipeline approach</h1>\n<p>I just use curl, <a href=\"https://github.com/jenkinsci/gitlab-plugin\">GitLab plugin</a> and <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin\">Violation Comments to GitLab Plugin</a> to implement it.</p>\n<p><img src=\"/content/images/2017/04/violation-pipeline.PNG\" alt=\"Violation Comments to GitLab pipeline\"><br>\nHere is what you need to do to use this workflow.</p>\n<p>In Jenkins:</p>\n<ol>\n<li>Install the plugins.</li>\n<li>Create a pipeline job. The pipeline script is <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin\">in the wiki</a> and <a href=\"https://github.com/jenkinsci/violation-comments-to-gitlab-plugin\">in the repo</a>.</li>\n</ol>\n<p>In GitLab:</p>\n<ol>\n<li>Create a API token. You will find it at <code>/profile/personal_access_tokens</code></li>\n<li>Add a webhook. You will find it at <code>/root/violations-test/settings/integrations</code>.</li>\n</ol>\n</div>","amp":"29","plaintext":"My client recently started using GitLab. I did not find the plugins needed to\nproperly verify merge requests. Here is what I wanted to do:\n\n * Trigger on merge requests events.\n * Merge, compile, test and run static code analysis on it.\n * Report static code analysis results to GitLab.\n\nWhen fiddling with this I came up with a Job DSL solution and a pipeline\nsolution. Here is how they work.\n\nJob DSL approach\nI developed a couple of Jenkins Plugins to do this.\n\n * Generic Webhook Trigger Jenkins Plugin\n   [https://github.com/jenkinsci/generic-webhook-trigger-plugin]\n * Violation Comments To GitLab Jenkins Plugin\n   [https://github.com/jenkinsci/violation-comments-to-gitlab-plugin]\n\nI also use the HTTP Request Plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/HTTP+Request+Plugin]  and \nConditional BuildStep Plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin].\n\nHere is what you need to do to use this workflow.\n\nIn Jenkins:\n\n 1. Install the plugins.\n 2. Use the job DSL to create the job. The DSL is in the wiki\n    [https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin] \n     and in the repo\n    [https://github.com/jenkinsci/violation-comments-to-gitlab-plugin].\n\nIn GitLab:\n\n 1. Create a API token. You will find it at /profile/personal_access_tokens\n 2. Add a webhook. You will find it at \n    /root/violations-test/settings/integrations. Point it at \n    http://user:password@jenkins:8080/generic-webhook-trigger/invoke.\n 3. Make sure you are authenticated, in this request, with a user that can view\n    any jobs that should be triggered.\n\nThe GitLab merge request\n[https://gitlab.com/tomas.bjerre85/violations-test/merge_requests/1]  will then\nbe commented like this:\n\n\nPipeline approach\nI just use curl, GitLab plugin [https://github.com/jenkinsci/gitlab-plugin]  and\n Violation Comments to GitLab Plugin\n[https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin] \n to implement it.\n\n\nHere is what you need to do to use this workflow.\n\nIn Jenkins:\n\n 1. Install the plugins.\n 2. Create a pipeline job. The pipeline script is in the wiki\n    [https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin] \n     and in the repo\n    [https://github.com/jenkinsci/violation-comments-to-gitlab-plugin].\n\nIn GitLab:\n\n 1. Create a API token. You will find it at /profile/personal_access_tokens\n 2. Add a webhook. You will find it at \n    /root/violations-test/settings/integrations.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-03-12T21:51:44.000Z","created_by":"1","updated_at":"2017-04-22T05:07:47.000Z","updated_by":"1","published_at":"2017-03-12T22:01:49.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a7","uuid":"221c2c8c-f050-4657-bbaa-da6bd8d6890c","title":"Java Code Formatting With Google Java Format","slug":"java-code-formatting-with-google-java-format","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Most projects, that I work with nowadays, have a defined code standard that includes how the code should be formatted. That is great and improves code quality a lot... if followed!\\n\\nA single person, in the project, can lower the quality significantly by not formatting the code correctly. If such code is not blocked, from making it into shared branches, you will have the choice of keeping it or fixing it. This is a problem that I find incredibly annoying!\\n\\n* *Keeping it* means you have to live with faulty formatted code. If some developers use something like *save actions* in Eclipse then they will have a hard time keeping the lines unchanged when working on the file.\\n* *Re-formatting it* in a new commit makes it harder to maintain the project because things like `git blame` will show the re-format commit, not the original feature commit.\\n\\nThe most common solution to this, among the clients I've been working with, is to use a code style defined in Eclipse. Along with *save actions*. The code style is imported to Eclipse from an XML-file and some clients also use [Workspace Mechanics](http://marketplace.eclipse.org/content/workspace-mechanic) to setup *save actions* properly.\\n\\nDefining the code style in Eclipse is a very bad idea:\\n\\n* All people are not productive in Eclipse, some might for example be using InteliJ. They will have to have Eclipse installed just to use it for formatting.\\n* The semantics of the settings in the code style may change between versions of Eclipse (I have seen it!). Then you may start getting unnecessary diffs in commits after an upgrade.\\n* There is no way, as far as I know, to verify Eclipse-formatting as a step in a continuous integration flow. While it is easy for a reviewer to see that brackets are incorrectly positioned, other things may not be as obvious.\\n\\n# Google Java Format\\n\\nI sincerely do not care how the code is formatted when I come to a new client. Tabs or spaces, brackets on same or new line... it does not matter. What matters is that you agree on something, anything!, and follow it. That is why, if it is my decision, I choose [Google Java Format](https://github.com/google/google-java-format).\\n\\nThere is [the library](https://github.com/google/google-java-format) and also plugins for Maven and Gradle. This means the code style, and the tool support for that, is completely separate from any IDE used. You can let the developers use whatever IDE they want. The important thing is what they produce, the code, which should have no references to any IDE.\\n\\nI use these in different projects:\\n\\n* [FMT Maven Plugin](https://github.com/coveo/fmt-maven-plugin). You just need to add it to the `pom.xml` and it will format the code at compile time. It includes a [validate](https://github.com/coveo/fmt-maven-plugin/blob/master/src/main/java/com/coveo/FMT.java#L62) attribute that can be used in continuous integration, perhaps with a build property, to validate that the code is formatted correctly.\\n* [Formatter Maven Plugin](https://github.com/revelc/formatter-maven-plugin). You just need to add it to the `pom.xml` and it will format the code at compile time. It includes a [validate](http://code.revelc.net/formatter-maven-plugin/formatter-maven-plugin/plugin-info.html) goal that can be used in continuous integration to validate that the code is formatted correctly.\\n* [Google Java Format Gradle Plugin](https://github.com/sherter/google-java-format-gradle-plugin). You just need to add it to the `build.gradle` and it can format the code at compile time with something like `compileJava.dependsOn 'googleJavaFormat'`. It adds a `verifyGoogleJavaFormat` task to be used in continuous integration to verify formatting.\\n\\nA common problem when auto formatting coding is with newlines. I use *phantom comments* to deal with that. Just add `//` at the end of the line, like [this](https://github.com/tomasbjerre/violations-lib/blob/master/src/main/java/se/bjurr/violations/lib/parsers/CheckStyleParser.java), to force the formatter to keep it that way.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Most projects, that I work with nowadays, have a defined code standard that includes how the code should be formatted. That is great and improves code quality a lot... if followed!</p>\n<p>A single person, in the project, can lower the quality significantly by not formatting the code correctly. If such code is not blocked, from making it into shared branches, you will have the choice of keeping it or fixing it. This is a problem that I find incredibly annoying!</p>\n<ul>\n<li><em>Keeping it</em> means you have to live with faulty formatted code. If some developers use something like <em>save actions</em> in Eclipse then they will have a hard time keeping the lines unchanged when working on the file.</li>\n<li><em>Re-formatting it</em> in a new commit makes it harder to maintain the project because things like <code>git blame</code> will show the re-format commit, not the original feature commit.</li>\n</ul>\n<p>The most common solution to this, among the clients I've been working with, is to use a code style defined in Eclipse. Along with <em>save actions</em>. The code style is imported to Eclipse from an XML-file and some clients also use <a href=\"http://marketplace.eclipse.org/content/workspace-mechanic\">Workspace Mechanics</a> to setup <em>save actions</em> properly.</p>\n<p>Defining the code style in Eclipse is a very bad idea:</p>\n<ul>\n<li>All people are not productive in Eclipse, some might for example be using InteliJ. They will have to have Eclipse installed just to use it for formatting.</li>\n<li>The semantics of the settings in the code style may change between versions of Eclipse (I have seen it!). Then you may start getting unnecessary diffs in commits after an upgrade.</li>\n<li>There is no way, as far as I know, to verify Eclipse-formatting as a step in a continuous integration flow. While it is easy for a reviewer to see that brackets are incorrectly positioned, other things may not be as obvious.</li>\n</ul>\n<h1 id=\"googlejavaformat\">Google Java Format</h1>\n<p>I sincerely do not care how the code is formatted when I come to a new client. Tabs or spaces, brackets on same or new line... it does not matter. What matters is that you agree on something, anything!, and follow it. That is why, if it is my decision, I choose <a href=\"https://github.com/google/google-java-format\">Google Java Format</a>.</p>\n<p>There is <a href=\"https://github.com/google/google-java-format\">the library</a> and also plugins for Maven and Gradle. This means the code style, and the tool support for that, is completely separate from any IDE used. You can let the developers use whatever IDE they want. The important thing is what they produce, the code, which should have no references to any IDE.</p>\n<p>I use these in different projects:</p>\n<ul>\n<li><a href=\"https://github.com/coveo/fmt-maven-plugin\">FMT Maven Plugin</a>. You just need to add it to the <code>pom.xml</code> and it will format the code at compile time. It includes a <a href=\"https://github.com/coveo/fmt-maven-plugin/blob/master/src/main/java/com/coveo/FMT.java#L62\">validate</a> attribute that can be used in continuous integration, perhaps with a build property, to validate that the code is formatted correctly.</li>\n<li><a href=\"https://github.com/revelc/formatter-maven-plugin\">Formatter Maven Plugin</a>. You just need to add it to the <code>pom.xml</code> and it will format the code at compile time. It includes a <a href=\"http://code.revelc.net/formatter-maven-plugin/formatter-maven-plugin/plugin-info.html\">validate</a> goal that can be used in continuous integration to validate that the code is formatted correctly.</li>\n<li><a href=\"https://github.com/sherter/google-java-format-gradle-plugin\">Google Java Format Gradle Plugin</a>. You just need to add it to the <code>build.gradle</code> and it can format the code at compile time with something like <code>compileJava.dependsOn 'googleJavaFormat'</code>. It adds a <code>verifyGoogleJavaFormat</code> task to be used in continuous integration to verify formatting.</li>\n</ul>\n<p>A common problem when auto formatting coding is with newlines. I use <em>phantom comments</em> to deal with that. Just add <code>//</code> at the end of the line, like <a href=\"https://github.com/tomasbjerre/violations-lib/blob/master/src/main/java/se/bjurr/violations/lib/parsers/CheckStyleParser.java\">this</a>, to force the formatter to keep it that way.</p>\n</div>","amp":"30","plaintext":"Most projects, that I work with nowadays, have a defined code standard that\nincludes how the code should be formatted. That is great and improves code\nquality a lot... if followed!\n\nA single person, in the project, can lower the quality significantly by not\nformatting the code correctly. If such code is not blocked, from making it into\nshared branches, you will have the choice of keeping it or fixing it. This is a\nproblem that I find incredibly annoying!\n\n * Keeping it  means you have to live with faulty formatted code. If some\n   developers use something like save actions  in Eclipse then they will have a\n   hard time keeping the lines unchanged when working on the file.\n * Re-formatting it  in a new commit makes it harder to maintain the project\n   because things like git blame  will show the re-format commit, not the\n   original feature commit.\n\nThe most common solution to this, among the clients I've been working with, is\nto use a code style defined in Eclipse. Along with save actions. The code style\nis imported to Eclipse from an XML-file and some clients also use Workspace\nMechanics [http://marketplace.eclipse.org/content/workspace-mechanic]  to setup \nsave actions  properly.\n\nDefining the code style in Eclipse is a very bad idea:\n\n * All people are not productive in Eclipse, some might for example be using\n   InteliJ. They will have to have Eclipse installed just to use it for\n   formatting.\n * The semantics of the settings in the code style may change between versions\n   of Eclipse (I have seen it!). Then you may start getting unnecessary diffs in\n   commits after an upgrade.\n * There is no way, as far as I know, to verify Eclipse-formatting as a step in\n   a continuous integration flow. While it is easy for a reviewer to see that\n   brackets are incorrectly positioned, other things may not be as obvious.\n\nGoogle Java Format\nI sincerely do not care how the code is formatted when I come to a new client.\nTabs or spaces, brackets on same or new line... it does not matter. What matters\nis that you agree on something, anything!, and follow it. That is why, if it is\nmy decision, I choose Google Java Format\n[https://github.com/google/google-java-format].\n\nThere is the library [https://github.com/google/google-java-format]  and also\nplugins for Maven and Gradle. This means the code style, and the tool support\nfor that, is completely separate from any IDE used. You can let the developers\nuse whatever IDE they want. The important thing is what they produce, the code,\nwhich should have no references to any IDE.\n\nI use these in different projects:\n\n * FMT Maven Plugin [https://github.com/coveo/fmt-maven-plugin]. You just need\n   to add it to the pom.xml  and it will format the code at compile time. It\n   includes a validate  attribute that can be used in continuous integration,\n   perhaps with a build property, to validate that the code is formatted\n   correctly.\n * Formatter Maven Plugin [https://github.com/revelc/formatter-maven-plugin].\n   You just need to add it to the pom.xml  and it will format the code at\n   compile time. It includes a validate\n   [http://code.revelc.net/formatter-maven-plugin/formatter-maven-plugin/plugin-info.html] \n    goal that can be used in continuous integration to validate that the code is\n   formatted correctly.\n * Google Java Format Gradle Plugin\n   [https://github.com/sherter/google-java-format-gradle-plugin]. You just need\n   to add it to the build.gradle  and it can format the code at compile time\n   with something like compileJava.dependsOn 'googleJavaFormat'. It adds a \n   verifyGoogleJavaFormat  task to be used in continuous integration to verify\n   formatting.\n\nA common problem when auto formatting coding is with newlines. I use phantom\ncomments  to deal with that. Just add //  at the end of the line, like this\n[https://github.com/tomasbjerre/violations-lib/blob/master/src/main/java/se/bjurr/violations/lib/parsers/CheckStyleParser.java]\n, to force the formatter to keep it that way.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-06-11T19:21:23.000Z","created_by":"1","updated_at":"2017-06-30T20:26:49.000Z","updated_by":"1","published_at":"2017-06-11T20:47:00.000Z","published_by":"1","custom_excerpt":null},{"id":"597b4433e521cb4fbd9186a8","uuid":"9d62c3dd-e910-47a8-bb7a-f060f74e8993","title":"Starta Eget Konsultbolag","slug":"starta-eget-konsultbolag","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Efter över 7 år som anställd konsult (mjukvaruutvecklare) valde jag nyligen att starta eget aktiebolag. Jag gör precis samma sak nu som jag gjorde som anställd men numera i mitt eget bolag istället. Det här inlägget handlar om hur jag gjorde detta. Googlar man kring att starta eget så hittar man mycket. Men jag saknade någon som beskriver det utifrån mina förutsättningar så det är vad jag försöker göra här, eftersom jag tror att många har samma förutsättningar som mig. **Oh, and sorry if you don't speak Swedish =) The topic is about starting your own company in Sweden, you are probably not interested.**\\n\\nSka också säga att allt jag tagit reda på här är genom googling och jag tar inget ansvar för att det jag säger här är korrekt och riktigt! Så var kritisk när du läser vad jag skriver nedan!\\n\\n# Varför Starta Eget?\\n\\nDu kan **skatteplanera**. Om du redan innan året är slut vet [gräns för statlig skatt](http://www.regeringen.se/pressmeddelanden/2017/03/upprakningen-av-skiktgranserna-for-statlig-inkomstskatt-2018-begransas-och-den-sarskilda-inkomstskatten-for-utomlands-bosatta-hojs/) och eventuella avdrag du kommer att göra. Då kan du räkna ut exakt vilken lön du kan betala ut från bolaget för att du som privatperson ska hamna precis på gränsen för statlig skatt.\\n\\nUtöver lönen kan du också göra en **utdelning**. Då skattar du 20% på summan upp till `2.75` gånger föregående års *inkomstbasbeloppet* för 2018 blir det `2.75 * 59300 = 163075`. Denna siffra ska man nog se som ett riktmärke, det är mer komplicerat än så och kommer förmodligen ändras snart också. [Den här blog-posten](https://www.foretagande.se/sa-beraknas-skatt-pa-utdelning-3-12-reglerna/) beskriver detta bra.\\n\\nJag har [gjort ett excel-ark](https://docs.google.com/spreadsheets/d/1jfQSSOEINNq3OVc5pYG5NeFkvgcDqOEu1HjzpU2RQm0/edit?usp=sharing) för att **optimera skatten**. Du kan även läsa mer om [skatter och avgifter på Verksamt](https://www.verksamt.se/starta/skatter-och-avgifter/aktiebolag). Se även [den här sidan](http://www.driva-eget.se/kalkyler/lonekalkyl) för att få en uppfattning om hur mycket lön man kan ta ut.\\n\\nDu väljer själv om du vill betala in till en **tjänstepension** och i så fall vilken. Jag har tvingats betala till SEB under en längre tid. Det enda jag bryr mig om är deras fondutbud. I SEB hittade jag bara en fond, [en räntefond](http://web.msse.se/SEB/SGF/quicktake.aspx?six=SEB-BDSEKA), som kändes \\\"ok\\\". Det är även en fördel att du kan maximera lönen, göra utdelning och om det efter detta fortfarande finns pengar över kan du använda dem till tjänstepension. Du slipper alltså låsa in pengar i en sådan pension om det inte är så att det är en skattemässig fördel. Och det kan du ta ställning till efter att räkenskapsåret är slut.\\n\\nDu **slipper ha lön efter ålder**. Ju yngre du är, ju mer tjänar du på att ha eget konsultbolag. Den dumma tanken att man ska börja på en låg lönenivå och sedan öka ett par procent per år mappar inte alls mot vad kunderna betala för dig per timme. Det är helt ologiskt. Är du yngre anställd konsult så betalar du för dina kollegors lön och förmåner. Det kan mycket väl vara så att du drar in mer pengar än någon som är 20 år äldre.\\n\\nDu kan **köpa kontorsmaterial väldigt billigt**. Dator, headset, hörlurar, skärmar... till ungefär halva priset jämfört med om du köper det privat. Då tänker jag inte bara på momsen. Tänk även på hur mycket pengar bolaget behöver betala ut för att, efter skatt och arbetsgivaravgift, kunna sätta in summan på det privata kontot. Såklart måste man tänka på att det man köper ägs av företaget och inte dig privat.\\n\\nSå fort du har möjlighet att betala ut [skattefritt traktamente](https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm) så ska du göra det. Du slipper tjafs med en arbetsgivare som nekar dig något som är så självklart.\\n\\nDu kan **resa nästan vart du vill** och låta bolaget betala. Det finns ju intressanta utvecklarkonferenser nästan överallt. Vill du åka till Sidney så behöver du bara hitta en [intressant konferens där](http://lmgtfy.com/?q=sidney+developer+conference). Då kan du låta bolaget betala resan dit, hotell under tiden då konferensen varar och resan hem. Innan du resar hem kan du ta en vecka semester =) Inget tjafs med en arbetsgivare som tycker det är för dyrt. Inga dryga övningar, innan eller på plats, utan bara du som bestämmer vilka föreläsningar du tycker är intressanta och som du går på.\\n\\nLåta bolaget **betala alla tjänsteresor**. Om ditt företag är skrivet på adressen du också bor på blir ju alla resor till olika kunder tjänsteresor. Som anställd har jag ibland bott långt ifrån närmsta kontor. Fått betala 1 600 kr per månad, med privata pengar, för pendlingskort. Hade jag haft eget bolag hade det varit en tjänsteresa från mitt kontor till kundens, vilket bolaget kan betala.\\n\\nFör mig personligen så har jag **alltid sett mig själv som mitt eget varumärke**. Då är ju inte steget långt till att faktiskt vara det också. Jag tycker även att de flesta möten är meningslösa och väldigt tråkiga. Det blir klart färre med eget bolag.\\n\\n# Hur Starta Eget?\\n\\nJag listar här kortfattat vad man behöver göra. Längre ner finns vissa steg mer utförligt beskrivna. Du kan räkna med att det tar 1-2 månader från att du skickar in första ansökan till att allt runt bolaget är klart och du kan börja jobba i det. Skadar inte att titta på [andra listor också](https://www.verksamt.se/alla-e-tjanster/din-checklista/aktiebolag) för att säkra att du inte glömt något.\\n\\nJag valde **aktiebolag** framför enskild firma. Då är bolaget en juridisk person som också har ansvaret. En tydlig gräns mellan bolag och privat ekonomi alltså. Jag kan rekommendera [Verksamts jämförelse av företagsformer](https://www.verksamt.se/fundera/valj-foretagsform).\\n\\n**Skapa ansökan** på [Verksamt](https://www.verksamt.se/). Du kommer behöva en verksamhetsbeskrivning. Min ser ut såhär:\\n> Företaget ska bedriva konsultverksamhet företrädesvis inom IT, samt utveckla mjukvaruprodukter, äga och förvalta värdepapper och utöva därmed förenlig verksamhet.\\n\\nNär det gäller **företagsnamn** så rekommenderar jag att bara ta ditt eget namn. AB eller aktiebolag måste vara med i namnet. Så jag valde *Tomas Bjerre AB*. Risken om du väljer något annat är att Bolagsverket nekar dig för att namnet liknar något som redan finns. Onödigt strul och du kan alltid ändra senare.\\n\\nDu kommer behöva ange en **SNI-kod**. Jag valde *62010*.\\n\\nNär du skickat iväg ansökan till Bolagsverket kommer de invänta ett **bankintyg**. Läs mer om att välja bank nedan. Du behöver kontakta en bank för att skapa ett företagskonto. Banken kommer be dig sätta in 50 000 kr på ett speciellt konto. Banken behöver kunna tala om för Bolagsverket att här finns det 50 000 kr som satts in med avsikt att användas för aktiekapitalet. När du gjort detta ger de dig en e-postadress som du sedan ger till Bolagsverket (via verksamt.se). Sedan frågan Bolagsverket banken om pengarna är där och när banken svarar ja registreras bolaget. Så fort bolaget är skapat så har du sedan ett företagskonto där det från start finns 50 000 kr.\\n\\nNär du startar aktiebolag ska bolaget ha **F-skatt** och du som privatperson har A-skatt. Jag valde **kvartalsmoms**. **Räkenskapsåret** valde jag som *0101 - 1231*. Som **redovisningsmetod** valde jag [kontantmetoden](https://www.e-conomic.se/bokforingsprogram/ordlista/kontantmetoden) (kallas även bokslutsmetoden). Jag uppfattade den som enklast, se hur man [bokför köpt med kreditkort](https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi) t.ex.\\n\\nDet är väldigt svårt att uppskatta den **förväntade vinsten** första året. Andra året kommer Skatteverket föreslå en. Ett tips är att ange den lågt. I mitt fall skulle jag först betala in 20 000 kr innan jag hunnit få en enda inkomst i bolaget. Skulle du råka ut för det är det bara att göra en ny preliminär inkomstdeklaration via Skatteverket och ange en lägre förväntad vinst. Då fick jag ner denna siffran till 7 000 kr istället.\\n\\nDet finns många smidiga **bokföringsprogram**. [Redovisningen](https://sv.wikipedia.org/wiki/Redovisning) var nog det jag var mest rädd för i början. Jag märkte tidigt att när jag googlade om hur man bokför olika saker så kom jag ofta in på [Visma:s support forum](https://forum.vismaspcs.se/visma_spcs). Jag har tidigare använt deras tidrapportering, PX, vilket suger något helt otroligt. Ser ut som en sommarjobbare hackade ihop det för 15 år sedan och att man inte rört det sedan dess. Men även om jag var väldigt skeptisk till detta bolag så valde jag ändå <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> för bokföring just för att deras support verkar vara helt exemplarisk. Att direkt bokföra ett kvitto i <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> är betydligt enklare än det jag tidigare gjort via tidrapportering som anställd. Du kanske t.ex. vill bokföra [bokföringsprogrammet](https://forum.vismaspcs.se/visma_spcs/topics/8fxz374h0czze?topic-reply-list%5Bsettings%5D%5Bfilter_by%5D=all), [köp av dator och försäkring](https://forum.vismaspcs.se/visma_spcs/topics/7h3lv4csqal8w) eller [köp av tågbiljett](https://forum.vismaspcs.se/visma_spcs/topics/con2lpq5fex2f). De [gör t.o.m. filmer](https://www.youtube.com/watch?v=jGgnxd6uBh4) där de visar vissa flöden. Hoppas jag är trovärdig trots att jag gått med i deras affiliate-program och får betalt för att hänvisa andra dit =)\\n\\n<a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">\\n\\n![Visma eEkonomi](/content/images/2017/07/affiliate-2014-vismaeekonomi1_728x90_eeko.gif)\\n\\n</a>\\n\\nDu lär behöva en **mobil** i bolaget. Som jag förstår det är det ok att köpa telefonen på bolaget. Även telefoni och SMS är ok. Datatrafiken däremot kan behöva förmånsbeskattas. Det i kombination med att man slipper många dryga samtal om man istället har ett privat abonnemang, gjorde att jag köpte den privat.\\n\\nDu lär behöva en **ansvarsförsäkring**. Jag valde en [från If](https://www.if.se/web/se/foretag/varaforsakringar/offert/pages/default.aspx?varde=startforsakring) och fick betala 5 294 kr. Har du inte det och du råkar ut för något, säg att någon kräver dig på flera miljoner, så konkursar du bara bolaget och slipper undan. Men med en ansvarsförsäkring så kan du, kanske, göra rätt för dig och betala. På så vis blir du en mer attraktiv konsult att anlita och det står även ofta i kontrakten att du ska ha en försäkring.\\n\\nJag valde att kontakta en **redovisningskonsult** som hjälper mig med ekonomiska frågor samt tar hand om **bokslut** / **årsredovisning** / **deklaration**. Jag tar hand om löpande bokföring samt kvartalsmoms, skatter och lön. Det kostar cirka 6 000 kr per år. En redovisningskonsult kan hjälpa dig med allt möjligt i bolaget. Vissa ger dem fullmakt så de kan sköta all ekonomi. Jag fick tag på honom genom en bekant som tipsade men annars är det enkelt att googla. Har du valt Visma så [kan de hjälpa dig](https://vismaspcs.se/produkter/redovisning/visma-eekonomi-byra). I <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> kan du även skapa en inloggning till din redovisningskonsult.\\n\\n**Revisor** är valfritt om man [omsätter under 3 miljoner](http://www.bolagsverket.se/ff/foretagsformer/aktiebolag/starta/revisor). Det använder jag inte.\\n\\nDet kan också vara bra att ha klart för sig **hur man hittar kunder**. Det finns många rena konsultmäklare som tar en procentsats, ofta mellan 10-20% på din timpenning om du tar ett uppdrag via dem. De har ofta ramavtal med stora konsultköpare. Är du redan anställd som konsult så kanske du i början fortsätter med samma kund fast som underkonsult istället. Se, t.ex.:\\n\\n * [Brainville](https://www.brainville.com/)\\n * [EWork](https://www.eworkgroup.com/se/)\\n\\n## Bank\\n\\nJag frågade först några banker via telefon och mail (ICA, Avanza, Swedbank). Det kändes som att de inte riktigt förstod vad jag menade när jag sa att jag ville ha ett **bankintyg**. Det kändes opålitligt helt enkelt. Det värsta var när jag gick till Swedbanks kontor och bad om att få intyget.\\n\\nJag började med att föra över aktiekapitalet till ett av mina konton hos Swedbank.\\n\\nNästa steg var att promenera till närmsta Swedbank-kontor (Jönköping) för att be om bankintyg att lämna till Bolagsverket. Jag berättade att hela kapitalet redan finns på banken och att jag ville ha ett bankintyg. Svaret blev att jag skulle:\\n\\n* Gå till Nyföretagarcentrum och prata igenom företagsidén.\\n* Lämna in en skriftlig affärsplan.\\n* Lämna in en skriftlig budget.\\n* Inom ett par veckor ha ett fysiskt möte med Swedbank där vi diskuterar igenom detta.\\n\\nHur lång tid detta skulle ta innan jag kunde få mitt intyg kunde de inte svara på. Obegripligt för mig.\\n\\n* Kapitalet hade de ju redan! Jag ville bara att de skulle intyga att det fanns där.\\n* Jag bad inte om något lån och har inte heller några lån. Jag har faktiskt ett ypperligt kreditbetyg.\\n* Jag har jobbat som IT-konsult i över 7 år och det var också precis vad jag skulle göra i bolaget. Alltså inte en unik affärsidé alls på något vis. Inget konstigt alls.\\n* Jag kunde, t.o.m., visa att jag hade ett kontrakt från dag 1 och 6 månader framåt.\\n\\nJag känner många som har gjort samma sak som jag ville göra. Efter att ha pratade med några stycken märkte jag att fler har samma erfarenhet av Swedbank.\\n\\n**Välj inte Swedbank!**\\n\\n**Jag valde Danskebank**. Du fyller bara i [deras formulär](https://danskebank.se/sv-se/Foretag/Smaforetag/Pages/Product-packages.aspx) så ringer de upp. Danskebank sköter allt per telefon och det fungerar mycket bra. De bad inte om någon affärsplan eller budget utan litade på mig direkt. De visste också direkt vad det handlade om och de kändes pålitliga. Eftersom jag inte var kund där sedan tidigare så behövde de skicka lite papper till mig med posten först. Men inom en vecka hade jag intyget! Snabbt, enkelt, smidigt och inget meningslöst krångel.\\n\\nJag valde *Danske Business Plus* för 99 kr/mån. **<a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> stödjer även Danskebank** på så vis att man kan klistra in kontoutdraget från banken in i <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a>, för att automatiskt skapa bankhändelser. Sedan matchar man dem mot leverantörsfakturor eller verifikationer.\\n\\n# Hur Driva Eget?\\n\\nJag har lagt in återkommande händelser i Google Calendar för de olika datumen. Sedan angivit att de ska upprepas månadsvis eller, i vissa fall, årsvis.\\n\\nJag valde **kvartalsmoms**, alltså att jag efter varje kvartal redovisar och betalar in eventuell moms. Mer information om det finns [här]( https://www.verksamt.se/driva/skatter-och-avgifter/moms-redovisa-och-betala). Så fort kvartalet är slut kan man lämna in deklarationen. Man har ungefär 1.5 månad på sig att lämna in den. Även för detta har Visma gjort en film som visar [hur du gör i eEkonomi](https://www.youtube.com/watch?v=gPv_SahMnEw). Som jag förstår det använder man kontot *1630* (eller *2012* om det är enskild firma) just för att [alla händelser mot Skatteverket ska gå via detta konto](https://forum.vismaspcs.se/visma_spcs/topics/maste-man-anvanda-sig-av-skattekontot-1630). Hur det fungerar med att betala, och få tillbaka moms, [beskriver Skatteverkets här](https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html). Så kortfattat om du har <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> och kvartalsmoms så ska du vid varje kvartalsslut:\\n\\n * Skapa en momsredovisning för kvartalet via bokföring / momsredovisning.\\n * Ladda ner *eskd*-filen.\\n * Skapa en [momsdeklaration](https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms.4.7459477810df5bccdd480006935.html) enligt [Visma:s video](https://www.youtube.com/watch?v=gPv_SahMnEw).\\n * Ladda upp *eskd*-filen hos [Skatteverket](https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html).\\n * Ladda ner [transaktioner från Skatteverket till ditt skattekonto](https://www.youtube.com/watch?v=-7cDnn-NaME) och matchar dem sedan mot momshändelsen i dina bokföringshändelser.\\n * När du senare betalat in, eller fått betalt, skapa och bokför bankhändelsen på företagskontot. Det visas i slutet på [den här videon](https://www.youtube.com/watch?v=gPv_SahMnEw). Tänk på att använda *1630* för AB och *2012* för enskild firma.\\n\\nSkatteverket har skickat brev till dig med datum då du ska betala **debiterad preliminärskatt**. Det här är något du betalar varje månad och baserar sig på din förväntade vinst som du angav i din preliminära inkomstdeklaration. Du har fått ett besked från Skatteverket där det står datum och hur mycket du ska betala. Om du har <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> kan du följa deras [film om skattekontot](https://www.youtube.com/watch?v=-7cDnn-NaME). Kort sagt så betalar du in från företagskontot, importerar bankhändelser från företagskontot och från skattekontot, bokför inbetalningen mot transaktionen på skattekontot.\\n\\nNär du ska betala ut **Lön** behöver du betala *skatt*, *arbetsgivaravgift* samt själva *lönen*. Både *skatt* och *arbetsgivaravgift* betalas till företagets *skattekonto* så det är 2 betalningar som behöver göras från företagskontot. Om du använder <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> kan du göra såhär. Finns även en [film här](https://www.youtube.com/watch?v=ig2C9gQg2Eg).\\n* Under *lön* i huvudnenyn väljer du *anställda*. Lägg upp den anställde. Du kommer behöva *Skattetabell* att använda. Den anställde kan [logga in](https://www.skatteverket.se/) hos Skatteverket och hittar då skattetabell under \\\"Skatter och deklarationer\\\".\\n* Under *lön* i huvudnenyn väljer du *lönebesked* och skapar ett nytt.\\n* Ange lönen och välj bokför.\\n* Logga in på banken och betala ut lönen, efter skatt, till den anställdes konto.\\n* Importera bankhändelsen till *företagskontot* via *kassa och bankhändelser*.\\n* <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> kommer föreslå att du matchar bankhändelsen mot löneutbetalningen, gör det. Nu är du klar med lönen, och nästa moment är att betala skatt och arbetsgivaravgift.\\n\\n**Arbetsgivardeklaration** lämnas enkelt via [Skatteverkets webbsida](https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html).\\n\\n* Om du inte har betalat ut någon lön sätter du bara **0** i de obligatoriska fälten och skickar in.\\n* Om du har betalat ut lön, och använder <a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a>.\\n  * Gå in under *lön* i huvudmenyn och välj *arbetsgivardeklaration*.\\n  * Skapa ny.\\n  * Välj månaden då lönen betaldes ut.\\n  * Välj *bokför*. \\n  * Nu kan du [exportera en fil](https://www.youtube.com/watch?v=ig2C9gQg2Eg) om du klickar på *åtgärder* för deklarationen.\\n  * [Lämna in arbetsgivardeklarationen](https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html) hos Skatteverket genom att importera filen.\\n  * På kvittensen visas ett bankgiro och OCR att använda för att betala in skatten till företagets skattekonto.\\n  * **TODO: Bokför arbetgivaravgift och skatt**\\n\\n<a href=\\\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\\\" rel=\\\"nofollow\\\">Visma eEkonomi</a> har en färdig mall för **fakturor**. Du anger ditt företags bankgiro, och/eller kontonummer, lägger upp kunder och artiklar. Sedan kan du enkelt skapa fakturor som du sedan kan skriva ut, spara som PDF eller maila.\\n\\nOm du **betalar ut traktamente** behöver du kunna bevisa att [resorna ägt rum och varit tjänsteresor](https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm). Därför kan det vara klokt att föra anteckningar för resor. I mitt fall åker jag alltid tåg och kommer hänvisa till tågbiljetterna om jag får revision av Skatteverket.\\n\\n**TODO: Traktamente**\\nhttps://tomasbjerre.github.io/traktamente/\\n\\n**TODO: Direktpension https://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension**\\n\\nMan hör ibland uttrycket **skriva av** och jag tror många missförstår det, kanske även jag =) Men jag tolkar det som att allt man köper för under ett halvt prisbasbelopp (ungefär 22 000 kr) skrivs av direkt, kostar det mer skriver man av det under flera år. Att *skriva av* innebär att man inte tar upp det som en tillgång, en inventarie, i bokföringen. Det är dock inte samma sak som att man får ge bort prylen till sig själv eller någon annan. Men jag är osäker, [och många med mig](https://www.flashback.org/p49423662).\\n\\nAtt bokföra köp gjorda med **kreditkort** är lite speciellt men det har Visma en väldigt [bra artikel](https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi) om.\\n\\nPå **bokslutsdagen, sista dagen på räkenskapsåret, måste [obetalda fakturor tas upp i bokföring](https://www.verksamt.se/driva/ekonomi-och-bokforing/lopande-bokforing)** även om du använder kontantmetoden. Det beskriver också Visma [här](https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi).\\n\\nJag sparar alltid alla **kvitton** direkt på Google Drive. Är det inte digitalt fotar jag av med mobilen, laddar upp bilden och sparar även original-kvittot i en pärm. I bokföringsprogrammet är jag också noga med att **ladda upp bilder på varje verifikation**. [Bokföringslagen](https://www.riksdagen.se/sv/dokument-lagar/dokument/svensk-forfattningssamling/bokforingslag-19991078_sfs-1999-1078) säger att originalen ska sparas, så digitala ska sparas digitalt och de på papper sparas på papper. Jag tycker även att [den här artikeln](https://vismaspcs.se/ditt-foretagande/byra/de-har-kopiorna-behover-du-inte-skriva-ut) beskriver det bra. Även andra dokument fotar jag av och sparar på Google Drive, som beslut från Skatteverket t.ex. Väldigt smidigt att kunna läsa allt var man än är.  Det är ganska enkelt att få tag på ett rejält brandskyddat kassaskåp ([#1](http://www.clasohlson.com/se/Dokumentsk%C3%A5p-Chubbsafes-Executive-40/Pr342428000) eller [#2](http://www.biltema.se/sv/Hem/Sakerhet-och-larm/Sakerhetsbox/Kassaskap-brandsakert-2000033385/)) så att man kan spara papper korrekt enligt lagstiftningen.\\n\\nVisma har en väldigt bra [gratis broschyr om bokföring](http://download.vismaspcs.se/pdf/bokf%C3%B6ring-f%C3%B6r-nyb%C3%B6rjare.pdf?utm_source=Eloqua&utm_medium=email&utm_content=SE_SP_SI_Onboarding-eEko-Std-4&utm_campaign=SE_SP_SI_Onboarding-eA-Std-1704).\\n\\n# Övrigt\\n\\nOm du **veckopendlar** som jag så kanske du har en **lägenhet på arbetsorten**. Då kan man tänka sig att man [låter bolaget betala den](http://www.skatter.se/?q=node/2619). Jag blev rekommenderad att ta den privat och betala ut mer lön från bolaget istället. Då räknar jag på detta vid utbetalning av lön så att lön efter avdrag hamnar på gränsen för statlig skatt. Avdraget gör jag alltså i min privata deklaration. Väljer man att låta bolaget direkt betala lägenheten blir det lite krångligare med bokföring och deklaration. Det kan också vara så att Skatteverket ser det som en förmån. Så det här kändes enklast.\\n\\nDet finns bolag som har som **affärsidé att bara ha underkonsulter**. De åker på konferensresor och har gemensam kontorslokal precis som vilket annat bolag som helst. Skillnaden är bara att alla är underkonsulter. Detta bolag hjälper dig att starta ditt eget bolag och hitta kunder. De har ramavtal med stora konsultköpare och kan ordna bra timpriser. Ett sånt bolag är [Kvadrat](http://www.kvadrat.se/). Jag känner några stycken som jobbar där och de är alla nöjda. Jag valde dock att starta helt på egen hand.\\n\\nHar du frågor om skatter så är det smidigt att man kan [maila Skatteverket](https://www.skatteverket.se/omoss/kontaktaoss/mejla/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Efter över 7 år som anställd konsult (mjukvaruutvecklare) valde jag nyligen att starta eget aktiebolag. Jag gör precis samma sak nu som jag gjorde som anställd men numera i mitt eget bolag istället. Det här inlägget handlar om hur jag gjorde detta. Googlar man kring att starta eget så hittar man mycket. Men jag saknade någon som beskriver det utifrån mina förutsättningar så det är vad jag försöker göra här, eftersom jag tror att många har samma förutsättningar som mig. <strong>Oh, and sorry if you don't speak Swedish =) The topic is about starting your own company in Sweden, you are probably not interested.</strong></p>\n<p>Ska också säga att allt jag tagit reda på här är genom googling och jag tar inget ansvar för att det jag säger här är korrekt och riktigt! Så var kritisk när du läser vad jag skriver nedan!</p>\n<h1 id=\"varfrstartaeget\">Varför Starta Eget?</h1>\n<p>Du kan <strong>skatteplanera</strong>. Om du redan innan året är slut vet <a href=\"http://www.regeringen.se/pressmeddelanden/2017/03/upprakningen-av-skiktgranserna-for-statlig-inkomstskatt-2018-begransas-och-den-sarskilda-inkomstskatten-for-utomlands-bosatta-hojs/\">gräns för statlig skatt</a> och eventuella avdrag du kommer att göra. Då kan du räkna ut exakt vilken lön du kan betala ut från bolaget för att du som privatperson ska hamna precis på gränsen för statlig skatt.</p>\n<p>Utöver lönen kan du också göra en <strong>utdelning</strong>. Då skattar du 20% på summan upp till <code>2.75</code> gånger föregående års <em>inkomstbasbeloppet</em> för 2018 blir det <code>2.75 * 59300 = 163075</code>. Denna siffra ska man nog se som ett riktmärke, det är mer komplicerat än så och kommer förmodligen ändras snart också. <a href=\"https://www.foretagande.se/sa-beraknas-skatt-pa-utdelning-3-12-reglerna/\">Den här blog-posten</a> beskriver detta bra.</p>\n<p>Jag har <a href=\"https://docs.google.com/spreadsheets/d/1jfQSSOEINNq3OVc5pYG5NeFkvgcDqOEu1HjzpU2RQm0/edit?usp=sharing\">gjort ett excel-ark</a> för att <strong>optimera skatten</strong>. Du kan även läsa mer om <a href=\"https://www.verksamt.se/starta/skatter-och-avgifter/aktiebolag\">skatter och avgifter på Verksamt</a>. Se även <a href=\"http://www.driva-eget.se/kalkyler/lonekalkyl\">den här sidan</a> för att få en uppfattning om hur mycket lön man kan ta ut.</p>\n<p>Du väljer själv om du vill betala in till en <strong>tjänstepension</strong> och i så fall vilken. Jag har tvingats betala till SEB under en längre tid. Det enda jag bryr mig om är deras fondutbud. I SEB hittade jag bara en fond, <a href=\"http://web.msse.se/SEB/SGF/quicktake.aspx?six=SEB-BDSEKA\">en räntefond</a>, som kändes &quot;ok&quot;. Det är även en fördel att du kan maximera lönen, göra utdelning och om det efter detta fortfarande finns pengar över kan du använda dem till tjänstepension. Du slipper alltså låsa in pengar i en sådan pension om det inte är så att det är en skattemässig fördel. Och det kan du ta ställning till efter att räkenskapsåret är slut.</p>\n<p>Du <strong>slipper ha lön efter ålder</strong>. Ju yngre du är, ju mer tjänar du på att ha eget konsultbolag. Den dumma tanken att man ska börja på en låg lönenivå och sedan öka ett par procent per år mappar inte alls mot vad kunderna betala för dig per timme. Det är helt ologiskt. Är du yngre anställd konsult så betalar du för dina kollegors lön och förmåner. Det kan mycket väl vara så att du drar in mer pengar än någon som är 20 år äldre.</p>\n<p>Du kan <strong>köpa kontorsmaterial väldigt billigt</strong>. Dator, headset, hörlurar, skärmar... till ungefär halva priset jämfört med om du köper det privat. Då tänker jag inte bara på momsen. Tänk även på hur mycket pengar bolaget behöver betala ut för att, efter skatt och arbetsgivaravgift, kunna sätta in summan på det privata kontot. Såklart måste man tänka på att det man köper ägs av företaget och inte dig privat.</p>\n<p>Så fort du har möjlighet att betala ut <a href=\"https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm\">skattefritt traktamente</a> så ska du göra det. Du slipper tjafs med en arbetsgivare som nekar dig något som är så självklart.</p>\n<p>Du kan <strong>resa nästan vart du vill</strong> och låta bolaget betala. Det finns ju intressanta utvecklarkonferenser nästan överallt. Vill du åka till Sidney så behöver du bara hitta en <a href=\"http://lmgtfy.com/?q=sidney+developer+conference\">intressant konferens där</a>. Då kan du låta bolaget betala resan dit, hotell under tiden då konferensen varar och resan hem. Innan du resar hem kan du ta en vecka semester =) Inget tjafs med en arbetsgivare som tycker det är för dyrt. Inga dryga övningar, innan eller på plats, utan bara du som bestämmer vilka föreläsningar du tycker är intressanta och som du går på.</p>\n<p>Låta bolaget <strong>betala alla tjänsteresor</strong>. Om ditt företag är skrivet på adressen du också bor på blir ju alla resor till olika kunder tjänsteresor. Som anställd har jag ibland bott långt ifrån närmsta kontor. Fått betala 1 600 kr per månad, med privata pengar, för pendlingskort. Hade jag haft eget bolag hade det varit en tjänsteresa från mitt kontor till kundens, vilket bolaget kan betala.</p>\n<p>För mig personligen så har jag <strong>alltid sett mig själv som mitt eget varumärke</strong>. Då är ju inte steget långt till att faktiskt vara det också. Jag tycker även att de flesta möten är meningslösa och väldigt tråkiga. Det blir klart färre med eget bolag.</p>\n<h1 id=\"hurstartaeget\">Hur Starta Eget?</h1>\n<p>Jag listar här kortfattat vad man behöver göra. Längre ner finns vissa steg mer utförligt beskrivna. Du kan räkna med att det tar 1-2 månader från att du skickar in första ansökan till att allt runt bolaget är klart och du kan börja jobba i det. Skadar inte att titta på <a href=\"https://www.verksamt.se/alla-e-tjanster/din-checklista/aktiebolag\">andra listor också</a> för att säkra att du inte glömt något.</p>\n<p>Jag valde <strong>aktiebolag</strong> framför enskild firma. Då är bolaget en juridisk person som också har ansvaret. En tydlig gräns mellan bolag och privat ekonomi alltså. Jag kan rekommendera <a href=\"https://www.verksamt.se/fundera/valj-foretagsform\">Verksamts jämförelse av företagsformer</a>.</p>\n<p><strong>Skapa ansökan</strong> på <a href=\"https://www.verksamt.se/\">Verksamt</a>. Du kommer behöva en verksamhetsbeskrivning. Min ser ut såhär:</p>\n<blockquote>\n<p>Företaget ska bedriva konsultverksamhet företrädesvis inom IT, samt utveckla mjukvaruprodukter, äga och förvalta värdepapper och utöva därmed förenlig verksamhet.</p>\n</blockquote>\n<p>När det gäller <strong>företagsnamn</strong> så rekommenderar jag att bara ta ditt eget namn. AB eller aktiebolag måste vara med i namnet. Så jag valde <em>Tomas Bjerre AB</em>. Risken om du väljer något annat är att Bolagsverket nekar dig för att namnet liknar något som redan finns. Onödigt strul och du kan alltid ändra senare.</p>\n<p>Du kommer behöva ange en <strong>SNI-kod</strong>. Jag valde <em>62010</em>.</p>\n<p>När du skickat iväg ansökan till Bolagsverket kommer de invänta ett <strong>bankintyg</strong>. Läs mer om att välja bank nedan. Du behöver kontakta en bank för att skapa ett företagskonto. Banken kommer be dig sätta in 50 000 kr på ett speciellt konto. Banken behöver kunna tala om för Bolagsverket att här finns det 50 000 kr som satts in med avsikt att användas för aktiekapitalet. När du gjort detta ger de dig en e-postadress som du sedan ger till Bolagsverket (via <a href=\"http://verksamt.se\">verksamt.se</a>). Sedan frågan Bolagsverket banken om pengarna är där och när banken svarar ja registreras bolaget. Så fort bolaget är skapat så har du sedan ett företagskonto där det från start finns 50 000 kr.</p>\n<p>När du startar aktiebolag ska bolaget ha <strong>F-skatt</strong> och du som privatperson har A-skatt. Jag valde <strong>kvartalsmoms</strong>. <strong>Räkenskapsåret</strong> valde jag som <em>0101 - 1231</em>. Som <strong>redovisningsmetod</strong> valde jag <a href=\"https://www.e-conomic.se/bokforingsprogram/ordlista/kontantmetoden\">kontantmetoden</a> (kallas även bokslutsmetoden). Jag uppfattade den som enklast, se hur man <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi\">bokför köpt med kreditkort</a> t.ex.</p>\n<p>Det är väldigt svårt att uppskatta den <strong>förväntade vinsten</strong> första året. Andra året kommer Skatteverket föreslå en. Ett tips är att ange den lågt. I mitt fall skulle jag först betala in 20 000 kr innan jag hunnit få en enda inkomst i bolaget. Skulle du råka ut för det är det bara att göra en ny preliminär inkomstdeklaration via Skatteverket och ange en lägre förväntad vinst. Då fick jag ner denna siffran till 7 000 kr istället.</p>\n<p>Det finns många smidiga <strong>bokföringsprogram</strong>. <a href=\"https://sv.wikipedia.org/wiki/Redovisning\">Redovisningen</a> var nog det jag var mest rädd för i början. Jag märkte tidigt att när jag googlade om hur man bokför olika saker så kom jag ofta in på <a href=\"https://forum.vismaspcs.se/visma_spcs\">Visma:s support forum</a>. Jag har tidigare använt deras tidrapportering, PX, vilket suger något helt otroligt. Ser ut som en sommarjobbare hackade ihop det för 15 år sedan och att man inte rört det sedan dess. Men även om jag var väldigt skeptisk till detta bolag så valde jag ändå <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> för bokföring just för att deras support verkar vara helt exemplarisk. Att direkt bokföra ett kvitto i <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> är betydligt enklare än det jag tidigare gjort via tidrapportering som anställd. Du kanske t.ex. vill bokföra <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/8fxz374h0czze?topic-reply-list%5Bsettings%5D%5Bfilter_by%5D=all\">bokföringsprogrammet</a>, <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/7h3lv4csqal8w\">köp av dator och försäkring</a> eller <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/con2lpq5fex2f\">köp av tågbiljett</a>. De <a href=\"https://www.youtube.com/watch?v=jGgnxd6uBh4\">gör t.o.m. filmer</a> där de visar vissa flöden. Hoppas jag är trovärdig trots att jag gått med i deras affiliate-program och får betalt för att hänvisa andra dit =)</p>\n<a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">\n<p><img src=\"/content/images/2017/07/affiliate-2014-vismaeekonomi1_728x90_eeko.gif\" alt=\"Visma eEkonomi\"></p>\n</a>\n<p>Du lär behöva en <strong>mobil</strong> i bolaget. Som jag förstår det är det ok att köpa telefonen på bolaget. Även telefoni och SMS är ok. Datatrafiken däremot kan behöva förmånsbeskattas. Det i kombination med att man slipper många dryga samtal om man istället har ett privat abonnemang, gjorde att jag köpte den privat.</p>\n<p>Du lär behöva en <strong>ansvarsförsäkring</strong>. Jag valde en <a href=\"https://www.if.se/web/se/foretag/varaforsakringar/offert/pages/default.aspx?varde=startforsakring\">från If</a> och fick betala 5 294 kr. Har du inte det och du råkar ut för något, säg att någon kräver dig på flera miljoner, så konkursar du bara bolaget och slipper undan. Men med en ansvarsförsäkring så kan du, kanske, göra rätt för dig och betala. På så vis blir du en mer attraktiv konsult att anlita och det står även ofta i kontrakten att du ska ha en försäkring.</p>\n<p>Jag valde att kontakta en <strong>redovisningskonsult</strong> som hjälper mig med ekonomiska frågor samt tar hand om <strong>bokslut</strong> / <strong>årsredovisning</strong> / <strong>deklaration</strong>. Jag tar hand om löpande bokföring samt kvartalsmoms, skatter och lön. Det kostar cirka 6 000 kr per år. En redovisningskonsult kan hjälpa dig med allt möjligt i bolaget. Vissa ger dem fullmakt så de kan sköta all ekonomi. Jag fick tag på honom genom en bekant som tipsade men annars är det enkelt att googla. Har du valt Visma så <a href=\"https://vismaspcs.se/produkter/redovisning/visma-eekonomi-byra\">kan de hjälpa dig</a>. I <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> kan du även skapa en inloggning till din redovisningskonsult.</p>\n<p><strong>Revisor</strong> är valfritt om man <a href=\"http://www.bolagsverket.se/ff/foretagsformer/aktiebolag/starta/revisor\">omsätter under 3 miljoner</a>. Det använder jag inte.</p>\n<p>Det kan också vara bra att ha klart för sig <strong>hur man hittar kunder</strong>. Det finns många rena konsultmäklare som tar en procentsats, ofta mellan 10-20% på din timpenning om du tar ett uppdrag via dem. De har ofta ramavtal med stora konsultköpare. Är du redan anställd som konsult så kanske du i början fortsätter med samma kund fast som underkonsult istället. Se, t.ex.:</p>\n<ul>\n<li><a href=\"https://www.brainville.com/\">Brainville</a></li>\n<li><a href=\"https://www.eworkgroup.com/se/\">EWork</a></li>\n</ul>\n<h2 id=\"bank\">Bank</h2>\n<p>Jag frågade först några banker via telefon och mail (ICA, Avanza, Swedbank). Det kändes som att de inte riktigt förstod vad jag menade när jag sa att jag ville ha ett <strong>bankintyg</strong>. Det kändes opålitligt helt enkelt. Det värsta var när jag gick till Swedbanks kontor och bad om att få intyget.</p>\n<p>Jag började med att föra över aktiekapitalet till ett av mina konton hos Swedbank.</p>\n<p>Nästa steg var att promenera till närmsta Swedbank-kontor (Jönköping) för att be om bankintyg att lämna till Bolagsverket. Jag berättade att hela kapitalet redan finns på banken och att jag ville ha ett bankintyg. Svaret blev att jag skulle:</p>\n<ul>\n<li>Gå till Nyföretagarcentrum och prata igenom företagsidén.</li>\n<li>Lämna in en skriftlig affärsplan.</li>\n<li>Lämna in en skriftlig budget.</li>\n<li>Inom ett par veckor ha ett fysiskt möte med Swedbank där vi diskuterar igenom detta.</li>\n</ul>\n<p>Hur lång tid detta skulle ta innan jag kunde få mitt intyg kunde de inte svara på. Obegripligt för mig.</p>\n<ul>\n<li>Kapitalet hade de ju redan! Jag ville bara att de skulle intyga att det fanns där.</li>\n<li>Jag bad inte om något lån och har inte heller några lån. Jag har faktiskt ett ypperligt kreditbetyg.</li>\n<li>Jag har jobbat som IT-konsult i över 7 år och det var också precis vad jag skulle göra i bolaget. Alltså inte en unik affärsidé alls på något vis. Inget konstigt alls.</li>\n<li>Jag kunde, t.o.m., visa att jag hade ett kontrakt från dag 1 och 6 månader framåt.</li>\n</ul>\n<p>Jag känner många som har gjort samma sak som jag ville göra. Efter att ha pratade med några stycken märkte jag att fler har samma erfarenhet av Swedbank.</p>\n<p><strong>Välj inte Swedbank!</strong></p>\n<p><strong>Jag valde Danskebank</strong>. Du fyller bara i <a href=\"https://danskebank.se/sv-se/Foretag/Smaforetag/Pages/Product-packages.aspx\">deras formulär</a> så ringer de upp. Danskebank sköter allt per telefon och det fungerar mycket bra. De bad inte om någon affärsplan eller budget utan litade på mig direkt. De visste också direkt vad det handlade om och de kändes pålitliga. Eftersom jag inte var kund där sedan tidigare så behövde de skicka lite papper till mig med posten först. Men inom en vecka hade jag intyget! Snabbt, enkelt, smidigt och inget meningslöst krångel.</p>\n<p>Jag valde <em>Danske Business Plus</em> för 99 kr/mån. <strong><a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> stödjer även Danskebank</strong> på så vis att man kan klistra in kontoutdraget från banken in i <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a>, för att automatiskt skapa bankhändelser. Sedan matchar man dem mot leverantörsfakturor eller verifikationer.</p>\n<h1 id=\"hurdrivaeget\">Hur Driva Eget?</h1>\n<p>Jag har lagt in återkommande händelser i Google Calendar för de olika datumen. Sedan angivit att de ska upprepas månadsvis eller, i vissa fall, årsvis.</p>\n<p>Jag valde <strong>kvartalsmoms</strong>, alltså att jag efter varje kvartal redovisar och betalar in eventuell moms. Mer information om det finns <a href=\"https://www.verksamt.se/driva/skatter-och-avgifter/moms-redovisa-och-betala\">här</a>. Så fort kvartalet är slut kan man lämna in deklarationen. Man har ungefär 1.5 månad på sig att lämna in den. Även för detta har Visma gjort en film som visar <a href=\"https://www.youtube.com/watch?v=gPv_SahMnEw\">hur du gör i eEkonomi</a>. Som jag förstår det använder man kontot <em>1630</em> (eller <em>2012</em> om det är enskild firma) just för att <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/maste-man-anvanda-sig-av-skattekontot-1630\">alla händelser mot Skatteverket ska gå via detta konto</a>. Hur det fungerar med att betala, och få tillbaka moms, <a href=\"https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html\">beskriver Skatteverkets här</a>. Så kortfattat om du har <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> och kvartalsmoms så ska du vid varje kvartalsslut:</p>\n<ul>\n<li>Skapa en momsredovisning för kvartalet via bokföring / momsredovisning.</li>\n<li>Ladda ner <em>eskd</em>-filen.</li>\n<li>Skapa en <a href=\"https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms.4.7459477810df5bccdd480006935.html\">momsdeklaration</a> enligt <a href=\"https://www.youtube.com/watch?v=gPv_SahMnEw\">Visma:s video</a>.</li>\n<li>Ladda upp <em>eskd</em>-filen hos <a href=\"https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html\">Skatteverket</a>.</li>\n<li>Ladda ner <a href=\"https://www.youtube.com/watch?v=-7cDnn-NaME\">transaktioner från Skatteverket till ditt skattekonto</a> och matchar dem sedan mot momshändelsen i dina bokföringshändelser.</li>\n<li>När du senare betalat in, eller fått betalt, skapa och bokför bankhändelsen på företagskontot. Det visas i slutet på <a href=\"https://www.youtube.com/watch?v=gPv_SahMnEw\">den här videon</a>. Tänk på att använda <em>1630</em> för AB och <em>2012</em> för enskild firma.</li>\n</ul>\n<p>Skatteverket har skickat brev till dig med datum då du ska betala <strong>debiterad preliminärskatt</strong>. Det här är något du betalar varje månad och baserar sig på din förväntade vinst som du angav i din preliminära inkomstdeklaration. Du har fått ett besked från Skatteverket där det står datum och hur mycket du ska betala. Om du har <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> kan du följa deras <a href=\"https://www.youtube.com/watch?v=-7cDnn-NaME\">film om skattekontot</a>. Kort sagt så betalar du in från företagskontot, importerar bankhändelser från företagskontot och från skattekontot, bokför inbetalningen mot transaktionen på skattekontot.</p>\n<p>När du ska betala ut <strong>Lön</strong> behöver du betala <em>skatt</em>, <em>arbetsgivaravgift</em> samt själva <em>lönen</em>. Både <em>skatt</em> och <em>arbetsgivaravgift</em> betalas till företagets <em>skattekonto</em> så det är 2 betalningar som behöver göras från företagskontot. Om du använder <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> kan du göra såhär. Finns även en <a href=\"https://www.youtube.com/watch?v=ig2C9gQg2Eg\">film här</a>.</p>\n<ul>\n<li>Under <em>lön</em> i huvudnenyn väljer du <em>anställda</em>. Lägg upp den anställde. Du kommer behöva <em>Skattetabell</em> att använda. Den anställde kan <a href=\"https://www.skatteverket.se/\">logga in</a> hos Skatteverket och hittar då skattetabell under &quot;Skatter och deklarationer&quot;.</li>\n<li>Under <em>lön</em> i huvudnenyn väljer du <em>lönebesked</em> och skapar ett nytt.</li>\n<li>Ange lönen och välj bokför.</li>\n<li>Logga in på banken och betala ut lönen, efter skatt, till den anställdes konto.</li>\n<li>Importera bankhändelsen till <em>företagskontot</em> via <em>kassa och bankhändelser</em>.</li>\n<li><a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> kommer föreslå att du matchar bankhändelsen mot löneutbetalningen, gör det. Nu är du klar med lönen, och nästa moment är att betala skatt och arbetsgivaravgift.</li>\n</ul>\n<p><strong>Arbetsgivardeklaration</strong> lämnas enkelt via <a href=\"https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html\">Skatteverkets webbsida</a>.</p>\n<ul>\n<li>Om du inte har betalat ut någon lön sätter du bara <strong>0</strong> i de obligatoriska fälten och skickar in.</li>\n<li>Om du har betalat ut lön, och använder <a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a>.\n<ul>\n<li>Gå in under <em>lön</em> i huvudmenyn och välj <em>arbetsgivardeklaration</em>.</li>\n<li>Skapa ny.</li>\n<li>Välj månaden då lönen betaldes ut.</li>\n<li>Välj <em>bokför</em>.</li>\n<li>Nu kan du <a href=\"https://www.youtube.com/watch?v=ig2C9gQg2Eg\">exportera en fil</a> om du klickar på <em>åtgärder</em> för deklarationen.</li>\n<li><a href=\"https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html\">Lämna in arbetsgivardeklarationen</a> hos Skatteverket genom att importera filen.</li>\n<li>På kvittensen visas ett bankgiro och OCR att använda för att betala in skatten till företagets skattekonto.</li>\n<li><strong>TODO: Bokför arbetgivaravgift och skatt</strong></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282\" rel=\"nofollow\">Visma eEkonomi</a> har en färdig mall för <strong>fakturor</strong>. Du anger ditt företags bankgiro, och/eller kontonummer, lägger upp kunder och artiklar. Sedan kan du enkelt skapa fakturor som du sedan kan skriva ut, spara som PDF eller maila.</p>\n<p>Om du <strong>betalar ut traktamente</strong> behöver du kunna bevisa att <a href=\"https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm\">resorna ägt rum och varit tjänsteresor</a>. Därför kan det vara klokt att föra anteckningar för resor. I mitt fall åker jag alltid tåg och kommer hänvisa till tågbiljetterna om jag får revision av Skatteverket.</p>\n<p><strong>TODO: Traktamente</strong><br>\n<a href=\"https://tomasbjerre.github.io/traktamente/\">https://tomasbjerre.github.io/traktamente/</a></p>\n<p><strong>TODO: Direktpension <a href=\"https://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension\">https://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension</a></strong></p>\n<p>Man hör ibland uttrycket <strong>skriva av</strong> och jag tror många missförstår det, kanske även jag =) Men jag tolkar det som att allt man köper för under ett halvt prisbasbelopp (ungefär 22 000 kr) skrivs av direkt, kostar det mer skriver man av det under flera år. Att <em>skriva av</em> innebär att man inte tar upp det som en tillgång, en inventarie, i bokföringen. Det är dock inte samma sak som att man får ge bort prylen till sig själv eller någon annan. Men jag är osäker, <a href=\"https://www.flashback.org/p49423662\">och många med mig</a>.</p>\n<p>Att bokföra köp gjorda med <strong>kreditkort</strong> är lite speciellt men det har Visma en väldigt <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi\">bra artikel</a> om.</p>\n<p>På <strong>bokslutsdagen, sista dagen på räkenskapsåret, måste <a href=\"https://www.verksamt.se/driva/ekonomi-och-bokforing/lopande-bokforing\">obetalda fakturor tas upp i bokföring</a></strong> även om du använder kontantmetoden. Det beskriver också Visma <a href=\"https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi\">här</a>.</p>\n<p>Jag sparar alltid alla <strong>kvitton</strong> direkt på Google Drive. Är det inte digitalt fotar jag av med mobilen, laddar upp bilden och sparar även original-kvittot i en pärm. I bokföringsprogrammet är jag också noga med att <strong>ladda upp bilder på varje verifikation</strong>. <a href=\"https://www.riksdagen.se/sv/dokument-lagar/dokument/svensk-forfattningssamling/bokforingslag-19991078_sfs-1999-1078\">Bokföringslagen</a> säger att originalen ska sparas, så digitala ska sparas digitalt och de på papper sparas på papper. Jag tycker även att <a href=\"https://vismaspcs.se/ditt-foretagande/byra/de-har-kopiorna-behover-du-inte-skriva-ut\">den här artikeln</a> beskriver det bra. Även andra dokument fotar jag av och sparar på Google Drive, som beslut från Skatteverket t.ex. Väldigt smidigt att kunna läsa allt var man än är.  Det är ganska enkelt att få tag på ett rejält brandskyddat kassaskåp (<a href=\"http://www.clasohlson.com/se/Dokumentsk%C3%A5p-Chubbsafes-Executive-40/Pr342428000\">#1</a> eller <a href=\"http://www.biltema.se/sv/Hem/Sakerhet-och-larm/Sakerhetsbox/Kassaskap-brandsakert-2000033385/\">#2</a>) så att man kan spara papper korrekt enligt lagstiftningen.</p>\n<p>Visma har en väldigt bra <a href=\"http://download.vismaspcs.se/pdf/bokf%C3%B6ring-f%C3%B6r-nyb%C3%B6rjare.pdf?utm_source=Eloqua&amp;utm_medium=email&amp;utm_content=SE_SP_SI_Onboarding-eEko-Std-4&amp;utm_campaign=SE_SP_SI_Onboarding-eA-Std-1704\">gratis broschyr om bokföring</a>.</p>\n<h1 id=\"vrigt\">Övrigt</h1>\n<p>Om du <strong>veckopendlar</strong> som jag så kanske du har en <strong>lägenhet på arbetsorten</strong>. Då kan man tänka sig att man <a href=\"http://www.skatter.se/?q=node/2619\">låter bolaget betala den</a>. Jag blev rekommenderad att ta den privat och betala ut mer lön från bolaget istället. Då räknar jag på detta vid utbetalning av lön så att lön efter avdrag hamnar på gränsen för statlig skatt. Avdraget gör jag alltså i min privata deklaration. Väljer man att låta bolaget direkt betala lägenheten blir det lite krångligare med bokföring och deklaration. Det kan också vara så att Skatteverket ser det som en förmån. Så det här kändes enklast.</p>\n<p>Det finns bolag som har som <strong>affärsidé att bara ha underkonsulter</strong>. De åker på konferensresor och har gemensam kontorslokal precis som vilket annat bolag som helst. Skillnaden är bara att alla är underkonsulter. Detta bolag hjälper dig att starta ditt eget bolag och hitta kunder. De har ramavtal med stora konsultköpare och kan ordna bra timpriser. Ett sånt bolag är <a href=\"http://www.kvadrat.se/\">Kvadrat</a>. Jag känner några stycken som jobbar där och de är alla nöjda. Jag valde dock att starta helt på egen hand.</p>\n<p>Har du frågor om skatter så är det smidigt att man kan <a href=\"https://www.skatteverket.se/omoss/kontaktaoss/mejla/\">maila Skatteverket</a>.</p>\n</div>","amp":"31","plaintext":"Efter över 7 år som anställd konsult (mjukvaruutvecklare) valde jag nyligen att\nstarta eget aktiebolag. Jag gör precis samma sak nu som jag gjorde som anställd\nmen numera i mitt eget bolag istället. Det här inlägget handlar om hur jag\ngjorde detta. Googlar man kring att starta eget så hittar man mycket. Men jag\nsaknade någon som beskriver det utifrån mina förutsättningar så det är vad jag\nförsöker göra här, eftersom jag tror att många har samma förutsättningar som\nmig. Oh, and sorry if you don't speak Swedish =) The topic is about starting\nyour own company in Sweden, you are probably not interested.\n\nSka också säga att allt jag tagit reda på här är genom googling och jag tar\ninget ansvar för att det jag säger här är korrekt och riktigt! Så var kritisk\nnär du läser vad jag skriver nedan!\n\nVarför Starta Eget?\nDu kan skatteplanera. Om du redan innan året är slut vet gräns för statlig skatt\n[http://www.regeringen.se/pressmeddelanden/2017/03/upprakningen-av-skiktgranserna-for-statlig-inkomstskatt-2018-begransas-och-den-sarskilda-inkomstskatten-for-utomlands-bosatta-hojs/] \n och eventuella avdrag du kommer att göra. Då kan du räkna ut exakt vilken lön\ndu kan betala ut från bolaget för att du som privatperson ska hamna precis på\ngränsen för statlig skatt.\n\nUtöver lönen kan du också göra en utdelning. Då skattar du 20% på summan upp\ntill 2.75  gånger föregående års inkomstbasbeloppet  för 2018 blir det 2.75 *\n59300 = 163075. Denna siffra ska man nog se som ett riktmärke, det är mer\nkomplicerat än så och kommer förmodligen ändras snart också. Den här blog-posten\n[https://www.foretagande.se/sa-beraknas-skatt-pa-utdelning-3-12-reglerna/] \nbeskriver detta bra.\n\nJag har gjort ett excel-ark\n[https://docs.google.com/spreadsheets/d/1jfQSSOEINNq3OVc5pYG5NeFkvgcDqOEu1HjzpU2RQm0/edit?usp=sharing] \n för att optimera skatten. Du kan även läsa mer om skatter och avgifter på\nVerksamt [https://www.verksamt.se/starta/skatter-och-avgifter/aktiebolag]. Se\näven den här sidan [http://www.driva-eget.se/kalkyler/lonekalkyl]  för att få en\nuppfattning om hur mycket lön man kan ta ut.\n\nDu väljer själv om du vill betala in till en tjänstepension  och i så fall\nvilken. Jag har tvingats betala till SEB under en längre tid. Det enda jag bryr\nmig om är deras fondutbud. I SEB hittade jag bara en fond, en räntefond\n[http://web.msse.se/SEB/SGF/quicktake.aspx?six=SEB-BDSEKA], som kändes \"ok\". Det\när även en fördel att du kan maximera lönen, göra utdelning och om det efter\ndetta fortfarande finns pengar över kan du använda dem till tjänstepension. Du\nslipper alltså låsa in pengar i en sådan pension om det inte är så att det är en\nskattemässig fördel. Och det kan du ta ställning till efter att räkenskapsåret\när slut.\n\nDu slipper ha lön efter ålder. Ju yngre du är, ju mer tjänar du på att ha eget\nkonsultbolag. Den dumma tanken att man ska börja på en låg lönenivå och sedan\nöka ett par procent per år mappar inte alls mot vad kunderna betala för dig per\ntimme. Det är helt ologiskt. Är du yngre anställd konsult så betalar du för dina\nkollegors lön och förmåner. Det kan mycket väl vara så att du drar in mer pengar\nän någon som är 20 år äldre.\n\nDu kan köpa kontorsmaterial väldigt billigt. Dator, headset, hörlurar,\nskärmar... till ungefär halva priset jämfört med om du köper det privat. Då\ntänker jag inte bara på momsen. Tänk även på hur mycket pengar bolaget behöver\nbetala ut för att, efter skatt och arbetsgivaravgift, kunna sätta in summan på\ndet privata kontot. Såklart måste man tänka på att det man köper ägs av\nföretaget och inte dig privat.\n\nSå fort du har möjlighet att betala ut skattefritt traktamente\n[https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm] \n så ska du göra det. Du slipper tjafs med en arbetsgivare som nekar dig något\nsom är så självklart.\n\nDu kan resa nästan vart du vill  och låta bolaget betala. Det finns ju\nintressanta utvecklarkonferenser nästan överallt. Vill du åka till Sidney så\nbehöver du bara hitta en intressant konferens där\n[http://lmgtfy.com/?q=sidney+developer+conference]. Då kan du låta bolaget\nbetala resan dit, hotell under tiden då konferensen varar och resan hem. Innan\ndu resar hem kan du ta en vecka semester =) Inget tjafs med en arbetsgivare som\ntycker det är för dyrt. Inga dryga övningar, innan eller på plats, utan bara du\nsom bestämmer vilka föreläsningar du tycker är intressanta och som du går på.\n\nLåta bolaget betala alla tjänsteresor. Om ditt företag är skrivet på adressen du\nockså bor på blir ju alla resor till olika kunder tjänsteresor. Som anställd har\njag ibland bott långt ifrån närmsta kontor. Fått betala 1 600 kr per månad, med\nprivata pengar, för pendlingskort. Hade jag haft eget bolag hade det varit en\ntjänsteresa från mitt kontor till kundens, vilket bolaget kan betala.\n\nFör mig personligen så har jag alltid sett mig själv som mitt eget varumärke. Då\när ju inte steget långt till att faktiskt vara det också. Jag tycker även att de\nflesta möten är meningslösa och väldigt tråkiga. Det blir klart färre med eget\nbolag.\n\nHur Starta Eget?\nJag listar här kortfattat vad man behöver göra. Längre ner finns vissa steg mer\nutförligt beskrivna. Du kan räkna med att det tar 1-2 månader från att du\nskickar in första ansökan till att allt runt bolaget är klart och du kan börja\njobba i det. Skadar inte att titta på andra listor också\n[https://www.verksamt.se/alla-e-tjanster/din-checklista/aktiebolag]  för att\nsäkra att du inte glömt något.\n\nJag valde aktiebolag  framför enskild firma. Då är bolaget en juridisk person\nsom också har ansvaret. En tydlig gräns mellan bolag och privat ekonomi alltså.\nJag kan rekommendera Verksamts jämförelse av företagsformer\n[https://www.verksamt.se/fundera/valj-foretagsform].\n\nSkapa ansökan  på Verksamt [https://www.verksamt.se/]. Du kommer behöva en\nverksamhetsbeskrivning. Min ser ut såhär:\n\nFöretaget ska bedriva konsultverksamhet företrädesvis inom IT, samt utveckla\nmjukvaruprodukter, äga och förvalta värdepapper och utöva därmed förenlig\nverksamhet.\n\nNär det gäller företagsnamn  så rekommenderar jag att bara ta ditt eget namn. AB\neller aktiebolag måste vara med i namnet. Så jag valde Tomas Bjerre AB. Risken\nom du väljer något annat är att Bolagsverket nekar dig för att namnet liknar\nnågot som redan finns. Onödigt strul och du kan alltid ändra senare.\n\nDu kommer behöva ange en SNI-kod. Jag valde 62010.\n\nNär du skickat iväg ansökan till Bolagsverket kommer de invänta ett bankintyg.\nLäs mer om att välja bank nedan. Du behöver kontakta en bank för att skapa ett\nföretagskonto. Banken kommer be dig sätta in 50 000 kr på ett speciellt konto.\nBanken behöver kunna tala om för Bolagsverket att här finns det 50 000 kr som\nsatts in med avsikt att användas för aktiekapitalet. När du gjort detta ger de\ndig en e-postadress som du sedan ger till Bolagsverket (via verksamt.se\n[http://verksamt.se]). Sedan frågan Bolagsverket banken om pengarna är där och\nnär banken svarar ja registreras bolaget. Så fort bolaget är skapat så har du\nsedan ett företagskonto där det från start finns 50 000 kr.\n\nNär du startar aktiebolag ska bolaget ha F-skatt  och du som privatperson har\nA-skatt. Jag valde kvartalsmoms. Räkenskapsåret  valde jag som 0101 - 1231. Som \nredovisningsmetod  valde jag kontantmetoden\n[https://www.e-conomic.se/bokforingsprogram/ordlista/kontantmetoden]  (kallas\näven bokslutsmetoden). Jag uppfattade den som enklast, se hur man bokför köpt\nmed kreditkort\n[https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi] \n t.ex.\n\nDet är väldigt svårt att uppskatta den förväntade vinsten  första året. Andra\nåret kommer Skatteverket föreslå en. Ett tips är att ange den lågt. I mitt fall\nskulle jag först betala in 20 000 kr innan jag hunnit få en enda inkomst i\nbolaget. Skulle du råka ut för det är det bara att göra en ny preliminär\ninkomstdeklaration via Skatteverket och ange en lägre förväntad vinst. Då fick\njag ner denna siffran till 7 000 kr istället.\n\nDet finns många smidiga bokföringsprogram. Redovisningen\n[https://sv.wikipedia.org/wiki/Redovisning]  var nog det jag var mest rädd för i\nbörjan. Jag märkte tidigt att när jag googlade om hur man bokför olika saker så\nkom jag ofta in på Visma:s support forum [https://forum.vismaspcs.se/visma_spcs]\n. Jag har tidigare använt deras tidrapportering, PX, vilket suger något helt\notroligt. Ser ut som en sommarjobbare hackade ihop det för 15 år sedan och att\nman inte rört det sedan dess. Men även om jag var väldigt skeptisk till detta\nbolag så valde jag ändå Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nför bokföring just för att deras support verkar vara helt exemplarisk. Att\ndirekt bokföra ett kvitto i Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \när betydligt enklare än det jag tidigare gjort via tidrapportering som anställd.\nDu kanske t.ex. vill bokföra bokföringsprogrammet\n[https://forum.vismaspcs.se/visma_spcs/topics/8fxz374h0czze?topic-reply-list%5Bsettings%5D%5Bfilter_by%5D=all]\n, köp av dator och försäkring\n[https://forum.vismaspcs.se/visma_spcs/topics/7h3lv4csqal8w]  eller köp av\ntågbiljett [https://forum.vismaspcs.se/visma_spcs/topics/con2lpq5fex2f]. De gör\nt.o.m. filmer [https://www.youtube.com/watch?v=jGgnxd6uBh4]  där de visar vissa\nflöden. Hoppas jag är trovärdig trots att jag gått med i deras affiliate-program\noch får betalt för att hänvisa andra dit =)\n\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282]Du\nlär behöva en mobil  i bolaget. Som jag förstår det är det ok att köpa telefonen\npå bolaget. Även telefoni och SMS är ok. Datatrafiken däremot kan behöva\nförmånsbeskattas. Det i kombination med att man slipper många dryga samtal om\nman istället har ett privat abonnemang, gjorde att jag köpte den privat.\n\nDu lär behöva en ansvarsförsäkring. Jag valde en från If\n[https://www.if.se/web/se/foretag/varaforsakringar/offert/pages/default.aspx?varde=startforsakring] \n och fick betala 5 294 kr. Har du inte det och du råkar ut för något, säg att\nnågon kräver dig på flera miljoner, så konkursar du bara bolaget och slipper\nundan. Men med en ansvarsförsäkring så kan du, kanske, göra rätt för dig och\nbetala. På så vis blir du en mer attraktiv konsult att anlita och det står även\nofta i kontrakten att du ska ha en försäkring.\n\nJag valde att kontakta en redovisningskonsult  som hjälper mig med ekonomiska\nfrågor samt tar hand om bokslut  / årsredovisning  / deklaration. Jag tar hand\nom löpande bokföring samt kvartalsmoms, skatter och lön. Det kostar cirka 6 000\nkr per år. En redovisningskonsult kan hjälpa dig med allt möjligt i bolaget.\nVissa ger dem fullmakt så de kan sköta all ekonomi. Jag fick tag på honom genom\nen bekant som tipsade men annars är det enkelt att googla. Har du valt Visma så \nkan de hjälpa dig\n[https://vismaspcs.se/produkter/redovisning/visma-eekonomi-byra]. I Visma\neEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nkan du även skapa en inloggning till din redovisningskonsult.\n\nRevisor  är valfritt om man omsätter under 3 miljoner\n[http://www.bolagsverket.se/ff/foretagsformer/aktiebolag/starta/revisor]. Det\nanvänder jag inte.\n\nDet kan också vara bra att ha klart för sig hur man hittar kunder. Det finns\nmånga rena konsultmäklare som tar en procentsats, ofta mellan 10-20% på din\ntimpenning om du tar ett uppdrag via dem. De har ofta ramavtal med stora\nkonsultköpare. Är du redan anställd som konsult så kanske du i början fortsätter\nmed samma kund fast som underkonsult istället. Se, t.ex.:\n\n * Brainville [https://www.brainville.com/]\n * EWork [https://www.eworkgroup.com/se/]\n\nBank\nJag frågade först några banker via telefon och mail (ICA, Avanza, Swedbank). Det\nkändes som att de inte riktigt förstod vad jag menade när jag sa att jag ville\nha ett bankintyg. Det kändes opålitligt helt enkelt. Det värsta var när jag gick\ntill Swedbanks kontor och bad om att få intyget.\n\nJag började med att föra över aktiekapitalet till ett av mina konton hos\nSwedbank.\n\nNästa steg var att promenera till närmsta Swedbank-kontor (Jönköping) för att be\nom bankintyg att lämna till Bolagsverket. Jag berättade att hela kapitalet redan\nfinns på banken och att jag ville ha ett bankintyg. Svaret blev att jag skulle:\n\n * Gå till Nyföretagarcentrum och prata igenom företagsidén.\n * Lämna in en skriftlig affärsplan.\n * Lämna in en skriftlig budget.\n * Inom ett par veckor ha ett fysiskt möte med Swedbank där vi diskuterar igenom\n   detta.\n\nHur lång tid detta skulle ta innan jag kunde få mitt intyg kunde de inte svara\npå. Obegripligt för mig.\n\n * Kapitalet hade de ju redan! Jag ville bara att de skulle intyga att det fanns\n   där.\n * Jag bad inte om något lån och har inte heller några lån. Jag har faktiskt ett\n   ypperligt kreditbetyg.\n * Jag har jobbat som IT-konsult i över 7 år och det var också precis vad jag\n   skulle göra i bolaget. Alltså inte en unik affärsidé alls på något vis. Inget\n   konstigt alls.\n * Jag kunde, t.o.m., visa att jag hade ett kontrakt från dag 1 och 6 månader\n   framåt.\n\nJag känner många som har gjort samma sak som jag ville göra. Efter att ha\npratade med några stycken märkte jag att fler har samma erfarenhet av Swedbank.\n\nVälj inte Swedbank!\n\nJag valde Danskebank. Du fyller bara i deras formulär\n[https://danskebank.se/sv-se/Foretag/Smaforetag/Pages/Product-packages.aspx]  så\nringer de upp. Danskebank sköter allt per telefon och det fungerar mycket bra.\nDe bad inte om någon affärsplan eller budget utan litade på mig direkt. De\nvisste också direkt vad det handlade om och de kändes pålitliga. Eftersom jag\ninte var kund där sedan tidigare så behövde de skicka lite papper till mig med\nposten först. Men inom en vecka hade jag intyget! Snabbt, enkelt, smidigt och\ninget meningslöst krångel.\n\nJag valde Danske Business Plus  för 99 kr/mån. Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nstödjer även Danskebank  på så vis att man kan klistra in kontoutdraget från\nbanken in i Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282],\nför att automatiskt skapa bankhändelser. Sedan matchar man dem mot\nleverantörsfakturor eller verifikationer.\n\nHur Driva Eget?\nJag har lagt in återkommande händelser i Google Calendar för de olika datumen.\nSedan angivit att de ska upprepas månadsvis eller, i vissa fall, årsvis.\n\nJag valde kvartalsmoms, alltså att jag efter varje kvartal redovisar och betalar\nin eventuell moms. Mer information om det finns här\n[https://www.verksamt.se/driva/skatter-och-avgifter/moms-redovisa-och-betala].\nSå fort kvartalet är slut kan man lämna in deklarationen. Man har ungefär 1.5\nmånad på sig att lämna in den. Även för detta har Visma gjort en film som visar \nhur du gör i eEkonomi [https://www.youtube.com/watch?v=gPv_SahMnEw]. Som jag\nförstår det använder man kontot 1630  (eller 2012  om det är enskild firma) just\nför att alla händelser mot Skatteverket ska gå via detta konto\n[https://forum.vismaspcs.se/visma_spcs/topics/maste-man-anvanda-sig-av-skattekontot-1630]\n. Hur det fungerar med att betala, och få tillbaka moms, beskriver\nSkatteverkets\nhär\n[https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html]\n. Så kortfattat om du har Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \noch kvartalsmoms så ska du vid varje kvartalsslut:\n\n * Skapa en momsredovisning för kvartalet via bokföring / momsredovisning.\n * Ladda ner eskd-filen.\n * Skapa en momsdeklaration\n   [https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms.4.7459477810df5bccdd480006935.html] \n    enligt Visma:s video [https://www.youtube.com/watch?v=gPv_SahMnEw].\n * Ladda upp eskd-filen hos Skatteverket\n   [https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html]\n   .\n * Ladda ner transaktioner från Skatteverket till ditt skattekonto\n   [https://www.youtube.com/watch?v=-7cDnn-NaME]  och matchar dem sedan mot\n   momshändelsen i dina bokföringshändelser.\n * När du senare betalat in, eller fått betalt, skapa och bokför bankhändelsen\n   på företagskontot. Det visas i slutet på den här videon\n   [https://www.youtube.com/watch?v=gPv_SahMnEw]. Tänk på att använda 1630  för\n   AB och 2012  för enskild firma.\n\nSkatteverket har skickat brev till dig med datum då du ska betala debiterad\npreliminärskatt. Det här är något du betalar varje månad och baserar sig på din\nförväntade vinst som du angav i din preliminära inkomstdeklaration. Du har fått\nett besked från Skatteverket där det står datum och hur mycket du ska betala. Om\ndu har Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nkan du följa deras film om skattekontot\n[https://www.youtube.com/watch?v=-7cDnn-NaME]. Kort sagt så betalar du in från\nföretagskontot, importerar bankhändelser från företagskontot och från\nskattekontot, bokför inbetalningen mot transaktionen på skattekontot.\n\nNär du ska betala ut Lön  behöver du betala skatt, arbetsgivaravgift  samt\nsjälva lönen. Både skatt  och arbetsgivaravgift  betalas till företagets \nskattekonto  så det är 2 betalningar som behöver göras från företagskontot. Om\ndu använder Visma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nkan du göra såhär. Finns även en film här\n[https://www.youtube.com/watch?v=ig2C9gQg2Eg].\n\n * Under lön  i huvudnenyn väljer du anställda. Lägg upp den anställde. Du\n   kommer behöva Skattetabell  att använda. Den anställde kan logga in\n   [https://www.skatteverket.se/]  hos Skatteverket och hittar då skattetabell\n   under \"Skatter och deklarationer\".\n * Under lön  i huvudnenyn väljer du lönebesked  och skapar ett nytt.\n * Ange lönen och välj bokför.\n * Logga in på banken och betala ut lönen, efter skatt, till den anställdes\n   konto.\n * Importera bankhändelsen till företagskontot  via kassa och bankhändelser.\n * Visma eEkonomi\n   [https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \n    kommer föreslå att du matchar bankhändelsen mot löneutbetalningen, gör det.\n   Nu är du klar med lönen, och nästa moment är att betala skatt och\n   arbetsgivaravgift.\n\nArbetsgivardeklaration  lämnas enkelt via Skatteverkets webbsida\n[https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html]\n.\n\n * Om du inte har betalat ut någon lön sätter du bara 0  i de obligatoriska\n   fälten och skickar in.\n * Om du har betalat ut lön, och använder Visma eEkonomi\n   [https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282]\n   . * Gå in under lön  i huvudmenyn och välj arbetsgivardeklaration.\n    * Skapa ny.\n    * Välj månaden då lönen betaldes ut.\n    * Välj bokför.\n    * Nu kan du exportera en fil [https://www.youtube.com/watch?v=ig2C9gQg2Eg] \n      om du klickar på åtgärder  för deklarationen.\n    * Lämna in arbetsgivardeklarationen\n      [https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html] \n       hos Skatteverket genom att importera filen.\n    * På kvittensen visas ett bankgiro och OCR att använda för att betala in\n      skatten till företagets skattekonto.\n    * TODO: Bokför arbetgivaravgift och skatt\n   \n   \n\nVisma eEkonomi\n[https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282] \nhar en färdig mall för fakturor. Du anger ditt företags bankgiro, och/eller\nkontonummer, lägger upp kunder och artiklar. Sedan kan du enkelt skapa fakturor\nsom du sedan kan skriva ut, spara som PDF eller maila.\n\nOm du betalar ut traktamente  behöver du kunna bevisa att resorna ägt rum och\nvarit tjänsteresor\n[https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm]\n. Därför kan det vara klokt att föra anteckningar för resor. I mitt fall åker\njag alltid tåg och kommer hänvisa till tågbiljetterna om jag får revision av\nSkatteverket.\n\nTODO: Traktamente\nhttps://tomasbjerre.github.io/traktamente/\n\nTODO: Direktpension \nhttps://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension\n\nMan hör ibland uttrycket skriva av  och jag tror många missförstår det, kanske\näven jag =) Men jag tolkar det som att allt man köper för under ett halvt\nprisbasbelopp (ungefär 22 000 kr) skrivs av direkt, kostar det mer skriver man\nav det under flera år. Att skriva av  innebär att man inte tar upp det som en\ntillgång, en inventarie, i bokföringen. Det är dock inte samma sak som att man\nfår ge bort prylen till sig själv eller någon annan. Men jag är osäker, och\nmånga med mig [https://www.flashback.org/p49423662].\n\nAtt bokföra köp gjorda med kreditkort  är lite speciellt men det har Visma en\nväldigt bra artikel\n[https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi] \n om.\n\nPå bokslutsdagen, sista dagen på räkenskapsåret, måste obetalda fakturor tas\nupp\ni bokföring\n[https://www.verksamt.se/driva/ekonomi-och-bokforing/lopande-bokforing]  även om\ndu använder kontantmetoden. Det beskriver också Visma här\n[https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi]\n.\n\nJag sparar alltid alla kvitton  direkt på Google Drive. Är det inte digitalt\nfotar jag av med mobilen, laddar upp bilden och sparar även original-kvittot i\nen pärm. I bokföringsprogrammet är jag också noga med att ladda upp bilder på\nvarje verifikation. Bokföringslagen\n[https://www.riksdagen.se/sv/dokument-lagar/dokument/svensk-forfattningssamling/bokforingslag-19991078_sfs-1999-1078] \n säger att originalen ska sparas, så digitala ska sparas digitalt och de på\npapper sparas på papper. Jag tycker även att den här artikeln\n[https://vismaspcs.se/ditt-foretagande/byra/de-har-kopiorna-behover-du-inte-skriva-ut] \n beskriver det bra. Även andra dokument fotar jag av och sparar på Google Drive,\nsom beslut från Skatteverket t.ex. Väldigt smidigt att kunna läsa allt var man\nän är. Det är ganska enkelt att få tag på ett rejält brandskyddat kassaskåp (#1\n[http://www.clasohlson.com/se/Dokumentsk%C3%A5p-Chubbsafes-Executive-40/Pr342428000] \n eller #2\n[http://www.biltema.se/sv/Hem/Sakerhet-och-larm/Sakerhetsbox/Kassaskap-brandsakert-2000033385/]\n) så att man kan spara papper korrekt enligt lagstiftningen.\n\nVisma har en väldigt bra gratis broschyr om bokföring\n[http://download.vismaspcs.se/pdf/bokf%C3%B6ring-f%C3%B6r-nyb%C3%B6rjare.pdf?utm_source=Eloqua&utm_medium=email&utm_content=SE_SP_SI_Onboarding-eEko-Std-4&utm_campaign=SE_SP_SI_Onboarding-eA-Std-1704]\n.\n\nÖvrigt\nOm du veckopendlar  som jag så kanske du har en lägenhet på arbetsorten. Då kan\nman tänka sig att man låter bolaget betala den\n[http://www.skatter.se/?q=node/2619]. Jag blev rekommenderad att ta den privat\noch betala ut mer lön från bolaget istället. Då räknar jag på detta vid\nutbetalning av lön så att lön efter avdrag hamnar på gränsen för statlig skatt.\nAvdraget gör jag alltså i min privata deklaration. Väljer man att låta bolaget\ndirekt betala lägenheten blir det lite krångligare med bokföring och\ndeklaration. Det kan också vara så att Skatteverket ser det som en förmån. Så\ndet här kändes enklast.\n\nDet finns bolag som har som affärsidé att bara ha underkonsulter. De åker på\nkonferensresor och har gemensam kontorslokal precis som vilket annat bolag som\nhelst. Skillnaden är bara att alla är underkonsulter. Detta bolag hjälper dig\natt starta ditt eget bolag och hitta kunder. De har ramavtal med stora\nkonsultköpare och kan ordna bra timpriser. Ett sånt bolag är Kvadrat\n[http://www.kvadrat.se/]. Jag känner några stycken som jobbar där och de är alla\nnöjda. Jag valde dock att starta helt på egen hand.\n\nHar du frågor om skatter så är det smidigt att man kan maila Skatteverket\n[https://www.skatteverket.se/omoss/kontaktaoss/mejla/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-06-27T20:01:37.000Z","created_by":"1","updated_at":"2017-08-26T07:52:13.000Z","updated_by":"1","published_at":"2017-06-29T10:42:56.000Z","published_by":"1","custom_excerpt":null},{"id":"597b64dc08a2db60d1f648ba","uuid":"0ba09695-d457-4894-8249-d8639a4214f0","title":"Ghost 1.0 free hosting with HTTPS and custom domain","slug":"ghost-1-0-free-hosting-with-https","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I have been using [Ghost blogging platform](https://ghost.org/) for a few years now and I really like it! I have previously written about how I set it up with [GitHub pages and Buster](https://bjurr.com/ghost-blog-on-github-pages/). However a few important things have changed since then:\\n\\n* Buster is [no longer maintained](https://github.com/axitkhurana/buster/issues/66).\\n* Google is ranking HTTPS sites higher.\\n* Ghost 1.0 is released!\\n\\nTo coop with these new conditions, I made a few changes:\\n\\n* I use [Cloudflare](https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/) to secure my blog with HTTPS.\\n* I setup Ghost blogging platform on localhost with [MySQL and NGINX](https://docs.ghost.org/docs/install).\\n* I created [a very simple shell script](https://github.com/tomasbjerre/bjurrcom/blob/tools/commit.sh) using `wget` to create a static website out of Ghost running on localhost.\\n\\nThis means I can still use Ghost 1.x, for free, with HTTPS, with [custom domain on GitHub pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)!\\n\\nCheckout [the repo](https://github.com/tomasbjerre/bjurrcom) to see exactly how it works. There is a branch, *master*, where the static content is committed. There is a branch, *tools*, where the `commit.sh` is placed and this this is also where the database and content gets backed up on publish. And publish is done by executing the `commit.sh` script. \\n\\nEnjoy! This is the first post with that new setup =)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I have been using <a href=\"https://ghost.org/\">Ghost blogging platform</a> for a few years now and I really like it! I have previously written about how I set it up with <a href=\"https://bjurr.com/ghost-blog-on-github-pages/\">GitHub pages and Buster</a>. However a few important things have changed since then:</p>\n<ul>\n<li>Buster is <a href=\"https://github.com/axitkhurana/buster/issues/66\">no longer maintained</a>.</li>\n<li>Google is ranking HTTPS sites higher.</li>\n<li>Ghost 1.0 is released!</li>\n</ul>\n<p>To coop with these new conditions, I made a few changes:</p>\n<ul>\n<li>I use <a href=\"https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/\">Cloudflare</a> to secure my blog with HTTPS.</li>\n<li>I setup Ghost blogging platform on localhost with <a href=\"https://docs.ghost.org/docs/install\">MySQL and NGINX</a>.</li>\n<li>I created <a href=\"https://github.com/tomasbjerre/bjurrcom/blob/tools/commit.sh\">a very simple shell script</a> using <code>wget</code> to create a static website out of Ghost running on localhost.</li>\n</ul>\n<p>This means I can still use Ghost 1.x, for free, with HTTPS, with <a href=\"https://help.github.com/articles/using-a-custom-domain-with-github-pages/\">custom domain on GitHub pages</a>!</p>\n<p>Checkout <a href=\"https://github.com/tomasbjerre/bjurrcom\">the repo</a> to see exactly how it works. There is a branch, <em>master</em>, where the static content is committed. There is a branch, <em>tools</em>, where the <code>commit.sh</code> is placed and this this is also where the database and content gets backed up on publish. And publish is done by executing the <code>commit.sh</code> script.</p>\n<p>Enjoy! This is the first post with that new setup =)</p>\n</div>","amp":null,"plaintext":"I have been using Ghost blogging platform [https://ghost.org/]  for a few years\nnow and I really like it! I have previously written about how I set it up with \nGitHub pages and Buster [https://bjurr.com/ghost-blog-on-github-pages/]. However\na few important things have changed since then:\n\n * Buster is no longer maintained\n   [https://github.com/axitkhurana/buster/issues/66].\n * Google is ranking HTTPS sites higher.\n * Ghost 1.0 is released!\n\nTo coop with these new conditions, I made a few changes:\n\n * I use Cloudflare\n   [https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/] \n   to secure my blog with HTTPS.\n * I setup Ghost blogging platform on localhost with MySQL and NGINX\n   [https://docs.ghost.org/docs/install].\n * I created a very simple shell script\n   [https://github.com/tomasbjerre/bjurrcom/blob/tools/commit.sh]  using wget \n   to create a static website out of Ghost running on localhost.\n\nThis means I can still use Ghost 1.x, for free, with HTTPS, with custom domain\non GitHub pages\n[https://help.github.com/articles/using-a-custom-domain-with-github-pages/]!\n\nCheckout the repo [https://github.com/tomasbjerre/bjurrcom]  to see exactly how\nit works. There is a branch, master, where the static content is committed.\nThere is a branch, tools, where the commit.sh  is placed and this this is also\nwhere the database and content gets backed up on publish. And publish is done by\nexecuting the commit.sh  script.\n\nEnjoy! This is the first post with that new setup =)","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-07-28T16:22:52.000Z","created_by":"1","updated_at":"2017-07-29T20:39:22.000Z","updated_by":"1","published_at":"2017-07-28T16:40:22.000Z","published_by":"1","custom_excerpt":null}],"posts_tags":[{"id":"597b4433e521cb4fbd9186a9","post_id":"597b4433e521cb4fbd91868f","tag_id":"597b4432e521cb4fbd918664","sort_order":0},{"id":"597b4433e521cb4fbd9186aa","post_id":"597b4433e521cb4fbd918690","tag_id":"597b4433e521cb4fbd918676","sort_order":0},{"id":"597b4433e521cb4fbd9186ab","post_id":"597b4433e521cb4fbd918691","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186ac","post_id":"597b4433e521cb4fbd918692","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186ad","post_id":"597b4433e521cb4fbd918693","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186ae","post_id":"597b4433e521cb4fbd918694","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186af","post_id":"597b4433e521cb4fbd918695","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186b0","post_id":"597b4433e521cb4fbd918696","tag_id":"597b4432e521cb4fbd91866a","sort_order":0},{"id":"597b4433e521cb4fbd9186b1","post_id":"597b4433e521cb4fbd918697","tag_id":"597b4432e521cb4fbd918669","sort_order":0},{"id":"597b4433e521cb4fbd9186b2","post_id":"597b4433e521cb4fbd918698","tag_id":"597b4433e521cb4fbd91866e","sort_order":0},{"id":"597b4433e521cb4fbd9186b3","post_id":"597b4433e521cb4fbd918699","tag_id":"597b4433e521cb4fbd91866e","sort_order":0},{"id":"597b4433e521cb4fbd9186b4","post_id":"597b4433e521cb4fbd91869a","tag_id":"597b4432e521cb4fbd918669","sort_order":0},{"id":"597b4433e521cb4fbd9186b5","post_id":"597b4433e521cb4fbd91869e","tag_id":"597b4433e521cb4fbd918680","sort_order":0},{"id":"597b4433e521cb4fbd9186b6","post_id":"597b4433e521cb4fbd91869f","tag_id":"597b4433e521cb4fbd918683","sort_order":0},{"id":"597b4433e521cb4fbd9186b7","post_id":"597b4433e521cb4fbd9186a0","tag_id":"597b4433e521cb4fbd918686","sort_order":0},{"id":"597b4433e521cb4fbd9186b8","post_id":"597b4433e521cb4fbd9186a1","tag_id":"597b4433e521cb4fbd918681","sort_order":0},{"id":"597b4433e521cb4fbd9186b9","post_id":"597b4433e521cb4fbd9186a2","tag_id":"597b4433e521cb4fbd918688","sort_order":0},{"id":"597b4433e521cb4fbd9186ba","post_id":"597b4433e521cb4fbd9186a3","tag_id":"597b4433e521cb4fbd91866f","sort_order":0},{"id":"597b4433e521cb4fbd9186bb","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918680","sort_order":0},{"id":"597b4433e521cb4fbd9186bc","post_id":"597b4433e521cb4fbd9186a8","tag_id":"597b4433e521cb4fbd918676","sort_order":0},{"id":"597b4433e521cb4fbd9186bd","post_id":"597b4433e521cb4fbd91868f","tag_id":"597b4432e521cb4fbd918665","sort_order":1},{"id":"597b4433e521cb4fbd9186be","post_id":"597b4433e521cb4fbd918691","tag_id":"597b4433e521cb4fbd918673","sort_order":1},{"id":"597b4433e521cb4fbd9186bf","post_id":"597b4433e521cb4fbd918694","tag_id":"597b4433e521cb4fbd918671","sort_order":1},{"id":"597b4433e521cb4fbd9186c0","post_id":"597b4433e521cb4fbd918695","tag_id":"597b4433e521cb4fbd918670","sort_order":1},{"id":"597b4433e521cb4fbd9186c1","post_id":"597b4433e521cb4fbd918696","tag_id":"597b4433e521cb4fbd91866c","sort_order":1},{"id":"597b4433e521cb4fbd9186c2","post_id":"597b4433e521cb4fbd918697","tag_id":"597b4433e521cb4fbd91866e","sort_order":1},{"id":"597b4433e521cb4fbd9186c3","post_id":"597b4433e521cb4fbd918698","tag_id":"597b4433e521cb4fbd918675","sort_order":1},{"id":"597b4433e521cb4fbd9186c4","post_id":"597b4433e521cb4fbd91869a","tag_id":"597b4433e521cb4fbd918677","sort_order":1},{"id":"597b4433e521cb4fbd9186c5","post_id":"597b4433e521cb4fbd91869e","tag_id":"597b4433e521cb4fbd918681","sort_order":1},{"id":"597b4433e521cb4fbd9186c6","post_id":"597b4433e521cb4fbd91869f","tag_id":"597b4433e521cb4fbd918689","sort_order":1},{"id":"597b4433e521cb4fbd9186c7","post_id":"597b4433e521cb4fbd9186a0","tag_id":"597b4432e521cb4fbd918664","sort_order":1},{"id":"597b4433e521cb4fbd9186c8","post_id":"597b4433e521cb4fbd9186a1","tag_id":"597b4433e521cb4fbd918680","sort_order":1},{"id":"597b4433e521cb4fbd9186c9","post_id":"597b4433e521cb4fbd9186a2","tag_id":"597b4433e521cb4fbd918686","sort_order":1},{"id":"597b4433e521cb4fbd9186ca","post_id":"597b4433e521cb4fbd9186a3","tag_id":"597b4433e521cb4fbd91868a","sort_order":1},{"id":"597b4433e521cb4fbd9186cb","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918686","sort_order":1},{"id":"597b4433e521cb4fbd9186cc","post_id":"597b4433e521cb4fbd9186a8","tag_id":"597b4433e521cb4fbd91868c","sort_order":1},{"id":"597b4434e521cb4fbd9186cd","post_id":"597b4433e521cb4fbd91868f","tag_id":"597b4432e521cb4fbd918666","sort_order":2},{"id":"597b4434e521cb4fbd9186ce","post_id":"597b4433e521cb4fbd918691","tag_id":"597b4433e521cb4fbd918674","sort_order":2},{"id":"597b4434e521cb4fbd9186cf","post_id":"597b4433e521cb4fbd918694","tag_id":"597b4433e521cb4fbd91867c","sort_order":2},{"id":"597b4434e521cb4fbd9186d0","post_id":"597b4433e521cb4fbd918696","tag_id":"597b4433e521cb4fbd91866d","sort_order":2},{"id":"597b4434e521cb4fbd9186d1","post_id":"597b4433e521cb4fbd918697","tag_id":"597b4433e521cb4fbd918672","sort_order":2},{"id":"597b4434e521cb4fbd9186d2","post_id":"597b4433e521cb4fbd91869a","tag_id":"597b4433e521cb4fbd918678","sort_order":2},{"id":"597b4434e521cb4fbd9186d3","post_id":"597b4433e521cb4fbd91869e","tag_id":"597b4433e521cb4fbd918682","sort_order":2},{"id":"597b4434e521cb4fbd9186d4","post_id":"597b4433e521cb4fbd9186a1","tag_id":"597b4433e521cb4fbd918683","sort_order":2},{"id":"597b4434e521cb4fbd9186d5","post_id":"597b4433e521cb4fbd9186a2","tag_id":"597b4433e521cb4fbd91868a","sort_order":2},{"id":"597b4434e521cb4fbd9186d6","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918687","sort_order":2},{"id":"597b4434e521cb4fbd9186d7","post_id":"597b4433e521cb4fbd9186a8","tag_id":"597b4433e521cb4fbd91868d","sort_order":2},{"id":"597b4434e521cb4fbd9186d8","post_id":"597b4433e521cb4fbd91868f","tag_id":"597b4432e521cb4fbd918667","sort_order":3},{"id":"597b4434e521cb4fbd9186d9","post_id":"597b4433e521cb4fbd918691","tag_id":"597b4433e521cb4fbd91867a","sort_order":3},{"id":"597b4434e521cb4fbd9186da","post_id":"597b4433e521cb4fbd918696","tag_id":"597b4433e521cb4fbd91867f","sort_order":3},{"id":"597b4434e521cb4fbd9186db","post_id":"597b4433e521cb4fbd91869a","tag_id":"597b4433e521cb4fbd918679","sort_order":3},{"id":"597b4434e521cb4fbd9186dc","post_id":"597b4433e521cb4fbd91869e","tag_id":"597b4433e521cb4fbd918683","sort_order":3},{"id":"597b4434e521cb4fbd9186dd","post_id":"597b4433e521cb4fbd9186a1","tag_id":"597b4433e521cb4fbd918685","sort_order":3},{"id":"597b4434e521cb4fbd9186de","post_id":"597b4433e521cb4fbd9186a2","tag_id":"597b4433e521cb4fbd91868b","sort_order":3},{"id":"597b4434e521cb4fbd9186df","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918688","sort_order":3},{"id":"597b4434e521cb4fbd9186e0","post_id":"597b4433e521cb4fbd91868f","tag_id":"597b4432e521cb4fbd91866b","sort_order":4},{"id":"597b4434e521cb4fbd9186e1","post_id":"597b4433e521cb4fbd91869a","tag_id":"597b4433e521cb4fbd91867b","sort_order":4},{"id":"597b4434e521cb4fbd9186e2","post_id":"597b4433e521cb4fbd91869e","tag_id":"597b4433e521cb4fbd918684","sort_order":4},{"id":"597b4434e521cb4fbd9186e3","post_id":"597b4433e521cb4fbd9186a1","tag_id":"597b4433e521cb4fbd918687","sort_order":4},{"id":"597b4434e521cb4fbd9186e4","post_id":"597b4433e521cb4fbd9186a2","tag_id":"597b4433e521cb4fbd918680","sort_order":4},{"id":"597b4434e521cb4fbd9186e5","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918681","sort_order":4},{"id":"597b4434e521cb4fbd9186e6","post_id":"597b4433e521cb4fbd9186a4","tag_id":"597b4433e521cb4fbd918689","sort_order":5},{"id":"597b696908a2db60d1f648bb","post_id":"597b64dc08a2db60d1f648ba","tag_id":"597b4432e521cb4fbd918664","sort_order":0},{"id":"597b696908a2db60d1f648bc","post_id":"597b64dc08a2db60d1f648ba","tag_id":"597b4432e521cb4fbd918665","sort_order":1},{"id":"597b696908a2db60d1f648be","post_id":"597b64dc08a2db60d1f648ba","tag_id":"597b696908a2db60d1f648bd","sort_order":2},{"id":"597b696908a2db60d1f648c0","post_id":"597b64dc08a2db60d1f648ba","tag_id":"597b696908a2db60d1f648bf","sort_order":3}],"roles":[{"id":"597b43301ffc934f6c0277bc","name":"Administrator","description":"Administrators","created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277bd","name":"Editor","description":"Editors","created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277be","name":"Author","description":"Authors","created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"},{"id":"597b43301ffc934f6c0277bf","name":"Owner","description":"Blog Owner","created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"}],"roles_users":[{"id":"597b43311ffc934f6c0277f1","role_id":"597b43301ffc934f6c0277be","user_id":"5951f5fca366002ebd5dbef7"},{"id":"597b43311ffc934f6c02785b","role_id":"597b43301ffc934f6c0277bf","user_id":"1"}],"settings":[{"id":"597b4336e521cb4fbd918641","key":"db_hash","value":"f07e86ed-63bb-4c95-8c99-79ee6f39ff43","type":"core","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-28T13:59:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918642","key":"next_update_check","value":"1503817865","type":"core","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-08-26T07:11:05.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918643","key":"display_update_notification","value":"1.7.1","type":"core","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-08-26T07:11:05.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918644","key":"seen_notifications","value":"[]","type":"core","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-28T13:59:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918645","key":"title","value":"Tomas Bjerre:s blog","type":"blog","created_at":"2014-10-04T13:54:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918646","key":"description","value":"My blog on things I find interesting.","type":"blog","created_at":"2014-10-04T13:54:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918647","key":"logo","value":"/content/images/2017/07/kna_crop_600.png","type":"blog","created_at":"2014-10-04T13:54:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918648","key":"cover_image","value":"/content/images/2017/07/kna_crop.jpg","type":"blog","created_at":"2014-10-04T13:54:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918649","key":"icon","value":"/content/images/2017/07/kna_crop_fyrt.png","type":"blog","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864a","key":"default_locale","value":"en","type":"blog","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864b","key":"active_timezone","value":"Europe/Amsterdam","type":"blog","created_at":"2016-09-10T13:47:09.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864c","key":"force_i18n","value":"true","type":"blog","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864d","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-10-04T13:54:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864e","key":"amp","value":"false","type":"blog","created_at":"2017-01-19T20:26:24.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91864f","key":"ghost_head","value":"","type":"blog","created_at":"2015-10-05T19:01:28.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918650","key":"ghost_foot","value":"<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-52248240-1', 'auto');\n  ga('send', 'pageview');\n\n</script>","type":"blog","created_at":"2015-10-05T19:01:28.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918651","key":"facebook","value":"tomas.bjerre","type":"blog","created_at":"2016-09-10T13:47:09.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918652","key":"twitter","value":"","type":"blog","created_at":"2016-09-10T13:47:09.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918653","key":"labs","value":"{\"publicAPI\":true}","type":"blog","created_at":"2015-10-05T19:01:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918654","key":"navigation","value":"[]","type":"blog","created_at":"2015-10-05T19:01:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918655","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-09-10T13:47:09.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918656","key":"active_theme","value":"casper","type":"theme","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-28T13:59:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918657","key":"active_apps","value":"[]","type":"app","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-07-28T13:59:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918658","key":"installed_apps","value":"[]","type":"app","created_at":"2017-07-28T13:59:18.000Z","created_by":"1","updated_at":"2017-08-26T06:07:34.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd918659","key":"is_private","value":"false","type":"private","created_at":"2015-10-05T19:01:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"},{"id":"597b4336e521cb4fbd91865a","key":"password","value":"","type":"private","created_at":"2015-10-05T19:01:29.000Z","created_by":"1","updated_at":"2017-07-30T06:51:18.000Z","updated_by":"1"}],"subscribers":[],"tags":[{"id":"597b4432e521cb4fbd918661","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:54:26.000Z","created_by":"1","updated_at":"2014-10-04T13:54:26.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918662","name":"ghost","slug":"ghost-post","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918663","name":"npm","slug":"npm","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918664","name":"Ghost","slug":"ghost-post-2","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918665","name":"Blog","slug":"blog-2","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918666","name":"NodeJS","slug":"nodejs-2","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918667","name":"NPM","slug":"npm-2","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918668","name":"sipervisor","slug":"sipervisor","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd918669","name":"Linux","slug":"linux","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd91866a","name":"Owncloud","slug":"owncloud","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4432e521cb4fbd91866b","name":"Supervisor","slug":"supervisor","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91866c","name":"PHP","slug":"php","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91866d","name":"OpenSSL","slug":"openssl","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91866e","name":"Raspberry","slug":"raspberry","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91866f","name":"Java","slug":"java","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918670","name":"ByggarMonster","slug":"byggarmonster","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918671","name":"HTMLUnitGenerator","slug":"htmlunitgenerator","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918672","name":"ArchLinux","slug":"archlinux","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918673","name":"Apache","slug":"apache","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918674","name":"disk_cache","slug":"disk_cache","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918675","name":"Surveillance","slug":"surveillance","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918676","name":"Swedish","slug":"swedish","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918677","name":"Ubuntu","slug":"ubuntu","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918678","name":"TrueCrypt","slug":"truecrypt","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918679","name":"VirtualBox","slug":"virtualbox","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867a","name":"Grails","slug":"grails","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867b","name":"Windows","slug":"windows","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867c","name":"HTMLUnit","slug":"htmlunit","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867d","name":"blog","slug":"blog","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867e","name":"nodejs","slug":"nodejs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91867f","name":"Lighttpd","slug":"lighttpd","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-04T13:57:36.000Z","created_by":"2","updated_at":"2014-10-04T13:57:36.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918680","name":"Jenkins","slug":"jenkins","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-02-18T17:55:53.000Z","created_by":"1","updated_at":"2015-02-18T17:55:53.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918681","name":"Git","slug":"git","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-02-18T17:55:53.000Z","created_by":"1","updated_at":"2015-02-18T17:55:53.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918682","name":"Atlassian","slug":"atlassian","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-02-18T17:55:53.000Z","created_by":"1","updated_at":"2015-02-18T17:55:53.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918683","name":"Stash","slug":"stash","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-02-18T17:55:53.000Z","created_by":"1","updated_at":"2015-02-18T17:55:53.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918684","name":"Pull Request","slug":"pull-request","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-02-18T17:55:53.000Z","created_by":"1","updated_at":"2015-02-18T17:55:53.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918685","name":"changelog","slug":"changelog","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-19T09:28:11.000Z","created_by":"1","updated_at":"2015-12-19T09:28:11.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918686","name":"GitHub","slug":"github","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:01:02.000Z","created_by":"1","updated_at":"2016-09-11T07:01:02.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918687","name":"Bitbucket Server","slug":"bitbucket-server","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:01:02.000Z","created_by":"1","updated_at":"2016-09-11T07:01:02.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918688","name":"Static Code Analysis","slug":"static-code-analysis","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:01:02.000Z","created_by":"1","updated_at":"2016-09-11T07:01:02.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd918689","name":"Plugins","slug":"plugins","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:01:02.000Z","created_by":"1","updated_at":"2016-09-11T07:01:02.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91868a","name":"Clean Code","slug":"clean-code","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:01:24.000Z","created_by":"1","updated_at":"2016-09-11T07:01:24.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91868b","name":"Travis CI","slug":"travis-ci","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-11T07:02:08.000Z","created_by":"1","updated_at":"2016-09-11T07:02:08.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91868c","name":"aktiebolag","slug":"aktiebolag","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-30T07:03:09.000Z","created_by":"1","updated_at":"2017-06-30T07:03:09.000Z","updated_by":"1"},{"id":"597b4433e521cb4fbd91868d","name":"bokföring","slug":"bokforing","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-30T07:03:09.000Z","created_by":"1","updated_at":"2017-06-30T07:03:09.000Z","updated_by":"1"},{"id":"597b696908a2db60d1f648bd","name":"cloudflare","slug":"cloudflare","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-07-28T16:42:17.000Z","created_by":"1","updated_at":"2017-07-28T16:42:17.000Z","updated_by":"1"},{"id":"597b696908a2db60d1f648bf","name":"buster","slug":"buster","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-07-28T16:42:17.000Z","created_by":"1","updated_at":"2017-07-28T16:42:17.000Z","updated_by":"1"}],"users":[{"id":"1","name":"Tomas Bjerre","slug":"tomas","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$P.gM9T5S1GCG//KF39iJBe/WTG64zOg/VpFDYQjpyujQwskJb3qSS","email":"tomas.bjerre85@gmail.com","profile_image":"//www.gravatar.com/avatar/8b306fbe92f324ae9717c03ec7651116?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"using-the-editor\",\"getting-started\",\"upload-a-theme\"]","last_seen":"2017-08-26T07:11:06.000Z","created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-08-26T07:11:06.000Z","updated_by":"1"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$uze1/90yOzDy279TMLotMuuIMDJFHmTsck15PWrbkk0EjYGBwZsf.","email":"ghost-author@example.com","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2017-07-28T13:59:12.000Z","created_by":"1","updated_at":"2017-07-28T13:59:12.000Z","updated_by":"1"}]}}